This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T20:21:10.583Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
assets/
  css/
    ipg-admin.css
    ipg-styles.css
  js/
    ipg-admin.js
    ipg-scripts.js
includes/
  Core/
    class-novabankaipggateway.php
  Exceptions/
    class-novabankaipgexception.php
  Interfaces/
    interface-api-handler.php
    interface-data-handler.php
    interface-logger.php
  Services/
    class-notificationservice.php
    class-paymentservice.php
  Utils/
    class-apihandler.php
    class-config.php
    class-datahandler.php
    class-logger.php
    class-messagehandler.php
    class-sharedutils.php
    class-threedshandler.php
.cursorignore
.cursorrules
.gitignore
Asoft IPG 3DS eCommerce Transaction flow.md
class-novabankaipg.php
developer-documentation.md
developer-redirect-payment.md
developer-strategy.md
developer-woo-ipg-logic.md
developer-woocommerce-payment-async-two-processes.md
developer-woocommerce-payment-async.md
ipg-gateway-example-php.md
Simplified Plan for Seperation of Concerns SOC.md
Simplified Plan for SOC To Do List.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="assets/css/ipg-admin.css">
/* assets/css/ipg-admin.css */

.ipg-admin-section {
    padding: 20px;
    background: #fff;
    border: 1px solid #ddd;
    margin: 10px 0;
}

.ipg-field-row {
    margin: 15px 0;
}

.ipg-field-row label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
}

.ipg-field-row input[type="text"],
.ipg-field-row input[type="password"] {
    width: 400px;
    max-width: 100%;
}

.ipg-field-description {
    color: #666;
    font-style: italic;
    margin-top: 5px;
}

.ipg-test-mode-notice {
    background: #fff8e5;
    border-left: 4px solid #ffb900;
    padding: 10px;
    margin: 10px 0;
}

/* Transaction details table */
.ipg-transaction-details {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
}

.ipg-transaction-details th,
.ipg-transaction-details td {
    padding: 8px;
    text-align: left;
    border: 1px solid #ddd;
}

.ipg-transaction-details th {
    background: #f8f8f8;
}
</file>

<file path="assets/css/ipg-styles.css">
/* assets/css/ipg-styles.css */

/* Payment form styling */
.ipg-payment-form {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
}

/* Loading overlay for redirect */
.ipg-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.ipg-loading-overlay.active {
    display: flex;
}

.ipg-loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

/* Payment status messages */
.ipg-status-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
}

.ipg-status-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.ipg-status-error {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Animation keyframes */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</file>

<file path="assets/js/ipg-admin.js">
// assets/js/ipg-admin.js

(function($) {
    'use strict';

    const NovaBankaIPGAdmin = {
        init: function() {
            this.initializeTooltips();
            this.handleTestMode();
            this.initializeValidation();
        },

        initializeTooltips: function() {
            $('.ipg-help-tip').tipTip({
                'attribute': 'data-tip',
                'fadeIn': 50,
                'fadeOut': 50,
                'delay': 200
            });
        },

        handleTestMode: function() {
            const testModeCheckbox = $('#woocommerce_novabankaipg_testmode');
            const credentialsSection = $('.ipg-credentials-section');

            testModeCheckbox.on('change', function() {
                if ($(this).is(':checked')) {
                    credentialsSection.before(
                        '<div class="ipg-test-mode-notice">' +
                        'Test mode is enabled - test credentials will be used.' +
                        '</div>'
                    );
                } else {
                    $('.ipg-test-mode-notice').remove();
                }
            });

            // Trigger on page load
            testModeCheckbox.trigger('change');
        },

        initializeValidation: function() {
            const form = $('form#mainform');

            form.on('submit', function(e) {
                const terminal_id = $('#woocommerce_novabankaipg_terminal_id').val();
                const terminal_password = $('#woocommerce_novabankaipg_terminal_password').val();
                const secret_key = $('#woocommerce_novabankaipg_secret_key').val();

                if ($('#woocommerce_novabankaipg_enabled').is(':checked')) {
                    if (!terminal_id || !terminal_password || !secret_key) {
                        e.preventDefault();
                        alert('Please provide all required credentials for the payment gateway.');
                        return false;
                    }
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPGAdmin.init();
    });

})(jQuery);
</file>

<file path="assets/js/ipg-scripts.js">
(function($) {
    'use strict';

    const NovaBankaIPG = {
        init: function() {
            this.form = $('form.checkout');
            this.submitButton = $('button#place_order');
            this.loadingOverlay = $('.ipg-loading-overlay');
            this.initializeEvents();
        },

        initializeEvents: function() {
            // Handle form submission
            this.form.on('checkout_place_order_novabankaipg', this.handleSubmit.bind(this));

            // Handle HPP return
            if (window.location.href.indexOf('novabankaipg-return') > -1) {
                this.handleReturn();
            }
        },

        handleSubmit: function() {
            this.showLoading();
            return true; // Allow form submission
        },

        showLoading: function() {
            this.loadingOverlay.addClass('active');
            this.submitButton.prop('disabled', true);
        },

        hideLoading: function() {
            this.loadingOverlay.removeClass('active');
            this.submitButton.prop('disabled', false);
        },

        handleReturn: function() {
            // Handle return from HPP
            const urlParams = new URLSearchParams(window.location.search);
            const status = urlParams.get('payment_status');

            if (status === 'success') {
                this.showMessage('Payment completed successfully.', 'success');
            } else if (status === 'cancel') {
                this.showMessage('Payment was cancelled.', 'error');
            } else if (status === 'error') {
                this.showMessage('Payment failed. Please try again.', 'error');
            }
        },

        showMessage: function(message, type) {
            // Remove existing messages
            $('.woocommerce-error, .woocommerce-message, .ipg-status-message').remove();

            // Create message element using WooCommerce classes for consistency
            const messageHtml = type === 'success' 
                ? `<div class="woocommerce-message">${message}</div>`
                : `<div class="woocommerce-error">${message}</div>`;
            
            // Add message to WooCommerce notices wrapper
            $('.woocommerce-notices-wrapper').first().html(messageHtml);

            // Scroll to message
            $('html, body').animate({
                scrollTop: $('.woocommerce-notices-wrapper').first().offset().top - 100
            }, 500);
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPG.init();
    });

})(jQuery);
</file>

<file path="includes/Core/class-novabankaipggateway.php">
<?php
/**
 * NovaBanka IPG Gateway Class
 *
 * This class integrates the NovaBanka IPG into WooCommerce.
 * Handles payment settings, order processing, and general WooCommerce compatibility.
 *
 * @package NovaBankaIPG\Core
 * @since 1.0.1
 */

namespace NovaBankaIPG\Core;

use NovaBankaIPG\Services\PaymentService;
use NovaBankaIPG\Services\NotificationService;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use WC_Payment_Gateway;
use Exception;

class NovaBankaIPGGateway extends WC_Payment_Gateway {
	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	protected $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	protected $logger;

	/**
	 * Payment Service instance.
	 *
	 * @var PaymentService
	 */
	protected $payment_service;

	/**
	 * Notification Service instance.
	 *
	 * @var NotificationService
	 */
	protected $notification_service;

	/**
	 * Constructor for the gateway.
	 *
	 * @param APIHandler|null $api_handler The API handler instance.
	 * @param Logger|null     $logger The logger instance.
	 */
	public function __construct( APIHandler $api_handler = null, Logger $logger = null ) {
		$this->id                 = 'novabankaipg';
		$this->has_fields         = true;
		$this->method_title       = __( 'NovaBanka IPG', 'novabanka-ipg-gateway' );
		$this->method_description = __( 'Accept payments through NovaBanka IPG gateway with 3D Secure.', 'novabanka-ipg-gateway' );

		// Initialize dependencies.
		$this->api_handler = $api_handler ?? new APIHandler(); // Use provided API handler or create a new one.
		$this->logger      = $logger ?? new Logger(); // Use provided Logger or create a new one.

		// Initialize PaymentService and NotificationService.
		$this->payment_service      = new PaymentService( $this->api_handler, $this->logger );
		$this->notification_service = new NotificationService( $this->api_handler, $this->logger );

		// Load settings using Config utility.
		$this->init_form_fields(); // Initialize the settings form fields for the payment gateway.
		$this->init_settings(); // Load current settings from WooCommerce.

		// Add hooks for receipt and IPN notifications.
		add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) ); // Hook for saving settings in the admin panel.
		add_action( 'woocommerce_receipt_' . $this->id, array( $this, 'receipt_page' ) ); // Hook for displaying the receipt page after checkout.
		add_action( 'woocommerce_api_wc_' . $this->id, array( $this, 'handle_notification_callback' ) ); // Hook for handling IPN notifications from NovaBanka IPG.
	}

	/**
	 * Initialize gateway settings form fields.
	 *
	 * This method defines the form fields for the payment gateway settings in WooCommerce.
	 */
	public function init_form_fields() {
		$this->form_fields = array(
			'enabled'     => array(
				'title'   => __( 'Enable/Disable', 'novabanka-ipg-gateway' ),
				'type'    => 'checkbox',
				'label'   => __( 'Enable NovaBanka IPG Payment Gateway', 'novabanka-ipg-gateway' ),
				'default' => Config::get_setting( 'enabled' ) ?? 'no',
			),
			'title'       => array(
				'title'       => __( 'Title', 'novabanka-ipg-gateway' ),
				'type'        => 'text',
				'description' => __( 'The title the user sees during checkout.', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'title' ) ?? __( 'NovaBanka IPG', 'novabanka-ipg-gateway' ),
				'desc_tip'    => true,
			),
			'description' => array(
				'title'       => __( 'Description', 'novabanka-ipg-gateway' ),
				'type'        => 'textarea',
				'description' => __( 'The description the user sees during checkout.', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'description' ) ?? __( 'Pay securely using NovaBanka IPG.', 'novabanka-ipg-gateway' ),
			),
			'test_mode'   => array(
				'title'       => __( 'Test Mode', 'novabanka-ipg-gateway' ),
				'type'        => 'checkbox',
				'label'       => __( 'Enable Test Mode', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'test_mode' ) ?? 'yes',
				'description' => __( 'Place the payment gateway in test mode to simulate transactions.', 'novabanka-ipg-gateway' ),
			),
		);
	}

	/**
	 * Process the payment for an order.
	 *
	 * @param int $order_id Order ID.
	 * @return array|
	 * @throws Exception When payment processing fails.
	 *
	 * This method is called when a customer places an order and chooses this payment gateway.
	 */
	public function process_payment( $order_id ) {
		try {
			$order = wc_get_order( $order_id ); // Retrieve the WooCommerce order by ID.

			// Check if the gateway is in test mode and log accordingly.
			if ( Config::is_test_mode() ) {
				$this->logger->info( 'Processing payment in test mode.', array( 'order_id' => $order_id ) );
			}

			// Use PaymentService to initialize the payment.
			$response = $this->payment_service->initialize_payment( $order );

			// Store payment ID and redirect user to the payment gateway.
			$order->update_status( 'on-hold', __( 'Awaiting payment gateway response.', 'novabanka-ipg-gateway' ) );
			$this->logger->info(
				'Payment process initialized.',
				array(
					'order_id' => $order_id,
					'response' => $response,
				)
			);
			return array(
				'result'   => 'success',
				'redirect' => $response['browserRedirectionURL'], // Redirect customer to the payment gateway.
			);
		} catch ( Exception $e ) {
			// Log the error and notify the customer.
			$this->logger->error(
				'Payment process failed.',
				array(
					'order_id' => $order_id,
					'error'    => $e->getMessage(),
				)
			);
			wc_add_notice( __( 'Payment error: ', 'novabanka-ipg-gateway' ) . $e->getMessage(), 'error' );
			return array(
				'result' => 'failure',
			);
		}
	}

	/**
	 * Receipt page.
	 *
	 * @param int $order_id Order ID.
	 *
	 * This method displays the receipt page where customers can proceed to payment after placing an order.
	 */
	public function receipt_page( $order_id ) {
		echo '<p>' . esc_html__( 'Thank you for your order, please click the button below to pay.', 'novabanka-ipg-gateway' ) . '</p>';
		echo '<button id="novabanka-ipg-pay-button">' . esc_html__( 'Proceed to Payment', 'novabanka-ipg-gateway' ) . '</button>'; // Display the payment button.
	}

	/**
	 * Handle notification callback from IPG.
	 *
	 * This method is called when the IPG sends a notification regarding payment status.
	 * It verifies the notification and updates the order accordingly.
	 */
	public function handle_notification_callback() {
		try {
			$notification_data = $_POST; // Assuming IPG sends POST data.

			// Log if in test mode.
			if ( Config::is_test_mode() ) {
				$this->logger->info( 'Handling notification in test mode.', array( 'notification_data' => $notification_data ) );
			}

			// Use NotificationService to handle the notification.
			$this->notification_service->handle_notification( $notification_data );

			// Respond to IPG to confirm successful processing.
			http_response_code( 200 );
			$this->logger->info( 'Notification callback handled successfully.', array( 'notification_data' => $notification_data ) );
			echo 'OK';
		} catch ( Exception $e ) {
			// Log the error and respond with failure.
			$this->logger->error(
				'Notification callback handling failed.',
				array(
					'error' => $e->getMessage(),
				)
			);
			http_response_code( 500 );
			echo 'FAIL';
		}
	}
}
</file>

<file path="includes/Exceptions/class-novabankaipgexception.php">
<?php
/**
 * Custom Exception Handler
 *
 * @package     NovaBankaIPG\Exceptions
 * @since       1.0.0
 */

namespace NovaBankaIPG\Exceptions;

defined( 'ABSPATH' ) || exit;

/**
 * NovaBankaIPGException Class
 *
 * Custom exception class for handling IPG specific errors.
 *
 * @since 1.0.0
 */
class NovaBankaIPGException extends \Exception {
	/**
	 * Error codes and their messages
	 */
	private const ERROR_CODES = array(
		// API Errors.
		'API_ERROR'             => array(
			'code'    => 1000,
			'message' => 'API communication error',
		),
		'INVALID_RESPONSE'      => array(
			'code'    => 1001,
			'message' => 'Invalid response from gateway',
		),
		'INVALID_SIGNATURE'     => array(
			'code'    => 1002,
			'message' => 'Invalid message signature',
		),

		// Validation Errors.
		'INVALID_AMOUNT'        => array(
			'code'    => 2000,
			'message' => 'Invalid amount format or value',
		),
		'INVALID_CURRENCY'      => array(
			'code'    => 2001,
			'message' => 'Unsupported currency',
		),
		'MISSING_FIELD'         => array(
			'code'    => 2002,
			'message' => 'Required field missing',
		),

		// Payment Errors.
		'PAYMENT_FAILED'        => array(
			'code'    => 3000,
			'message' => 'Payment failed',
		),
		'PAYMENT_CANCELLED'     => array(
			'code'    => 3001,
			'message' => 'Payment cancelled by user',
		),
		'3DS_ERROR'             => array(
			'code'    => 3002,
			'message' => '3D Secure authentication failed',
		),

		// Order Errors.
		'ORDER_NOT_FOUND'       => array(
			'code'    => 4000,
			'message' => 'Order not found',
		),
		'INVALID_ORDER_STATE'   => array(
			'code'    => 4001,
			'message' => 'Invalid order state',
		),

		// Configuration Errors.
		'INVALID_CONFIGURATION' => array(
			'code'    => 5000,
			'message' => 'Invalid gateway configuration',
		),
	);

	/**
	 * Additional error data
	 *
	 * @var mixed
	 */
	private $error_data;

	/**
	 * Error type
	 *
	 * @var string
	 */
	private $error_type;

	/**
	 * Constructor
	 *
	 * @param string          $message    Error message.
	 * @param string          $error_type Error type from ERROR_CODES.
	 * @param mixed           $error_data Additional error data.
	 * @param \Throwable|null $previous   Previous exception.
	 */
	public function __construct(
		string $message = '',
		string $error_type = 'API_ERROR',
		$error_data = null,
		\Throwable $previous = null
	) {
		$error_code = self::ERROR_CODES[ $error_type ]['code'] ?? 1000;
		parent::__construct(
			$message ?: self::ERROR_CODES[ $error_type ]['message'],
			$error_code,
			$previous
		);
		$this->error_type = $error_type;
		$this->error_data = $error_data;
	}

	/**
	 * Get error data
	 *
	 * @return mixed
	 */
	public function getErrorData() {
		return $this->error_data;
	}

	/**
	 * Get error type
	 *
	 * @return string
	 */
	public function getErrorType(): string {
		return $this->error_type;
	}

	/**
	 * Create API error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function apiError( string $message = '', $data = null ): self {
		return new self( $message, 'API_ERROR', $data );
	}

	/**
	 * Create validation error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function validationError( string $message = '', $data = null ): self {
		return new self( $message, 'MISSING_FIELD', $data );
	}

	/**
	 * Create payment error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function paymentError( string $message = '', $data = null ): self {
		return new self( $message, 'PAYMENT_FAILED', $data );
	}

	/**
	 * Create an invalid signature exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function invalidSignature( string $message = '', $data = null ): self {
		return new self( $message, 'INVALID_SIGNATURE', $data );
	}

	/**
	 * Create an order not found exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function orderNotFound( string $message = '', $data = null ): self {
		return new self( $message, 'ORDER_NOT_FOUND', $data );
	}

	/**
	 * Create invalid configuration exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function invalidConfiguration( string $message = '', $data = null ): self {
		return new self( $message, 'INVALID_CONFIGURATION', $data );
	}
}
</file>

<file path="includes/Interfaces/interface-api-handler.php">
<?php
/**
 * Interface for API Handler
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.0
 */

namespace NovaBankaIPG\Interfaces;

interface APIHandlerInterface {
	/**
	 * Send PaymentInit request to IPG
	 *
	 * @param array $data Payment initialization data.
	 * @return array
	 * @throws NovaBankaIPG\Exceptions\NovaBankaIPGException If the payment initialization fails.
	 */
	public function send_payment_init( array $data ): array;

	/**
	 * Verify payment notification
	 *
	 * @param array $notification Notification data.
	 * @return bool
	 * @throws NovaBankaIPG\Exceptions\NovaBankaIPGException If the notification verification fails.
	 */
	public function verify_notification( array $notification ): bool;

	/**
	 * Generate notification response
	 *
	 * @param string $payment_id  Payment ID.
	 * @param string $redirect_url Redirect URL.
	 * @return array
	 */
	public function generate_notification_response( string $payment_id, string $redirect_url ): array;

	/**
	 * Set API configuration
	 *
	 * @param array $config API configuration.
	 * @return void
	 */
	public function set_config( array $config ): void;
}
</file>

<file path="includes/Interfaces/interface-data-handler.php">
<?php
/**
 * Defines the DataHandler interface for managing data operations
 *
 * @package NovaBankaIPG\Interfaces
 */

namespace NovaBankaIPG\Interfaces;

interface DataHandler {
	/**
	 * Format amount for IPG.
	 *
	 * @param float $amount Amount to format.
	 * @return string Formatted amount.
	 */
	public function format_amount( float $amount ): string;

	/**
	 * Format phone number.
	 *
	 * @param string $phone Phone number to format.
	 * @return string|null Formatted phone number or null if not formatted.
	 */
	public function format_phone( string $phone ): ?string;

	/**
	 * Format item amount.
	 *
	 * @param float $amount Amount to format.
	 * @param int   $quantity Quantity to format.
	 * @return string Formatted amount.
	 */
	public function format_item_amount( float $amount, int $quantity = 1 ): string;

	/**
	 * Validate language code.
	 *
	 * @param string $lang_code Language code to validate.
	 * @return string Validated language code.
	 */
	public function validate_language_code( string $lang_code ): string;
}
</file>

<file path="includes/Interfaces/interface-logger.php">
<?php
/**
 * Logger Interface
 *
 * @package     NovaBankaIPG\Interfaces
 * @since       1.0.0
 */

namespace NovaBankaIPG\Interfaces;

defined( 'ABSPATH' ) || exit;

/**
 * Logger Interface
 *
 * @since 1.0.0
 */
interface Logger {
	/**
	 * Log debug message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function debug( string $message, array $context = array() ): void;

	/**
	 * Log info message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function info( string $message, array $context = array() ): void;

	/**
	 * Log warning message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function warning( string $message, array $context = array() ): void;

	/**
	 * Log error message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function error( string $message, array $context = array() ): void;

	/**
	 * Log critical message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function critical( string $message, array $context = array() ): void;

	/**
	 * Log payment process
	 *
	 * @param string $status  Payment status.
	 * @param string $message Status message.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function log_payment( string $status, string $message, array $context = array() ): void;
}
</file>

<file path="includes/Services/class-notificationservice.php">
<?php
/**
 * NotificationService Class
 *
 * This class is responsible for managing notification-related logic for NovaBanka IPG.
 * It handles notifications received from IPG and processes them accordingly.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

class NotificationService {

	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * DataHandler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Constructor for the NotificationService class.
	 *
	 * @param APIHandler  $api_handler API handler instance.
	 * @param Logger      $logger Logger instance.
	 * @param DataHandler $data_handler Data handler instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger, DataHandler $data_handler ) {
		$this->api_handler  = $api_handler;
		$this->logger       = $logger;
		$this->data_handler = $data_handler;
	}

	/**
	 * Handle incoming notification from IPG.
	 *
	 * @param array $notification_data The notification data received from IPG.
	 * @return void
	 * @throws NovaBankaIPGException When the notification handling fails.
	 */
	public function handle_notification( array $notification_data ): void {
		try {
			// Validate required fields.
			SharedUtilities::validate_required_fields(
				$notification_data,
				array(
					'msgName',
					'version',
					'paymentid',
					'status',
					'result',
					'amt',
					'msgVerifier',
				)
			);

			// Verify message signature.
			$verifier_fields     = array(
				$notification_data['msgName'],
				$notification_data['version'],
				$notification_data['paymentid'],
				$notification_data['amt'],
				$notification_data['status'],
				$notification_data['result'],
			);
			$calculated_verifier = SharedUtilities::generate_message_verifier( ...$verifier_fields );

			if ( ! hash_equals( $calculated_verifier, $notification_data['msgVerifier'] ) ) {
				throw new NovaBankaIPGException( 'Invalid notification message signature.' );
			}

			// Log the notification if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Notification received', array( 'notification_data' => $notification_data ) );
			}

			$order_id = $notification_data['paymentid'];
			$order    = wc_get_order( $order_id );

			if ( ! $order ) {
				throw new NovaBankaIPGException( 'Order not found for ID: ' . esc_html( $order_id ) );
			}

			// Handle different notification statuses.
			switch ( $notification_data['status'] ) {
				case 'SUCCESS':
					$this->process_successful_payment( $order, $notification_data );
					$this->logger->info( 'Payment notification processed successfully.', array( 'payment_id' => $notification_data['paymentid'] ) );
					break;
				case 'FAILED':
					$this->process_failed_payment( $order, $notification_data );
					$this->logger->error( 'Payment notification indicates a failure.', array( 'payment_id' => $notification_data['paymentid'] ) );
					break;
				case 'DECLINED':
					$this->process_declined_payment( $order, $notification_data );
					$this->logger->warning( 'Payment was declined.', array( 'payment_id' => $notification_data['paymentid'] ) );
					break;
				case 'CANCELLED':
					$this->process_cancelled_payment( $order, $notification_data );
					$this->logger->info( 'Payment was cancelled by the user.', array( 'payment_id' => $notification_data['paymentid'] ) );
					break;
				default:
					$this->logger->warning(
						'Unhandled payment status received in notification.',
						array(
							'payment_id' => $notification_data['paymentid'],
							'status'     => $notification_data['status'],
						)
					);
					throw new NovaBankaIPGException( 'Unhandled payment status received in notification.' );
			}
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'Notification handling failed.',
				array(
					'error'             => $e->getMessage(),
					'notification_data' => $notification_data,
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'Notification handling failed due to an unexpected error.',
				array(
					'error'             => $e->getMessage(),
					'notification_data' => $notification_data,
				)
			);
			throw new NovaBankaIPGException( 'Notification handling failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Process successful payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_successful_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->payment_complete( $notification_data['tranid'] );
		$order->add_order_note(
			sprintf(
				__( 'Payment completed successfully. Transaction ID: %1$s, Auth Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['tranid'],
				$notification_data['auth'],
				$formatted_amount
			)
		);
		$order->update_meta_data( '_novabankaipg_auth_code', $notification_data['auth'] );
		$order->update_meta_data( '_novabankaipg_card_type', $notification_data['cardtype'] ?? 'unknown' );
		$order->update_meta_data( '_novabankaipg_card_last4', $notification_data['cardLastFourDigits'] );
		$order->update_meta_data( '_novabankaipg_payment_reference', $notification_data['paymentReference'] ?? 'N/A' );
		$order->save();
	}

	/**
	 * Process declined payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_declined_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'on-hold',
			sprintf(
				__( 'Payment was declined. Result: %1$s, Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A',
				$formatted_amount
			)
		);
	}

	/**
	 * Process failed payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_failed_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'failed',
			sprintf(
				__( 'Payment failed. Result: %1$s, Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A',
				$formatted_amount
			)
		);
	}

	/**
	 * Process cancelled payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_cancelled_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'cancelled',
			sprintf(
				__( 'Payment was cancelled. Result: %1$s, Amount: %2$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$formatted_amount
			)
		);
	}
}
</file>

<file path="includes/Services/class-paymentservice.php">
<?php
/**
 * PaymentService Class
 *
 * This class is responsible for managing payment-related logic for NovaBanka IPG.
 * It processes payments, manages refunds, and handles payment status updates.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

class PaymentService {

	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor for the PaymentService class.
	 *
	 * @param APIHandler $api_handler API handler instance.
	 * @param Logger     $logger Logger instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger ) {
		$this->api_handler = $api_handler;
		$this->logger      = $logger;
	}

	/**
	 * Process a payment for an order.
	 *
	 * @param WC_Order $order The order to process payment for.
	 * @param array    $payment_data The payment data to be sent to IPG.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the payment processing fails.
	 */
	public function process_payment( WC_Order $order, array $payment_data ): array {
		try {
			// Validate required fields.
			SharedUtilities::validate_required_fields(
				$payment_data,
				array(
					'amount',
					'currency',
					'order_id',
				)
			);

			// Log payment request if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Processing payment request', array( 'payment_data' => $payment_data ) );
			}

			// Send the payment request to the IPG.
			$response = $this->api_handler->send_payment_request( $payment_data );

			// Handle the response from IPG.
			if ( $response['status'] === 'SUCCESS' ) {
				$order->payment_complete( $response['transaction_id'] );
				$order->add_order_note(
					sprintf(
						__( 'Payment processed successfully. Transaction ID: %1$s, Amount: %2$s', 'novabanka-ipg-gateway' ),
						$response['transaction_id'],
						$payment_data['amount']
					)
				);
				$this->logger->info(
					'Payment processed successfully.',
					array(
						'order_id' => $order->get_id(),
						'response' => $response,
					)
				);
			} else {
				throw NovaBankaIPGException::paymentError( 'Payment processing failed.', $response );
			}

			return $response;
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'Payment processing failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'Payment processing failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( 'Payment processing failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Refund a payment for an order.
	 *
	 * @param WC_Order $order The order to refund.
	 * @param float    $amount The amount to refund.
	 * @param string   $reason The reason for the refund.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the refund fails.
	 */
	public function process_refund( WC_Order $order, float $amount, string $reason = '' ): array {
		try {
			// Validate required fields.
			SharedUtilities::validate_required_fields( array( 'amount' => $amount ), array( 'amount' ) );

			$refund_data = array(
				'order_id' => $order->get_id(),
				'amount'   => $amount,
				'reason'   => $reason,
			);

			// Log refund request if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Processing refund request', array( 'refund_data' => $refund_data ) );
			}

			// Send the refund request to the IPG.
			$response = $this->api_handler->send_refund_request( $refund_data );

			// Handle the response from IPG.
			if ( $response['status'] === 'SUCCESS' ) {
				$order->add_order_note(
					sprintf(
						__( 'Refund processed successfully. Refund Amount: %1$s, Reason: %2$s', 'novabanka-ipg-gateway' ),
						$amount,
						$reason
					)
				);
				$this->logger->info(
					'Refund processed successfully.',
					array(
						'order_id' => $order->get_id(),
						'response' => $response,
					)
				);
			} else {
				throw NovaBankaIPGException::paymentError( 'Refund processing failed.', $response );
			}

			return $response;
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'Refund processing failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'Refund processing failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( 'Refund processing failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Parse payment query response.
	 *
	 * @param array $response Response from gateway.
	 * @return array Processed response data.
	 * @throws NovaBankaIPGException If response processing fails due to invalid input or processing error.
	 */
	public function parse_payment_query_response( array $response ): array {
		try {
			// Validate required fields.
			SharedUtilities::validate_required_fields(
				$response,
				array(
					'msgName',
					'version',
					'msgDateTime',
					'paymentid',
					'trackid',
					'status',
					'result',
					'amt',
					'msgVerifier',
				)
			);

			// Parse transaction rows if present.
			$transactions = array();
			if ( ! empty( $response['rows'] ) ) {
				$transactions = SharedUtilities::parse_transaction_rows( $response['rows'] );
			}

			// Construct parsed response.
			$parsed_response = array(
				'payment_id'   => $response['paymentid'],
				'track_id'     => $response['trackid'],
				'status'       => SharedUtilities::get_status_description( $response['status'] ),
				'result'       => $response['result'],
				'amount'       => $response['amt'],
				'currency'     => $response['currencycode'] ?? null,
				'transactions' => $transactions,
			);

			return $parsed_response;
		} catch ( Exception $e ) {
			$this->logger->error(
				'Payment Query response processing failed',
				array(
					'error'    => $e->getMessage(),
					'response' => $response,
				)
			);
			throw new NovaBankaIPGException( $e->getMessage(), 'QUERY_RESPONSE_ERROR', $response );
		}
	}
}
</file>

<file path="includes/Utils/class-apihandler.php">
<?php
/**
 * APIHandler Utility Class
 *
 * This class is responsible for managing HTTP communication with the NovaBanka IPG API.
 * It abstracts all the API requests and responses, focusing only on interactions with the IPG endpoints.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WP_Error;

class APIHandler {
	/**
	 * Send payment initialization request to the IPG API.
	 *
	 * @param array $payment_data The data for initializing payment.
	 * @return array The response from the IPG API.
	 * @throws NovaBankaIPGException If the request fails or returns an error.
	 */
	public function send_payment_init( array $payment_data ) {
		// Validate required fields.
		SharedUtilities::validate_required_fields( $payment_data, array( 'amount', 'currency', 'order_id' ) );

		$endpoint = SharedUtilities::get_api_endpoint( '/payment-init' );

		$response = wp_remote_post(
			$endpoint,
			array(
				'body'    => json_encode( $payment_data ),
				'headers' => array(
					'Content-Type' => 'application/json',
				),
			)
		);

		return $this->handle_response( $response );
	}

	/**
	 * Send refund request to the IPG API.
	 *
	 * @param array $refund_data The data for processing a refund.
	 * @return array The response from the IPG API.
	 * @throws NovaBankaIPGException If the request fails or returns an error.
	 */
	public function process_refund( array $refund_data ) {
		// Validate required fields.
		SharedUtilities::validate_required_fields( $refund_data, array( 'amount', 'order_id' ) );

		$endpoint = SharedUtilities::get_api_endpoint( '/refund' );

		$response = wp_remote_post(
			$endpoint,
			array(
				'body'    => json_encode( $refund_data ),
				'headers' => array(
					'Content-Type' => 'application/json',
				),
			)
		);

		return $this->handle_response( $response );
	}

	/**
	 * Verify payment notification from the IPG.
	 *
	 * @param array $notification_data The data received from IPG to verify.
	 * @return bool True if notification verification is successful, false otherwise.
	 * @throws NovaBankaIPGException If the verification fails.
	 */
	public function verify_notification( array $notification_data ) {
		// Validate required fields.
		SharedUtilities::validate_required_fields( $notification_data, array( 'msgVerifier' ) );

		// Generate the expected signature.
		$expected_signature = SharedUtilities::generate_message_verifier( ...array_values( $notification_data ) );
		return hash_equals( $expected_signature, $notification_data['msgVerifier'] );
	}

	/**
	 * Handle the response from an API request.
	 *
	 * @param array|WP_Error $response The response from wp_remote_post or wp_remote_get.
	 * @return array The decoded response body.
	 * @throws NovaBankaIPGException If the response contains errors.
	 */
	private function handle_response( $response ) {
		if ( is_wp_error( $response ) ) {
			throw new NovaBankaIPGException( 'API request failed: ' . $response->get_error_message() );
		}

		$response_code = wp_remote_retrieve_response_code( $response );
		$response_body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( $response_code < 200 || $response_code >= 300 ) {
			throw new NovaBankaIPGException( 'API request returned error code ' . $response_code . ': ' . json_encode( $response_body ) );
		}

		return $response_body;
	}
}
</file>

<file path="includes/Utils/class-config.php">
<?php
/**
 * Config Utility Class
 *
 * This class is responsible for managing the plugin configuration settings.
 * It provides methods to retrieve and update configuration options for the NovaBanka IPG plugin.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

class Config {
	/**
	 * Retrieve a setting value by key.
	 *
	 * @param string $key The setting key to retrieve.
	 * @return mixed The setting value or null if not found.
	 */
	public static function get_setting( $key ) {
		$settings = get_option( 'woocommerce_novabankaipg_settings', array() );
		return $settings[ $key ] ?? null;
	}

	/**
	 * Retrieve all plugin settings.
	 *
	 * @return array All settings as an associative array.
	 */
	public static function get_all_settings() {
		return get_option( 'woocommerce_novabankaipg_settings', array() );
	}

	/**
	 * Update a specific plugin setting.
	 *
	 * @param string $key The setting key to update.
	 * @param mixed  $value The new value for the setting.
	 * @return bool True on success, false on failure.
	 */
	public static function update_setting( $key, $value ) {
		$settings         = get_option( 'woocommerce_novabankaipg_settings', array() );
		$settings[ $key ] = $value;
		return update_option( 'woocommerce_novabankaipg_settings', $settings );
	}

	/**
	 * Determine if the plugin is in test mode.
	 *
	 * @return bool True if test mode is enabled, false otherwise.
	 */
	public static function is_test_mode() {
		return self::get_setting( 'test_mode' ) === 'yes';
	}

	/**
	 * Determine if debug logging is enabled.
	 *
	 * @return bool True if debug logging is enabled, false otherwise.
	 */
	public static function is_debug_mode() {
		return self::get_setting( 'debug' ) === 'yes';
	}
}
</file>

<file path="includes/Utils/class-datahandler.php">
<?php
/**
 * DataHandler Utility Class
 *
 * This class is responsible for handling various data formatting and validation processes,
 * such as formatting payment amounts, phone numbers, item quantities, and validating language codes.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;

class DataHandler {
	/**
	 * Currency codes mapping as per IPG specs.
	 *
	 * @var array
	 */
	protected const CURRENCY_CODES = array(
		'EUR' => '978',
		'USD' => '840',
		'GBP' => '826',
		'BAM' => '977',
	);

	/**
	 * Maximum field lengths as per IPG specs.
	 *
	 * @var array
	 */
	protected const FIELD_LENGTHS = array(
		'phone'    => 20,
		'email'    => 255,
		'amount'   => 10,  // Plus 2 decimals.
		'name'     => 50,
		'address1' => 100,
		'address2' => 100,
		'address3' => 40,
		'city'     => 40,
		'zip'      => 20,
	);

	/**
	 * Format the payment amount to the required decimal places.
	 *
	 * @param float|string $amount Amount to format.
	 * @return string
	 * @throws NovaBankaIPGException If the amount is not numeric or exceeds the maximum allowed value.
	 */
	public function format_amount( $amount ) {
		// Remove any existing formatting.
		$amount = str_replace( array( ',', ' ' ), '', (string) $amount );

		if ( ! is_numeric( $amount ) ) {
			throw NovaBankaIPGException::invalidRequest( 'Invalid amount format.' );
		}

		$amount = (float) $amount;

		// Check maximum value.
		if ( $amount > 9999999999.99 ) {
			throw NovaBankaIPGException::invalidRequest( 'Amount exceeds maximum allowed value.' );
		}

		// Format with exactly 2 decimal places.
		return number_format( $amount, 2, '.', '' );
	}

	/**
	 * Format a phone number to the expected format for API communication.
	 *
	 * @param string $phone_number The phone number to format.
	 * @return string|null
	 */
	public static function format_phone( $phone_number ) {
		if ( empty( $phone_number ) ) {
			return null;
		}

		// Remove everything except numbers and +.
		$phone_number = preg_replace( '/[^0-9+]/', '', $phone_number );

		// Ensure + is only at the start.
		$phone_number = preg_replace( '/(?!^)\+/', '', $phone_number );

		// Truncate to max length defined in FIELD_LENGTHS.
		return substr( $phone_number, 0, self::FIELD_LENGTHS['phone'] );
	}

	/**
	 * Format email according to IPG specifications.
	 *
	 * @param string $email Email address.
	 * @return string|null
	 */
	public function format_email( $email ) {
		$email = sanitize_email( $email );

		if ( ! is_email( $email ) ) {
			return null;
		}

		// Truncate to max length defined in FIELD_LENGTHS.
		return substr( $email, 0, self::FIELD_LENGTHS['email'] );
	}

	/**
	 * Validate the language code to ensure it meets expected standards.
	 *
	 * @param string $language_code The language code to validate.
	 * @return bool True if the language code is valid, false otherwise.
	 */
	public static function validate_language_code( $language_code ) {
		// Ensure language code is two or three letters (e.g., 'EN', 'FR', 'ESP').
		return preg_match( '/^[a-zA-Z]{2,3}$/', $language_code ) === 1;
	}

	/**
	 * Format the item quantity to an integer value.
	 *
	 * @param float $quantity The quantity to format.
	 * @return int The formatted item quantity.
	 */
	public static function format_quantity( $quantity ) {
		return (int) $quantity;
	}

	/**
	 * Get currency code based on the currency name.
	 *
	 * @param string $currency Currency name (e.g., 'EUR', 'USD').
	 * @return string|null Currency code or null if not found.
	 */
	public function get_currency_code( $currency ) {
		return self::CURRENCY_CODES[ $currency ] ?? null;
	}
}
</file>

<file path="includes/Utils/class-logger.php">
<?php
/**
 * Logger Utility Class
 *
 * This class is responsible for managing all logging for the NovaBanka IPG plugin.
 * It uses WordPress's built-in WC_Logger to handle different levels of logging based on plugin settings.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use WC_Logger;

class Logger {
	/**
	 * Logger instance.
	 *
	 * @var WC_Logger
	 */
	private $logger;

	/**
	 * Constructor for the Logger utility class.
	 */
	public function __construct() {
		$this->logger = new WC_Logger();
	}

	/**
	 * Log informational messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function info( $message, array $context = array() ) {
		if ( Config::is_debug_mode() ) {
			$this->log( 'info', $message, $context );
		}
	}

	/**
	 * Log warning messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function warning( $message, array $context = array() ) {
		$this->log( 'warning', $message, $context );
	}

	/**
	 * Log error messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function error( $message, array $context = array() ) {
		$this->log( 'error', $message, $context );
	}

	/**
	 * Log debug messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function debug( $message, array $context = array() ) {
		if ( Config::is_debug_mode() ) {
			$this->log( 'debug', $message, $context );
		}
	}

	/**
	 * Generic log method for handling all log levels.
	 *
	 * @param string $level The level of the log (info, warning, error, debug).
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	private function log( $level, $message, array $context = array() ) {
		$context_string = empty( $context ) ? '' : json_encode( $context );
		$this->logger->log( $level, sprintf( '[%s] %s %s', strtoupper( $level ), $message, $context_string ) );
	}
}
</file>

<file path="includes/Utils/class-messagehandler.php">
<?php
/**
 * Message Handler Implementation
 *
 * Handles message construction, verification, and processing for IPG integration.
 *
 * @package     NovaBankaIPG\Utils
 * @since       1.0.0
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use NovaBankaIPG\Utils\SharedUtilities;

defined( 'ABSPATH' ) || exit;

/**
 * Class MessageHandler.
 *
 * Handles message construction, verification, and processing for IPG integration.
 *
 * @package     NovaBankaIPG\Utils
 * @since       1.0.0
 */
class MessageHandler {
	/**
	 * Secret key for message verification.
	 *
	 * @var string
	 */
	private $secret_key;

	/**
	 * Data handler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Terminal ID.
	 *
	 * @var string
	 */
	private $terminal_id;

	/**
	 * Terminal password.
	 *
	 * @var string
	 */
	private $terminal_password;

	/**
	 * Constructor
	 *
	 * @param string      $terminal_id       Terminal ID.
	 * @param string      $terminal_password Terminal password.
	 * @param string      $secret_key        Secret key for message verification.
	 * @param DataHandler $data_handler      Data handler instance.
	 * @param Logger      $logger            Logger instance.
	 */
	public function __construct(
		string $terminal_id,
		string $terminal_password,
		string $secret_key,
		DataHandler $data_handler,
		Logger $logger
	) {
		$this->terminal_id       = $terminal_id;
		$this->terminal_password = $terminal_password;
		$this->secret_key        = $secret_key;
		$this->data_handler      = $data_handler;
		$this->logger            = $logger;
	}

	/**
	 * Generate PaymentInit request message.
	 *
	 * @param array $data Payment data.
	 * @return array
	 * @throws NovaBankaIPGException When required fields are missing or invalid.
	 */
	public function generate_payment_init_request( array $data ): array {
		try {
			// Validate required fields.
			SharedUtilities::validate_required_fields(
				$data,
				array(
					'id',
					'password',
					'amount',
					'currency',
					'trackid',
					'responseURL',
					'errorURL',
					'langid',
				)
			);

			$request = $this->prepare_payment_init_request( $data );

			$this->logger->debug( 'Generated PaymentInit request.', array( 'request' => $request ) );

			return $request;
		} catch ( \Exception $e ) {
			$this->logger->error(
				'Failed to generate PaymentInit request.',
				array(
					'error' => esc_html( $e->getMessage() ),
					'data'  => esc_html( wp_json_encode( $data ) ),
				)
			);
			throw new NovaBankaIPGException(
				esc_html( $e->getMessage() ),
				'REQUEST_GENERATION_ERROR',
				esc_html( wp_json_encode( $data ) )
			);
		}
	}

	/**
	 * Generate notification response.
	 *
	 * @param array  $notification Notification data from IPG.
	 * @param string $redirect_url URL for browser redirection.
	 * @return array
	 * @throws NovaBankaIPGException When notification response generation fails.
	 */
	public function generate_notification_response( array $notification, string $redirect_url ): array {
		try {
			SharedUtilities::validate_required_fields( $notification, array( 'paymentid' ) );

			$response = array(
				'msgName'               => 'PaymentNotificationResponse',
				'version'               => '1',
				'paymentID'             => $notification['paymentid'],
				'browserRedirectionURL' => $redirect_url,
			);

			// Generate message verifier.
			$response['msgVerifier'] = SharedUtilities::generate_message_verifier(
				$response['msgName'],
				$response['version'],
				$response['paymentID'],
				$this->secret_key,
				$response['browserRedirectionURL']
			);

			return $response;
		} catch ( \Exception $e ) {
			$this->logger->error(
				'Failed to generate notification response',
				array(
					'error'        => $e->getMessage(),
					'notification' => $notification,
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ), 'NOTIFICATION_RESPONSE_ERROR', esc_html( $notification ) );
		}
	}

	/**
	 * Prepare PaymentInit request data.
	 *
	 * @param array $data Payment initialization data.
	 * @return array Prepared request data.
	 * @throws NovaBankaIPGException When data validation fails.
	 */
	private function prepare_payment_init_request( array $data ): array {
		$this->logger->debug(
			'Starting payment init request preparation',
			array(
				'raw_input_data' => $data,
			)
		);

		// Store raw values for message verification
		$raw_values = array(
			'msgName'  => 'PaymentInitRequest',
			'version'  => '1',
			'id'       => $data['id'],
			'password' => $data['password'],
			'amt'      => $this->data_handler->format_amount( $data['amount'] ),
			'trackid'  => (string) $data['trackid'],
			'udf1'     => $data['udf1'] ?? '',
			'udf5'     => $data['udf5'] ?? '',
		);

		$this->logger->debug(
			'Raw values prepared for verification',
			array(
				'raw_values' => $raw_values,
			)
		);

		// Prepare request
		$request = array(
			'msgName'            => $raw_values['msgName'],
			'version'            => $raw_values['version'],
			'id'                 => $raw_values['id'],
			'password'           => $raw_values['password'],
			'action'             => '1',
			'currencycode'       => $this->data_handler->get_currency_code( $data['currency'] ),
			'amt'                => $raw_values['amt'],
			'trackid'            => $raw_values['trackid'],
			'responseURL'        => $data['responseURL'],
			'errorURL'           => $data['errorURL'],
			'langid'             => $data['langid'],
			'notificationFormat' => 'json',
			'payinst'            => 'VPAS',
			'recurAction'        => '',
		);

		$this->logger->debug(
			'Base request prepared',
			array(
				'request' => $request,
			)
		);

		// Add optional fields.
		if ( ! empty( $data['email'] ) ) {
			$request['buyerEmailAddress'] = $data['email'];
		}

		// Add UDF fields.
		foreach ( array( 'udf1', 'udf2', 'udf3' ) as $udf ) {
			if ( ! empty( $data[ $udf ] ) ) {
				$request[ $udf ] = $data[ $udf ];
			}
		}

		// Generate message verifier using raw values.
		$verifier_fields = array(
			$raw_values['msgName'],
			$raw_values['version'],
			$raw_values['id'],
			$raw_values['password'],
			$raw_values['amt'],
			$raw_values['trackid'],
			$raw_values['udf1'],
			$this->secret_key,
			$raw_values['udf5'],
		);

		$request['msgVerifier'] = SharedUtilities::generate_message_verifier( ...$verifier_fields );

		$this->logger->debug(
			'Final request prepared',
			array(
				'final_request' => $request,
			)
		);

		return $request;
	}
}
</file>

<file path="includes/Utils/class-sharedutils.php">
<?php
/**
 * Utility Class for Shared Functions
 *
 * This class is responsible for housing shared utility functions used across various components.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;

class SharedUtilities {

	/**
	 * Generate message verifier.
	 *
	 * @param mixed ...$fields Fields to include in verifier.
	 * @return string
	 */
	public static function generate_message_verifier( ...$fields ): string {
		// Direct concatenation without spaces between fields.
		$message = implode( '', $fields );

		Logger::debug(
			'Message verifier generation:',
			array(
				'initial_string' => $message,
				'initial_hex'    => bin2hex( $message ),
			)
		);

		// Remove all spaces.
		$message = preg_replace( '/\s+/', '', $message );

		Logger::debug(
			'After space removal:',
			array(
				'processed_string' => $message,
				'processed_hex'    => bin2hex( $message ),
			)
		);

		// Get raw hash bytes.
		$hash_bytes = hash( 'sha256', $message, true );

		Logger::debug(
			'Hash bytes:',
			array(
				'hex' => strtoupper( bin2hex( $hash_bytes ) ),
			)
		);

		// Base64 encode.
		$verifier = base64_encode( $hash_bytes );

		Logger::debug(
			'Final verifier:',
			array(
				'verifier' => $verifier,
			)
		);

		return $verifier;
	}

	/**
	 * Validate required fields.
	 *
	 * @param array $data Data to validate.
	 * @param array $fields Required field names.
	 * @throws NovaBankaIPGException If a required field is missing.
	 */
	public static function validate_required_fields( array $data, array $fields ): void {
		foreach ( $fields as $field ) {
			if ( empty( $data[ $field ] ) ) {
				throw new NovaBankaIPGException( esc_html( "Missing required field: {$field}" ) );
			}
		}
	}

	/**
	 * Add buyer information to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data Source data.
	 */
	public static function add_buyer_information( array &$request, array $data ): void {
		$buyer_fields = array(
			'buyerFirstName'    => 50,
			'buyerLastName'     => 50,
			'buyerPhoneNumber'  => 20,
			'buyerEmailAddress' => 255,
			'buyerUserId'       => 50,
		);

		foreach ( $buyer_fields as $field => $max_length ) {
			if ( ! empty( $data[ $field ] ) ) {
				$request[ $field ] = substr( sanitize_text_field( $data[ $field ] ), 0, $max_length );
			}
		}
	}

	/**
	 * Add UDF fields to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data Source data.
	 */
	public static function add_udf_fields( array &$request, array $data ): void {
		for ( $i = 1; $i <= 5; $i++ ) {
			$field = "udf{$i}";
			if ( isset( $data[ $field ] ) ) {
				$request[ $field ] = DataHandler::format_udf( $data[ $field ] );
			}
		}
	}

	/**
	 * Parse transaction rows from response.
	 *
	 * @param array $rows Transaction rows.
	 * @return array Processed transaction data.
	 */
	public static function parse_transaction_rows( array $rows ): array {
		$transactions = array();

		foreach ( $rows as $row ) {
			$transaction = array(
				'action'         => $row['action'],
				'transaction_id' => $row['tranid'],
				'timestamp'      => $row['msgDateTime'],
				'amount'         => $row['amt'],
				'result'         => $row['result'],
				'auth_code'      => $row['auth'] ?? null,
				'card_type'      => $row['cardtype'] ?? null,
				'response_code'  => $row['responsecode'] ?? null,
				'reference'      => $row['ref'] ?? null,
			);

			// Add UDF fields if present.
			for ( $i = 1; $i <= 5; $i++ ) {
				$udf = "udf{$i}";
				if ( ! empty( $row[ $udf ] ) ) {
					$transaction['udf'][ $udf ] = $row[ $udf ];
				}
			}

			$transactions[] = $transaction;
		}

		return $transactions;
	}

	/**
	 * Get human-readable status description.
	 *
	 * @param string $status Status code from response.
	 * @return string
	 */
	public static function get_status_description( string $status ): string {
		$statuses = array(
			'INITIALIZED' => 'Payment initialized but not yet displayed to customer',
			'PRESENTED'   => 'Payment page presented but process not completed',
			'PROCESSED'   => 'Payment has been processed completely',
			'TIMEOUT'     => 'Payment expired due to timeout',
		);

		return $statuses[ $status ] ?? $status;
	}
}
</file>

<file path="includes/Utils/class-threedshandler.php">
<?php
/**
 * ThreeDSHandler Class
 *
 * This class is responsible for handling 3D Secure (3DS) authentication for NovaBanka IPG.
 * It manages the process of initiating and verifying 3D Secure authentication during payments.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

class ThreeDSHandler {

	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor for the ThreeDSHandler class.
	 *
	 * @param APIHandler $api_handler API handler instance.
	 * @param Logger     $logger Logger instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger ) {
		$this->api_handler = $api_handler;
		$this->logger      = $logger;
	}

	/**
	 * Initiate 3D Secure authentication.
	 *
	 * @param WC_Order $order The order to initiate 3D Secure for.
	 * @param array    $auth_data The authentication data to be sent to IPG.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the 3D Secure initiation fails.
	 */
	public function initiate_3ds( WC_Order $order, array $auth_data ): array {
		try {
			// Prepare the 3DS request data.
			$auth_data = $this->prepare_auth_data( $order, $auth_data );

			// Log the initiation request if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Initiating 3D Secure authentication', array( 'auth_data' => $auth_data ) );
			}

			// Send the 3DS initiation request to the IPG.
			$response = $this->api_handler->send_3ds_initiation( $auth_data );

			// Handle the response from IPG.
			if ( $response['status'] !== 'PENDING_AUTH' ) {
				throw NovaBankaIPGException::threeDSInitiationFailed( '3D Secure initiation failed.', $response );
			}

			$this->logger->info(
				'3D Secure initiation successful.',
				array(
					'order_id' => $order->get_id(),
					'response' => $response,
				)
			);
			return $response;
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'3D Secure initiation failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'3D Secure initiation failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( '3D Secure initiation failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Verify 3D Secure authentication.
	 *
	 * @param WC_Order $order The order to verify 3D Secure for.
	 * @param array    $verification_data The verification data returned from IPG.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the 3D Secure verification fails.
	 */
	public function verify_3ds( WC_Order $order, array $verification_data ): array {
		try {
			// Prepare verification data.
			$verification_data = $this->prepare_verification_data( $order, $verification_data );

			// Log verification data if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Verifying 3D Secure authentication', array( 'verification_data' => $verification_data ) );
			}

			// Send the verification request to the IPG.
			$response = $this->api_handler->verify_3ds_authentication( $verification_data );

			// Handle the response from IPG.
			if ( $response['status'] === 'AUTHENTICATED' ) {
				$this->logger->info(
					'3D Secure authentication verified successfully.',
					array(
						'order_id' => $order->get_id(),
						'response' => $response,
					)
				);
				return $response;
			} else {
				throw NovaBankaIPGException::paymentError( '3D Secure verification failed.', $response );
			}
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'3D Secure verification failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'3D Secure verification failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( '3D Secure verification failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Check if 3D Secure is required for the transaction.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return bool True if 3D Secure is required, false otherwise.
	 */
	public static function is_3ds_required( array $transaction_data ): bool {
		return isset( $transaction_data['threeDSRequired'] ) && $transaction_data['threeDSRequired'] === true;
	}

	/**
	 * Generate the URL for 3D Secure authentication.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return string The URL for 3D Secure authentication.
	 * @throws NovaBankaIPGException If 3DS URL is missing or invalid.
	 */
	public static function generate_3ds_url( array $transaction_data ): string {
		if ( empty( $transaction_data['threeDSURL'] ) ) {
			throw new NovaBankaIPGException( '3D Secure URL is missing from the transaction data.' );
		}
		return $transaction_data['threeDSURL'];
	}

	/**
	 * Handle the response from the 3D Secure process.
	 *
	 * @param array $response_data The response data from the 3D Secure authentication process.
	 * @return bool True if the 3DS authentication was successful, false otherwise.
	 * @throws NovaBankaIPGException If the response data is invalid or indicates a failure.
	 */
	public static function handle_3ds_response( array $response_data ): bool {
		if ( empty( $response_data['status'] ) || $response_data['status'] !== 'AUTHENTICATED' ) {
			throw new NovaBankaIPGException( '3D Secure authentication failed or returned an invalid status.' );
		}
		return true;
	}

	/**
	 * Verify the authentication response signature for added security.
	 *
	 * @param array  $response_data The response data from the 3DS.
	 * @param string $signature The expected signature for validation.
	 * @return bool True if the signature is valid, false otherwise.
	 */
	public static function verify_3ds_signature( array $response_data, string $signature ): bool {
		$calculated_signature = hash( 'sha256', json_encode( $response_data ) . Config::get_setting( 'secret_key' ) );
		return hash_equals( $calculated_signature, $signature );
	}

	/**
	 * Prepare authentication data for 3D Secure initiation.
	 *
	 * @param WC_Order $order The order to prepare authentication data for.
	 * @param array    $auth_data The initial authentication data.
	 * @return array The prepared authentication data.
	 */
	private function prepare_auth_data( WC_Order $order, array $auth_data ): array {
		$auth_data['order_id'] = $order->get_id();
		$auth_data['amount']   = $order->get_total();
		$auth_data['currency'] = $order->get_currency();
		return $auth_data;
	}

	/**
	 * Prepare verification data for 3D Secure verification.
	 *
	 * @param WC_Order $order The order to prepare verification data for.
	 * @param array    $verification_data The initial verification data.
	 * @return array The prepared verification data.
	 */
	private function prepare_verification_data( WC_Order $order, array $verification_data ): array {
		$verification_data['order_id'] = $order->get_id();
		return $verification_data;
	}

	/**
	 * Prepare 3DS data for PaymentInit request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prepared 3DS data.
	 */
	public function prepare_3ds_data( array $order_data ): array {
		$threeds_data = array(
			'payinst'                                 => 'VPAS',
			'acctInfo'                                => $this->prepare_account_info( $order_data ),
			'threeDSRequestorAuthenticationInfo'      => $this->prepare_authentication_info( $order_data ),
			'threeDSRequestorPriorAuthenticationInfo' => $this->prepare_prior_auth_info( $order_data ),
		);

		$this->logger->debug( 'Prepared 3DS data', array( 'data' => $threeds_data ) );
		return $threeds_data;
	}

	/**
	 * Prepare account information for 3DS.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Account information.
	 */
	private function prepare_account_info( array $order_data ): array {
		$user_id      = $order_data['user_id'] ?? 0;
		$account_data = array();

		if ( $user_id ) {
			$user                    = get_userdata( $user_id );
			$registration_date       = $user->user_registered;
			$days_since_registration = ( time() - strtotime( $registration_date ) ) / DAY_IN_SECONDS;

			$account_data['chAccAgeInd'] = $days_since_registration > 365 ? '05' : '02';
			$account_data['chAccDate']   = date( 'Ymd', strtotime( $registration_date ) );
		}

		return $account_data;
	}

	/**
	 * Prepare authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Authentication information.
	 */
	private function prepare_authentication_info( array $order_data ): array {
		$auth_info = array(
			'threeDSReqAuthMethod' => '02', // Example: 02 means two-factor authentication.
		);
		return $auth_info;
	}

	/**
	 * Prepare prior authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prior authentication information.
	 */
	private function prepare_prior_auth_info( array $order_data ): array {
		$prior_auth_info = array(
			'threeDSReqPriorAuthData'   => 'ABC123', // Example data, this would come from prior transactions.
			'threeDSReqPriorAuthMethod' => '01',  // 01 indicates Frictionless flow.
		);
		return $prior_auth_info;
	}
}
</file>

<file path=".cursorignore">
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
</file>

<file path=".cursorrules">
After each response, ask the user wheter they'd like to co know more about the code provided, implement a new feature, or inquire about anything relevant to your response. Always update journal.json with details on our activities, approach, technology stack, current progress, remaining features, unresolved bugs, potential future features, and any other details a developer might need to remember or know and then use that journal.json as a reference for understanding our codebase.
</file>

<file path=".gitignore">
repopack-output-main-branch.xml
</file>

<file path="Asoft IPG 3DS eCommerce Transaction flow.md">
# 3DS E-commerce Transactions ​

## Introduction

This section describes the stages of an e-commerce transaction using the IPG platform and HPP web interface, focusing on the actions carried out by each party involved. ​

### The Buyer Perspective ​

1. Chooses products.  
2. Enters personal details for shipment and clicks "Buy". ​  
3. Is redirected to the HPP.  
4. Enters credit card data and clicks "Pay".  
5. If the card is 3-D Secure enabled, the Buyer is redirected to their bank's website to enter the password and then returns to the HPP. ​  
6. Is redirected to a specific page on the Merchant website displaying the payment result. ​  
7. Receives an email notification of payment if enabled by the Merchant. ​

### The Merchant Perspective ​

1. Receives a purchase order from the Buyer. ​  
2. Sends a PaymentInit message to IPG. ​  
3. Receives a unique PaymentID and the URL of the HPP. ​  
4. Redirects the Buyer to the HPP URL with the PaymentID. ​  
5. Receives a transaction notification from IPG. ​  
6. Responds with the URL for the Buyer to be redirected to for the transaction result. ​  
7. Presents the result to the Buyer. ​  
8. Receives an email notification of payment if enabled. ​

### The IPG Perspective ​

1. Receives a PaymentInit message from the Merchant. ​  
2. Responds with the HPP URL and a PaymentID. ​  
3. Presents the HPP to the Buyer. ​  
4. Receives the Buyer's credit card data. ​  
5. If the card is 3-D Secure enabled, redirects the Buyer to the bank's site for authentication and awaits the result. ​  
6. Processes the transaction by sending the request to the credit card company and gets a response. ​  
7. Sends a result notification message to the Merchant. ​  
8. Receives the URL for Buyer redirection. ​  
9. Redirects the Buyer to the specified URL. ​  
10. Sends an email notification of payment to the Buyer and/or Merchant if enabled. ​

### Diagram of Information Flow ​

The following pattern of actions/communications occurs during a transaction:

1. Buyer completes the shopping cart. ​  
2. Merchant prepares and returns the checkout page. ​  
3. Buyer fills out required fields and clicks "Buy".  
4. Merchant sends PaymentInit request to IPG. ​  
5. IPG verifies the request, saves transaction data, and returns the HPP URL and PaymentID. ​  
6. Merchant saves the PaymentID and redirects the browser to the HPP URL with the PaymentID. ​  
7. IPG checks the PaymentID, prepares the payment page, and returns it to the Buyer's browser. ​  
8. Buyer enters necessary data and clicks "Pay".  
9. If 3-D Secure, IPG redirects the browser to the bank's site for authentication. ​  
10. Buyer provides authentication data and is redirected back to IPG.  
11. IPG combines data and sends the request to the authorization system. ​  
12. Authorization system processes the request and returns the result to IPG. ​  
13. IPG sends a POST message to the Merchant with the transaction result. ​  
14. Merchant updates the transaction status and returns the URL for Buyer redirection. ​  
15. IPG redirects the browser to the specified URL and displays the final page with payment details. ​  
16. Buyer reviews the Merchant result page. ​

### Description of the Steps ​

The table below presents the full flow of activities in a payment transaction:

| Buyer | Merchant | Website IPG | Authorization Centre |
| ----- | ----- | ----- | ----- |
| 1\. Completes Shopping Cart. ​ | 2\. Prepares and returns the Check Out page. ​ |  |  |
| 3\. Fills out the required fields and clicks the "Buy” button. ​ | 4\. Prepares the HTTP PaymentInit request with all transaction data and sends it via POST to IPG. ​ | 5\. After verifying the validity of the request received, IPG saves the transaction data, associates a PaymentID to it and returns to the Merchant the URL where the Cardholder browser must be redirected and the PaymentID to use in redirection. ​ |  |
|  | 6\. Saves the PaymentID among other transaction data, then redirects the browser to the URL of the HPP specifying the PaymentID as the GET parameter. ​ | 7\. After checking the PaymentID received, IPG prepares the payment page and returns it to the buyer‘s browser. ​ |  |
| 8\. Enters the necessary data, and clicks the "Pay" button. Note: If the Buyer clicks the "Cancel" button, the transaction is not processed, and the flow proceeds to step 13\. ​ |  | 9\. (if the card is enabled for 3-D Secure) Redirects the browser to an external site to authenticate the Cardholder. ​ |  |
| 10\. (if the card is enabled for 3-D Secure) Provides their authentication data to the external site (the site of the bank that issued the credit card) and, at the end, is redirected to IPG. ​ |  | 11\. Receives data, combines it with data from the Merchant and the transaction and sends the request to the Authorisation System. ​ | 12\. Receives and processes the request and returns the result to IPG. ​ |
|  |  | 13\. Sends a POST message to the Merchant communicating the result of the transaction. ​ |  |
|  | 14\. Receives the message and updates the transaction status with the result received. ​ It then returns the URL where the buyer browser is to be redirected to for the presentation of the response page. ​ |  |  |
|  |  | 15\. Redirects the buyer browser to the URL specified by the merchant in previous step and displays the final page, with details of the payment result. ​ |  |
| 16\. Receives and reviews Merchant result page. ​ |  |  |  |

## Merchant Integration

### Introduction

IPG includes direct communications with the Merchant server to complete transactions. ​ This can be implemented via:

* A special plug-in. ​  
* Creating a custom communication interface. ​

### Messages Between the Merchant Site and IPG ​

Server-to-server messages are divided into:

* Online messages: Occur during the transaction and are mandatory.  
* Offline messages: Occur after the transaction and are optional. ​

### Online Messages

* PaymentInit Request: Sent by the Merchant to IPG to initialize the transaction. ​  
* PaymentInit Response: Sent by IPG to the Merchant containing the HPP URL and PaymentID. ​  
* Notification: Sent by IPG to the Merchant with transaction results. ​  
* Notification Response: Sent by the Merchant to IPG with the final redirection URL. ​

### Offline Messages

* Payment Request: Used for various accounting transactions post-payment. ​  
* PaymentQuery: Allows the Merchant to check the status and details of a transaction in real-time. ​

### Message Verifier

All messages are signed using a Message Verifier (msgVerifier) generated by:

1. Concatenating specified message data. ​  
2. Removing spaces.  
3. Hashing the string using SHA256. ​  
4. Base64 encoding the hash bytes. ​

Example for PaymentInit request:

* Concatenate: msgName \+ version \+ id \+ password \+ amt \+ trackid \+ udf1 \+ SECRET KEY \+ udf5 ​  
* Remove spaces.  
* Hash using SHA256. ​  
* Base64
</file>

<file path="class-novabankaipg.php">
<?php
/**
 * Novabanka IPG33 Payment Gateway Integration
 *
 * @package    NovaBankaIPG
 * @author     Milovan Tatić
 * @copyright  Milovan Tatić
 * @license    Free for private use. Commercial use is not allowed without permission.
 *
 * @wordpress-plugin
 * Plugin Name: Novabanka IPG33 Payment Gateway
 * Description: 3D Secure payment gateway integration for WooCommerce
 * Version:     1.0.0
 * Author:      Milovan Tatić
 * Text Domain: novabankaipg
 * Domain Path: /languages
 * Requires PHP: 7.4
 * WC requires at least: 5.0
 * WC tested up to: 8.0
 */

namespace NovaBankaIPG;

use NovaBankaIPG\Core\NovaBankaIPGGateway;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\ThreeDSHandler;

defined( 'ABSPATH' ) || exit;

// Define plugin directory using WordPress constants.
define( 'NOVABANKAIPG_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
define( 'NOVABANKAIPG_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
define( 'NOVABANKAIPG_VERSION', '1.0.0' );

// Include necessary interfaces and classes.
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Exceptions/class-novabankaipgexception.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-logger.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-api-handler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-data-handler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-logger.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-datahandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-apihandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-threedshandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-messagehandler.php';

/**
 * Main plugin class for NovaBanka IPG33 Payment Gateway
 *
 * Handles plugin initialization, component loading, and WooCommerce integration.
 *
 * @package NovaBankaIPG
 * @since 1.0.0
 * @var self|null $instance Singleton instance of the plugin
 * @var Core\NovaBankaIPGGateway $gateway Payment gateway instance
 * @var Utils\APIHandler $api_handler API handler instance
 * @var Utils\Logger $logger Logger instance
 * @var Utils\DataHandler $data_handler Data handler instance
 * @var Utils\ThreeDSHandler $threeds_handler ThreeDS handler instance
 */
class NovaBankaIPG {
	/**
	 * Singleton instance of the plugin
	 *
	 * @var self|null
	 */
	private static $instance = null;

	/**
	 * Payment gateway instance
	 *
	 * @var Core\NovaBankaIPGGateway
	 */
	private $gateway;

	/**
	 * API handler instance
	 *
	 * @var Utils\APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance
	 *
	 * @var Utils\Logger
	 */
	private $logger;

	/**
	 * Data handler instance
	 *
	 * @var Utils\DataHandler
	 */
	private $data_handler;

	/**
	 * ThreeDS handler instance
	 *
	 * @var Utils\ThreeDSHandler
	 */
	private $threeds_handler;

	/**
	 * Get the singleton instance of the plugin.
	 *
	 * @return self The singleton instance.
	 */
	public static function instance() {
		if ( null === self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Constructor for the NovaBankaIPG class.
	 *
	 * Initializes hooks for the plugin.
	 */
	private function __construct() {
		$this->init_hooks();
	}

	/**
	 * Initialize hooks for the plugin.
	 */
	private function init_hooks() {
		add_action( 'plugins_loaded', array( $this, 'check_woocommerce_active' ) );
		add_action( 'plugins_loaded', array( $this, 'init_plugin' ) );
		add_filter( 'woocommerce_payment_gateways', array( $this, 'add_gateway' ) );
		add_action( 'wp_enqueue_scripts', array( $this, 'enqueue_scripts' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );
		add_action( 'woocommerce_api_novabankaipg', array( $this, 'handle_wc_api' ) );
	}

	/**
	 * Check if WooCommerce is active.
	 */
	public function check_woocommerce_active() {
		if ( ! class_exists( 'WooCommerce' ) ) {
			add_action( 'admin_notices', array( $this, 'woocommerce_missing_notice' ) );
		}
	}

	/**
	 * Initialize the plugin.
	 */
	public function init_plugin() {
		// Load text domain.
		load_plugin_textdomain( 'novabankaipg', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );

		// Register the gateway class.
		require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Core/class-novabankaipggateway.php';

			// Initialize components.
			$this->init_components();
	}

	/**
	 * Initialize components.
	 */
	private function init_components() {
		// Initialize Logger first.
		$this->logger = new Logger( 'novabankaipg' );

		// Initialize Data Handler.
		$this->data_handler = new DataHandler();

		// Get gateway settings.
		$settings = $this->get_gateway_settings();

		// Initialize API Handler with settings.
		$this->api_handler = new APIHandler(
			$settings['api_endpoint'],
			$settings['terminal_id'],
			$settings['terminal_password'],
			$settings['secret_key'],
			$this->logger,
			$this->data_handler,
			$settings['test_mode'] ?? 'yes' // Add test_mode parameter with default 'yes'.
		);

		// Initialize 3DS Handler.
		$this->threeds_handler = new ThreeDSHandler(
			$this->api_handler,
			$this->logger,
			$this->data_handler
		);

		// Initialize Gateway last as it depends on other components.
		$this->gateway = new NovaBankaIPGGateway(
			$this->api_handler,
			$this->threeds_handler,
			$this->data_handler,
			$this->logger
		);
	}

	/**
	 * Add the gateway to the WooCommerce payment gateways.
	 *
	 * @param array $gateways Existing gateways.
	 * @return array Modified gateways.
	 */
	public function add_gateway( array $gateways ): array {
		$gateways[] = Core\NovaBankaIPGGateway::class;
		return $gateways;
	}

	/**
	 * Enqueue scripts for the frontend.
	 */
	public function enqueue_scripts() {
		if ( is_checkout() ) {
			wp_enqueue_style(
				'novabankaipg-styles',
				NOVABANKAIPG_PLUGIN_URL . 'assets/css/ipg-styles.css',
				array(),
				NOVABANKAIPG_VERSION
			);

			wp_enqueue_script(
				'novabankaipg-scripts',
				NOVABANKAIPG_PLUGIN_URL . 'assets/js/ipg-scripts.js',
				array( 'jquery' ),
				NOVABANKAIPG_VERSION,
				true
			);
		}
	}

	/**
	 * Enqueue admin scripts.
	 *
	 * @param string $hook The current admin page hook.
	 */
	public function enqueue_admin_scripts( $hook ) {
		if ( 'woocommerce_page_wc-settings' !== $hook ) {
			return;
		}

		wp_enqueue_style(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . 'assets/css/ipg-admin.css',
			array(),
			NOVABANKAIPG_VERSION
		);

		wp_enqueue_script(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . 'assets/js/ipg-admin.js',
			array( 'jquery' ),
			NOVABANKAIPG_VERSION,
			true
		);
	}

	/**
	 * Display a notice if WooCommerce is missing.
	 */
	public function woocommerce_missing_notice() {
		echo '<div class="error"><p>' .
			esc_html__( 'NovaBanka IPG requires WooCommerce to be installed and active.', 'novabanka-ipg-gateway' ) .
			'</p></div>';
	}

	/**
	 * Initialize plugin.
	 *
	 * @return self The singleton instance.
	 */
	public static function init() {
		return self::instance();
	}

	/**
	 * Get gateway settings.
	 *
	 * @return array
	 */
	private function get_gateway_settings(): array {
		$settings = get_option( 'woocommerce_novabankaipg_settings', array() );

		return array(
			'api_endpoint'      => $settings['api_endpoint'] ?? '',
			'terminal_id'       => $settings['terminal_id'] ?? '',
			'terminal_password' => $settings['terminal_password'] ?? '',
			'secret_key'        => $settings['secret_key'] ?? '',
			'test_mode'         => $settings['test_mode'] ?? 'yes',
		);
	}
}

// Initialize plugin.
NovaBankaIPG::init();
</file>

<file path="developer-documentation.md">
```markdown
# NovaBanka IPG Gateway Documentation

## Overview
The NovaBanka IPG Gateway plugin provides 3D Secure payment integration for WooCommerce. This documentation covers installation, configuration, and implementation details for developers.

## Table of Contents
1. [Installation](#installation)
2. [Configuration](#configuration)
3. [Integration Flow](#integration-flow)
4. [Testing](#testing)
5. [Common Issues](#common-issues)
6. [API Reference](#api-reference)

## Installation

### Requirements
- WordPress 5.8+
- WooCommerce 5.0+
- PHP 7.4+
- SSL Certificate (required for production)

### Setup Steps
1. Upload plugin to `/wp-content/plugins/`
2. Activate through WordPress admin
3. Configure through WooCommerce → Settings → Payments

```php
// Example plugin activation check
add_action('plugins_loaded', function() {
    if (!class_exists('WooCommerce')) {
        add_action('admin_notices', function() {
            echo '<div class="error"><p>NovaBanka IPG requires WooCommerce to be installed and active.</p></div>';
        });
        return;
    }
    // Initialize gateway
});
```

## Configuration

### Gateway Settings
```php
// Example configuration
$settings = [
    'enabled' => 'yes',
    'title' => 'Credit Card (3D Secure)',
    'description' => 'Pay securely using your credit card',
    'testmode' => 'yes',  // For testing
    'terminal_id' => 'YOUR_TERMINAL_ID',
    'terminal_password' => 'YOUR_TERMINAL_PASSWORD',
    'secret_key' => 'YOUR_SECRET_KEY'
];
```

### Environment URLs
- Test: `https://test-gateway.example.com/api`
- Production: `https://gateway.example.com/api`

## Integration Flow

### 1. Payment Initialization
```php
// Example payment initialization
try {
    $payment_data = [
        'amount' => $order->get_total(),
        'currency' => $order->get_currency(),
        'trackid' => $order->get_id(),
        'responseURL' => $notification_url,
        'errorURL' => $error_url
    ];
    
    $response = $api_handler->sendPaymentInit($payment_data);
    
    // Store payment ID
    update_post_meta($order_id, '_novabankaipg_payment_id', $response['paymentid']);
    
    // Redirect to HPP
    return [
        'result' => 'success',
        'redirect' => $response['browserRedirectionURL']
    ];
} catch (NovaBankaIPGException $e) {
    // Handle error
}
```

### 2. Notification Handling
```php
// Example notification handler
public function handle_notification() {
    try {
        $notification = json_decode(file_get_contents('php://input'), true);
        
        if ($this->api_handler->verifyNotification($notification)) {
            $order = wc_get_order($notification['trackid']);
            
            if ($notification['result'] === 'CAPTURED') {
                $order->payment_complete($notification['tranid']);
            } else {
                $order->update_status('failed');
            }
            
            echo json_encode([
                'msgName' => 'PaymentNotificationResponse',
                'paymentID' => $notification['paymentid'],
                'browserRedirectionURL' => $this->get_return_url($order)
            ]);
            exit;
        }
    } catch (Exception $e) {
        // Handle error
    }
}
```

## Testing

### Test Cards
```
Success Card: 4012001037141112
Failure Card: 4539990000000020
```

### Test Cases
1. Successful Payment
```php
// Test successful payment
$test_data = [
    'card_number' => '4012001037141112',
    'expiry' => '12/25',
    'cvv' => '123'
];
```

2. Failed Payment
```php
// Test failed payment
$test_data = [
    'card_number' => '4539990000000020',
    'expiry' => '12/25',
    'cvv' => '123'
];
```

3. Cancelled Payment
```php
// Test cancel scenario
// User clicks cancel on HPP
// Check notification handling
```

### Response Codes
```php
const RESPONSE_CODES = [
    '00' => 'Approved',
    '51' => 'Insufficient funds',
    '05' => 'Do not honor'
];
```

## Common Issues

### Message Verifier Mismatch
```php
// Correct message verifier generation
$message = implode('', [
    $request['msgName'],
    $request['version'],
    $request['id'],
    $request['password'],
    $request['amt'],
    $request['trackid']
]);
$message = preg_replace('/\s+/', '', $message);
return base64_encode(hash('sha256', $message, true));
```

### Order Status Updates
```php
// Proper order status handling
public function update_order_status($order, $notification) {
    if ($notification['result'] === 'CAPTURED') {
        $order->payment_complete($notification['tranid']);
        $order->add_order_note('Payment completed via 3DS');
    } else {
        $order->update_status('failed', 'Payment failed: ' . $notification['result']);
    }
}
```

## API Reference

### APIHandler Interface
```php
interface APIHandler {
    public function sendPaymentInit(array $data): array;
    public function verifyNotification(array $notification): bool;
    public function generateNotificationResponse(string $payment_id, string $redirect_url): array;
}
```

### DataHandler Interface
```php
interface DataHandler {
    public function formatAmount($amount): string;
    public function getCurrencyCode(string $currency): string;
    public function validateRequiredFields(array $data, array $required): bool;
}
```

### Logger Interface
```php
interface Logger {
    public function debug(string $message, array $context = []): void;
    public function error(string $message, array $context = []): void;
    public function info(string $message, array $context = []): void;
}
```

### Hooks Reference

#### Actions
```php
// Before payment initialization
do_action('novabankaipg_before_payment_init', $order);

// After successful payment
do_action('novabankaipg_payment_complete', $order, $notification);

// After failed payment
do_action('novabankaipg_payment_failed', $order, $notification);
```

#### Filters
```php
// Modify payment data before sending
add_filter('novabankaipg_payment_data', function($data, $order) {
    // Modify data
    return $data;
}, 10, 2);

// Customize return URL
add_filter('novabankaipg_return_url', function($url, $order) {
    // Modify URL
    return $url;
}, 10, 2);
```

### Error Handling
```php
try {
    // Payment processing
} catch (NovaBankaIPGException $e) {
    // Handle specific gateway errors
    $error_type = $e->getErrorType();
    $error_data = $e->getErrorData();
    
    // Log error
    $logger->error($e->getMessage(), [
        'error_type' => $error_type,
        'error_data' => $error_data
    ]);
    
    // Display user-friendly message
    wc_add_notice('Payment error: ' . $e->getMessage(), 'error');
}
```

### Customization Examples

#### Custom Payment Fields
```php
add_filter('novabankaipg_payment_fields', function($fields) {
    $fields['custom_field'] = [
        'label' => 'Custom Field',
        'required' => true
    ];
    return $fields;
});
```

#### Custom Order Processing
```php
add_action('novabankaipg_before_process_payment', function($order) {
    // Add custom processing
    $order->update_meta_data('_custom_data', 'value');
});
```

For additional support or queries, please refer to the [support documentation](https://claude.site/artifacts/1ad4aa8f-4462-48b0-a5e8-68cb0fc3d126)

```
</file>

<file path="developer-redirect-payment.md">
# Redirect Payment Implementation Guide

## Overview
The NovaBanka IPG Gateway implements a redirect-based payment flow where customers are directed to the bank's hosted payment page (HPP) for secure card data entry. This approach eliminates the need for direct card data handling within WordPress.

## Implementation Details

### 1. Gateway Configuration
The gateway extends WC_Payment_Gateway and implements a simplified payment form:

php
class NovaBankaIPGGateway extends WC_Payment_Gateway {
public function payment_fields() {
if ($this->description) {
echo wpautop(wptexturize($this->description));
}
echo '<button type="submit" class="button alt" id="novabankaipg-pay-button">' .
esc_html('Proceed to Payment', 'novabanka-ipg-gateway') .
'</button>';
}
}


## 2. Payment Flow
1. Customer clicks "Proceed to Payment" button
2. System initializes payment (see payment_data structure below)
3. Customer is redirected to bank's HPP
4. Bank handles 3DS authentication
5. Customer is returned to site with payment result

### 3. Payment Data Structure
Reference to implementation:

php:includes/Core/class-novabankaipggateway.php
startLine: 281
endLine: 292


### 4. Response Handling
The gateway asynchronously handles payment notifications:

php:includes/Core/class-novabankaipggateway.php
startLine: 398
endLine: 403

## Configuration Requirements

### 1. Gateway Settings
Required configuration in WooCommerce:
- Terminal ID
- Terminal Password
- Secret Key
- Response/Error URLs

### 2. SSL Requirements
- Valid SSL certificate
- Proper webhook configuration
- Secure response handling

## Testing Scenarios

### 1. Successful Payment

php
// Test successful payment flow
$test_data = [
'order_id' => 123,
'amount' => 100.00,
'currency' => 'USD'
];

### 2. Failed Payment
Reference test cards from documentation:
php:developer-documentation.md
startLine: 140
endLine: 145

### 3. Cancelled Payment
Test user cancellation on HPP as documented:
php:developer-documentation.md
startLine: 148
endLine: 153

## Error Handling
Reference error handling implementation:
php:developer-documentation.md
startLine: 254
endLine: 269

## Customization
The redirect flow can be customized using filters:
php:developer-documentation.md
startLine: 239
endLine: 250

## Security Considerations
1. Always verify payment notifications using message verification
2. Store payment IDs securely
3. Implement proper nonce checks
4. Log all payment events for audit

For message verification implementation, see:
php:developer-documentation.md
startLine: 168
endLine: 179

## Order Status Management
Reference order status handling:
php:developer-documentation.md
startLine: 183
endLine: 191

```
</file>

<file path="developer-strategy.md">
```markdown
# NovaBanka IPG Integration - Strategic Implementation Guide

## 1. Architecture Foundation 🏗️

### Core Philosophy
- Single Responsibility Principle
- Dependency Injection
- Interface-Driven Development
- Immutable Data Structures
- Event-Driven Communication

### Directory Structure
```plaintext
ipg-gateway-v3/
├── src/
│   ├── API/           # API communication
│   ├── Core/          # Business logic
│   ├── Events/        # Event handlers
│   ├── Exceptions/    # Custom exceptions
│   └── Services/      # Service layer
├── interfaces/        # Contracts
├── assets/           # Frontend resources
└── tests/            # Test suites
```

## 2. Integration Flow 🔄

### Payment Lifecycle
```
Init → Validate → Process → Verify → Complete
```

### Key Components
1. Gateway Handler
   - Payment initialization
   - State management
   - Response processing

2. API Communication
   - Message building
   - Signature verification
   - Response handling

3. 3DS Flow
   - Authentication
   - Verification
   - Redirect handling

## 3. Critical Paths 🎯

### Payment Flow
```php
PaymentRequest → APIHandler → 3DSHandler → Notification → OrderUpdate
```

### Data Flow
```php
Validation → Formatting → Encryption → Transmission → Verification
```

### Error Flow
```php
Detection → Logging → Recovery → Notification → Resolution
```

## 4. Strategic Patterns 🎨

### 1. Request Building
```php
interface RequestBuilder {
    public function prepare(): array;
    public function validate(): bool;
    public function sign(): string;
}
```

### 2. Response Handling
```php
interface ResponseProcessor {
    public function verify(): bool;
    public function process(): array;
    public function handle(): void;
}
```

### 3. State Management
```php
interface StateManager {
    public function transition(string $state): void;
    public function validate(string $transition): bool;
    public function getState(): string;
}
```

## 5. Implementation Strategy 📋

### Phase 1: Foundation
- [ ] Core interfaces
- [ ] Base classes
- [ ] Service containers
- [ ] Event system

### Phase 2: Integration
- [ ] API handlers
- [ ] 3DS implementation
- [ ] Payment processing
- [ ] Notification handling

### Phase 3: Enhancement
- [ ] Error handling
- [ ] Logging system
- [ ] Admin interface
- [ ] Testing suite

## 6. Best Practices Guide 📚

### Code Standards
1. PSR-12 compliance
2. Type declarations
3. Return type hints
4. Null safety

### Security Measures
1. Input validation
2. Output sanitization
3. Signature verification
4. SSL enforcement

### Error Handling
1. Custom exceptions
2. Error logging
3. User feedback
4. Recovery procedures

## 7. Development Workflow 🔧

### 1. Setup
```bash
composer require novabankaipg/gateway
npm install
```

### 2. Configuration
```php
define('IPG_ENV', 'development');
define('IPG_DEBUG', true);
```

### 3. Implementation
```php
// Service registration
add_action('plugins_loaded', function() {
    $container = new ServiceContainer();
    $container->register(APIHandler::class);
    $container->register(PaymentProcessor::class);
});
```

## 8. Testing Strategy 🧪

### Unit Tests
- Service tests
- Data validation
- State transitions

### Integration Tests
- API communication
- Payment flow
- Error handling

### End-to-End Tests
- Complete payment cycle
- Error scenarios
- Edge cases

## 9. Monitoring & Logging 📊

### Key Metrics
1. Transaction success rate
2. API response times
3. Error frequency
4. State transitions

### Log Levels
```php
debug();   // Development info
info();    // Status updates
warning(); // Potential issues
error();   // Critical failures
```

## 10. Performance Optimization 🚀

### Caching Strategy
1. API responses
2. Configuration
3. Session data

### Request Optimization
1. Batch processing
2. Async operations
3. Response compression

## 11. Security Checklist ✅

- [ ] Input validation
- [ ] XSS prevention
- [ ] CSRF protection
- [ ] SQL injection prevention
- [ ] Signature verification
- [ ] SSL/TLS enforcement
- [ ] Data encryption
- [ ] Session security

## 12. Deployment Strategy 🚢

### Pre-deployment
1. Code review
2. Testing completion
3. Documentation update
4. Version control

### Deployment
1. Backup
2. Version update
3. Database migrations
4. Cache clear

### Post-deployment
1. Monitoring
2. Error tracking
3. Performance analysis
4. User feedback

## Quick Reference 📌

### Key Methods
```php
initializePayment(OrderData $data): PaymentResponse
processNotification(NotificationData $data): void
validateSignature(string $signature, array $data): bool
handleError(IPGException $exception): void
```

### Common Patterns
```php
// Service resolution
$service = $container->get(ServiceInterface::class);

// Event dispatch
$dispatcher->dispatch(new PaymentEvent($data));

// Error handling
try {
    $processor->handle($payment);
} catch (IPGException $e) {
    $logger->error($e->getMessage(), $e->getContext());
}
```

### State Flow
```
Initialized → Processing → Authenticated → Completed
      ↓            ↓             ↓            ↓
   Failed      Cancelled      Rejected     Refunded
```

Follow this strategic guide for a robust, maintainable, and secure implementation of the NovaBanka IPG gateway.
```
</file>

<file path="developer-woo-ipg-logic.md">
# NovaBanka IPG Integration Logic

This document outlines the core logic and workflow for integrating the NovaBanka Internet Payment Gateway (IPG) with WooCommerce considering the Asoft IPG 3DS eCommerce Transaction flow and the AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt documentation.

Woocommerce=Merchant
IPG=IPG
Woocommerce Payment plugin / extends WP and WOO functionality

### The Buyer Perspective ​

1. Chooses products.  
2. Enters personal details for shipment and clicks "Buy". ​  
3. Is redirected to the HPP.  
4. Enters credit card data and clicks "Pay".  
5. If the card is 3-D Secure enabled, the Buyer is redirected to their bank's website to enter the password and then returns to the HPP. ​  
6. Is redirected to a specific page on the Merchant website displaying the payment result. ​  
7. Receives an email notification of payment if enabled by the Merchant. ​

### The Merchant Perspective ​

1. Receives a purchase order from the Buyer. ​  
2. Sends a PaymentInit message to IPG. ​  
3. Receives a unique PaymentID and the URL of the HPP. ​  
4. Redirects the Buyer to the HPP URL with the PaymentID. ​  
5. Receives a transaction notification from IPG. ​  
6. Responds with the URL for the Buyer to be redirected to for the transaction result. ​  
7. Presents the result to the Buyer. ​  
8. Receives an email notification of payment if enabled. 

### The IPG Perspective ​

1. Receives a PaymentInit message from the Merchant. ​  
2. Responds with the HPP URL and a PaymentID. ​  
3. Presents the HPP to the Buyer. ​  
4. Receives the Buyer's credit card data. ​  
5. If the card is 3-D Secure enabled, redirects the Buyer to the bank's site for authentication and awaits the result. ​  
6. Processes the transaction by sending the request to the credit card company and gets a response. ​  
7. Sends a result notification message to the Merchant. ​  
8. Receives the URL for Buyer redirection. ​  
9. Redirects the Buyer to the specified URL.


Woo Checkout -> Pay Now -> IPG <-> Woo <-> IPG -> Woo Succesful payment / Unsuccesful payment ?

Communication flow:

1. Buyer chooses Woocommerce Virtual Product with SKU 
2. Merchant prepares and returns the checkout page. 
3. Buyer fills out required fields (email and Phone No) and clicks "Pay NOW".  
4. Merchant sends PaymentInit request to IPG. ​  
5. IPG verifies the request, saves transaction data, and returns the HPP URL and PaymentID. ​  
6. Merchant saves the PaymentID and redirects the browser to the HPP URL with the PaymentID. ​  
7. IPG checks the PaymentID, prepares the payment page, and returns it to the Buyer's browser. ​  
8. Buyer enters necessary data and clicks "Pay".  
9. If 3-D Secure, IPG redirects the browser to the bank's site for authentication. ​  
10. Buyer provides authentication data and is redirected back to IPG.  
11. IPG combines data and sends the request to the authorization system. ​  
12. Authorization system processes the request and returns the result to IPG. ​  
13. IPG sends a POST message to the Merchant with the transaction result. ​  
14. Merchant updates the transaction status and returns the URL for Buyer redirection. ​  
15. IPG redirects the browser to the specified URL and displays the final page with payment details. ​  
16. Buyer gets the Merchant result page - Succesful payment / Unsuccesful payment
17. Merchant stores the order data, with IPG responses in Woocommerce and change status.

Wocoomerce Order Management statuses (should be named by woo standards, utilizing standard woo functionality):
1. Init Order
2. Partial Order (not succesful due cancelation of HPP flow for any reason / stored init data + reason)
3. Complete Order (Succesful transaction + stored IPG messages)
4. Uncomplete Order (Unsuccesful transaction + stored IPG messages)


## Role Mapping

WooCommerce (Our Plugin) = Merchant Implementation
IPG = Payment Gateway Service
Plugin Components = Integration Layer

## Flow Comparison

Your Flow:                     | Documentation Flow:
-----------------------------|-----------------------------
Woo Checkout -> Pay Now      | Merchant Order Form
Plugin Handles Init          | Merchant Backend
IPG HPP                      | IPG HPP
Bank Auth                   | Bank Auth
IPG Response                | IPG Response
Plugin Handles Response     | Merchant Backend
Woo Order Status Update     | Merchant Order Update

Current Implementation:
WooCommerce Checkout -> Gateway Class -> APIHandler -> IPG

Documentation Flow:
Merchant Site -> PaymentInit -> HPP -> 3DS -> Bank -> Response

## Key Differences

We are integrating with WooCommerce's existing order system
Documentation assumes standalone merchant implementation
Our flow adds WooCommerce-specific states and hooks

## Key Integration Points

a) Order Creation (WooCommerce)
b) Payment Initialization (Our Gateway)
c) HPP Redirection (IPG)
d) 3DS Processing (Bank/IPG)
e) Response Handling (Our Gateway)
f) Order Status Updates (WooCommerce)

## Order Flow Integration

// WooCommerce States Mapping
'pending'    => 'Init Order',
'on-hold'    => 'Partial Order',
'completed'  => 'Complete Order',
'failed'     => 'Uncomplete Order'

## Communication Points

WooCommerce Checkout
↓
Plugin (PaymentInit)
↓
IPG (HPP + 3DS)
↓
Bank
↓
IPG (Process)
↓
Plugin (Notification)
↓
WooCommerce Order Update

## Data Storage Strategy

// Store in WooCommerce order meta
$order->update_meta_data('_novabankaipg_payment_id', $response['paymentid']);
$order->update_meta_data('_novabankaipg_transaction_data', $response);
$order->update_meta_data('_novabankaipg_status', $status);

## Complete Integrated Flow

1. Initial flow (WooCommerce)

// In Gateway Class
public function process_payment($order_id) {
    $order = wc_get_order($order_id);
    
    // Step 1: Create/Validate Order
    // Step 2: Prepare Payment Data
    // Step 3: Send PaymentInit
    // Step 4: Handle Redirect
}

2. Communication flow

Buyer -> WooCommerce Checkout
↓
Our Plugin (PaymentInit Request)
↓
IPG (HPP + 3DS if needed)
↓
Bank Authentication (if 3DS)
↓
IPG Processing
↓
Our Plugin (Notification)
↓
WooCommerce Order Update

3. Order States Mapping

// WooCommerce Order States
'pending'    => 'Init Order',         // After PaymentInit
'on-hold'    => 'Partial Order',      // During 3DS/HPP
'processing' => 'Processing Payment',  // After successful capture
'completed'  => 'Complete Order',      // After successful processing
'failed'     => 'Uncomplete Order'    // If payment fails

4. Data Storage Strategy

// Order Meta Storage
$order->update_meta_data('_novabankaipg_payment_id', $paymentid);
$order->update_meta_data('_novabankaipg_transaction_id', $tranid);
$order->update_meta_data('_novabankaipg_auth_code', $auth);
$order->update_meta_data('_novabankaipg_status', $status);

5. Message Verification

// In MessageHandler
private function generate_message_verifier($fields) {
    $message = implode('', array_filter($fields));
    $message = preg_replace('/\s+/', '', $message);
    return base64_encode(hash('sha256', $message, true));
}

## Detailed Flow Requirements

1. Transaction Type
- One-time payment (not recurring)
- Need to set RecurAction="" for normal e-commerce

2. Data Flow Requirements:

Send to IPG:
- Order ID (trackid)
- Virtual Product SKU (udf1)
- Customer Email (buyerEmailAddress)
- Customer Phone (udf2)
- Payment Amount (amt)
- Currency (currencycode)

Store from IPG:
- PaymentID
- TransactionID
- Auth Code
- Card Type
- Card Last 4 Digits
- Response Codes
- All IPG Messages

3. Flow States

WooCommerce Order:
pending -> on-hold (during HPP/3DS) -> processing/failed -> completed

## Updated Implementation Logic

1. Payment Data Structure
// In Gateway Class
$payment_data = [
    'action'       => '1',            // Purchase
    'amount'       => $order->get_total(),
    'currency'     => $order->get_currency(),
    'trackid'      => $order->get_id(),
    'response_url' => $this->get_return_url($order),
    'error_url'    => $order->get_checkout_payment_url(),
    'langid'       => $this->get_language_code(),
    // Customer Data
    'buyerEmailAddress' => $order->get_billing_email(),
    // UDF Fields
    'udf1'         => $this->get_product_sku($order),    // Product SKU
    'udf2'         => $order->get_billing_phone(),       // Phone Number
    'udf3'         => wp_create_nonce('novabankaipg_payment_' . $order_id), // Security
    // One-time payment
    'RecurAction'  => '',             // Normal e-commerce
    'payinst'      => 'VPAS',         // 3DS
];

2. Order Meta Storage

// After successful payment
$order->update_meta_data('_novabankaipg_payment_id', $notification['paymentid']);
$order->update_meta_data('_novabankaipg_transaction_id', $notification['tranid']);
$order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
$order->update_meta_data('_novabankaipg_card_type', $notification['cardtype']);
$order->update_meta_data('_novabankaipg_card_last4', $notification['cardLastFourDigits']);
$order->update_meta_data('_novabankaipg_response_code', $notification['responsecode']);
$order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));

3. Status Management

// In notification handler
public function process_notification($notification) {
    $order = wc_get_order($notification['trackid']);
    
    if ('CAPTURED' === $notification['result']) {
        $order->update_status('processing', __('Payment successful via IPG.', 'novabanka-ipg-gateway'));
        $this->store_transaction_data($order, $notification);
    } else {
        $order->update_status('failed', sprintf(
            __('Payment failed. Result: %s, Code: %s', 'novabanka-ipg-gateway'),
            $notification['result'],
            $notification['responsecode'] ?? 'N/A'
        ));
    }
    
    return [
        'msgName' => 'PaymentNotificationResponse',
        'browserRedirectionURL' => $this->get_return_url($order)
    ];
}

4. Helper Methods

private function get_product_sku($order) {
    $items = $order->get_items();
    $item = reset($items);  // Get first item
    $product = $item->get_product();
    return $product ? $product->get_sku() : '';
}

private function store_transaction_data($order, $notification) {
    // Store all transaction data
    foreach ($notification as $key => $value) {
        $order->update_meta_data("_novabankaipg_{$key}", $value);
    }
    
    // Store raw response for debugging
    $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
    
    $order->save();
}

## Conclusion

This implementation:
1. Properly handles one-time payments
2. Passes all required data to IPG
3. Stores complete transaction history
4. Maintains proper order status flow
5. Follows WooCommerce standards
6. Preserves all IPG response data
</file>

<file path="developer-woocommerce-payment-async-two-processes.md">
# WooCommerce Asynchronous Payment Flow - NovaBanka IPG

## Overview
The payment flow involves multiple steps across different domains with asynchronous communication between IPG and WooCommerce. This guide provides a step-by-step explanation of the payment processes involved, helping developers understand how to handle payments reliably and efficiently.

## Process Overview

```plaintext
Process A (Customer Journey):
WooCheckout -> Init Payment -> HPP Redirect -> Customer at IPG -> Customer Return to Success/Failure URL

Process B (Server Communication):
IPG Server -> Notification Callback -> Order Status Update -> Response to IPG

These processes are independent and can happen in any order!
```

## Flow Diagram
The overall flow of the payment process can be visualized as follows:

| Customer  | Our Site       | IPG              | Bank         |
|-----------|----------------|------------------|--------------|
| (1) Place Order       |                    |              |
|                   | (2) PaymentInit      |              |
|                   | <--- (3) HPP URL ---- |              |
| <--- (4) Redirect to HPP |                  |              |
|                   |                    | (5) Enter Card Details   |
|                   |                    | --- (6) 3DS Auth ------> |
|                   |                    | <--- (7) Auth Response --|
|                   | <--- (8) Payment Notification |              |
|                   | (9) Process Order   |              |
| <--- (10) Redirect to Result |              |

## Communication Steps
### 1. Initial Order Creation
- Customer places an order on WooCommerce site.
- Order status: **pending**.

### 2. Payment Initialization
- Prepare data for payment initialization with IPG.
  ```php
  // Send to IPG
  $payment_data = [
      // URL to receive asynchronous payment notifications from IPG
      'response_url' => WC()->api_request_url('novabankaipg'),
      
      // URL to redirect the customer upon successful payment
      'success_url' => $success_url,
      
      // URL to redirect the customer upon payment failure
      'failure_url' => $failure_url
  ];
  ```
- Order status: **on-hold**.- Order status: **on-hold**.

### 3. HPP Redirection
- IPG returns HPP URL, and customer is redirected to IPG domain.
- Order status remains **on-hold**.

### 4. Payment Processing
- Customer completes the payment process on the IPG.
- IPG processes the payment with the bank.
- Order status remains unchanged.

### 5. Asynchronous Notification Handling
- IPG sends a notification to WooCommerce using a dedicated endpoint.
  ```php
  // IPG calls our notification URL
  add_action('woocommerce_api_novabankaipg', array($this, 'handle_gateway_response'));
  ```

### 6. Order Update
- The notification from IPG triggers order updates and stores the transaction data.

### 7. Customer Return Handling
- After payment, handle customer redirection based on success or failure:
  - **Success Case**: Redirect the customer to the thank you page, confirming successful payment.
  - **Failure Case**: Redirect the customer to the payment page, displaying an error message and allowing them to retry the payment.
  ```php
  add_action('woocommerce_api_novabankaipg_success', array($this, 'handle_success_return'));
  add_action('woocommerce_api_novabankaipg_failure', array($this, 'handle_failure_return'));
  ```

## API Endpoints
### 1. Notification Endpoint
- **Notification Processing**: Updates the WooCommerce order with details received from IPG.
  ```php
  // /wc-api/novabankaipg
  public function handle_gateway_response() {
      // Process IPG notification
      // Update order status
      // Return response to IPG
  }
  ```

### 2. Success Return Endpoint
- **Success Handling**: Redirects to a thank you page upon payment success.
  ```php
  // /wc-api/novabankaipg_success
  public function handle_success_return() {
      // Verify order
      // Redirect to thank you page
  }
  ```

### 3. Failure Return Endpoint
- **Failure Handling**: Redirects to the payment page with an error message upon failure.
  ```php
  // /wc-api/novabankaipg_failure
  public function handle_failure_return() {
      // Verify order
      // Show error message
      // Redirect to payment page
  }
  ```

## Implementation
```php
class WC_Gateway_NovaBanka_IPG extends WC_Payment_Gateway {
    /**
     * Initial payment setup - starts the customer journey
     */
    public function process_payment($order_id) {
        $order = wc_get_order($order_id);
        
        try {
            // 1. Prepare callback URLs for later use
            $urls = [
                'responseURL' => WC()->api_request_url('novabankaipg'),
                'successURL' => add_query_arg([
                    'wc-api' => 'novabankaipg_success',
                    'order-key' => $order->get_order_key()
                ], home_url('/')),
                'errorURL' => add_query_arg([
                    'wc-api' => 'novabankaipg_failure',
                    'order-key' => $order->get_order_key()
                ], home_url('/'))
            ];

            // 2. Initialize payment with IPG
            $payment_data = array_merge($urls, [
                'trackid' => $order->get_id(),
                'amount' => $order->get_total(),
                'currency' => $order->get_currency(),
                // ... other payment data ...
            ]);

            $response = $this->api_handler->initialize_payment($payment_data);

            // 3. Store payment ID and mark order as pending HPP
            $order->update_meta_data('_novabankaipg_payment_id', $response['paymentid']);
            $order->update_status('pending', __('Awaiting HPP redirect', 'novabanka-ipg-gateway'));
            $order->save();

            // 4. Send customer to HPP
            return [
                'result' => 'success',
                'redirect' => $response['browserRedirectionURL']
            ];

        } catch (Exception $e) {
            wc_add_notice($e->getMessage(), 'error');
            return;
        }
    }

    /**
     * IPG Notification Handler - Process B
     * This is completely independent of customer's browser session
     */
    public function handle_ipg_notification() {
        try {
            // 1. Get and validate notification
            $notification = json_decode(file_get_contents('php://input'), true);
            
            if (!$this->api_handler->verify_signature($notification)) {
                throw new Exception('Invalid signature');
            }

            // 2. Get and validate order
            $order = wc_get_order($notification['trackid']);
            if (!$order) {
                throw new Exception('Order not found');
            }

            // 3. Store transaction data regardless of outcome
            $this->store_transaction_data($order, $notification);

            // 4. Process payment result
            if ($notification['result'] === 'CAPTURED') {
                $order->payment_complete($notification['tranid']);
                $order->add_order_note(__('Payment successful - IPG notification received', 'novabanka-ipg-gateway'));
            } else {
                $order->update_status('failed', sprintf(
                    __('Payment failed - IPG notification. Result: %s', 'novabanka-ipg-gateway'),
                    $notification['result']
                ));
            }

            // 5. Acknowledge to IPG
            wp_send_json(['status' => 'OK'], 200);

        } catch (Exception $e) {
            // Log error but don't expose details to IPG
            $this->logger->error('IPG notification failed', [
                'error' => $e->getMessage(),
                'notification' => $notification ?? null
            ]);
            wp_send_json(['status' => 'ERROR'], 500);
        }
    }

    /**
     * Customer Return Handler - Process A
     * Customer returns here after HPP, but order might already be updated by Process B
     */
    public function handle_customer_return_success() {
        $order_key = wc_clean($_GET['order-key'] ?? '');
        $order = wc_get_orders(['order_key' => $order_key, 'limit' => 1])[0] ?? null;

        if (!$order) {
            wc_add_notice(__('Invalid order.', 'novabanka-ipg-gateway'), 'error');
            wp_redirect(wc_get_checkout_url());
            exit;
        }

        // Check if IPG notification was already processed (Process B)
        $transaction_id = $order->get_meta('_novabankaipg_transaction_id');
        
        if ($transaction_id) {
            // Order already updated by IPG notification
            if ($order->is_paid()) {
                wp_redirect($this->get_return_url($order));
            } else {
                wc_add_notice(
                    __('Payment was not successful. Please try again.', 'novabanka-ipg-gateway'),
                    'error'
                );
                wp_redirect($order->get_checkout_payment_url());
            }
        } else {
            // IPG notification hasn't arrived yet
            wc_add_notice(
                __('Your payment is being processed. Please wait a moment.', 'novabanka-ipg-gateway'),
                'notice'
            );
            wp_redirect($this->get_return_url($order));
        }
        exit;
    }

    /**
     * Store transaction data from IPG notification
     */
    private function store_transaction_data($order, $notification) {
        // Store all relevant fields
        $fields_to_store = [
            'paymentid', 'tranid', 'auth', 'result', 'track_id', 
            'cardtype', 'cardLastFourDigits'
        ];

        foreach ($fields_to_store as $field) {
            if (isset($notification[$field])) {
                $order->update_meta_data("_novabankaipg_{$field}", $notification[$field]);
            }
        }

        // Store full response for debugging
        $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
        
        // Store processing timestamp
        $order->update_meta_data('_novabankaipg_processed_at', time());
        
        $order->save();
    }
}
```

## Order Status Flow
The order status flow is crucial in tracking the progression of a payment through the different stages.

```
pending -> on-hold -> processing/failed -> completed
```

- **pending**: Initial order creation.
- **on-hold**: During HPP/3DS process.
- **processing**: Successful payment.
- **failed**: Failed payment.
- **completed**: Order fulfilled.

## Security Considerations
1. **URL Validation**
   ```php
   // Verify order key
   $order_key = wc_clean($_GET['order-key'] ?? '');
   $order = wc_get_orders(['order_key' => $order_key, 'limit' => 1])[0] ?? null;
   ```

2. **Notification Verification**
   - Since the IPG notification always comes from the domain `novabanka.com`, we can simply validate the source domain. Redirects from the HPP should not be verified as they may vary and could use different URLs.
   ```php
   // Verify the source of the request
   if (strpos($_SERVER['HTTP_REFERER'], 'novabanka.com') === false) {
       throw new Exception('Invalid notification source');
   }
   ```

3. **Order State Validation**
   - Ensure that the current order state is validated before processing to avoid duplicate payments and errors.

## Implementation Notes
1. **URL Generation**
   ```php
   private function get_gateway_urls($order) {
       return [
           'notification_url' => WC()->api_request_url('novabankaipg'),
           'success_url' => add_query_arg([
               'wc-api' => 'novabankaipg_success',
               'order-key' => $order->get_order_key()
           ], home_url('/')),
           'failure_url' => add_query_arg([
               'wc-api' => 'novabankaipg_failure',
               'order-key' => $order->get_order_key()
           ], home_url('/'))
       ];
   }
   ```

2. **Data Storage**
   ```php
   // Store transaction data
   $order->update_meta_data('_novabankaipg_payment_id', $payment_id);
   $order->update_meta_data('_novabankaipg_transaction_id', $transaction_id);
   ```

3. **Error Handling**
   ```php
   try {
       // Process notification
   } catch (Exception $e) {
       $this->logger->error('Payment notification error: ' . $e->getMessage());
       wp_die($e->getMessage(), 'Payment Error', array('response' => 500));
   }
   ```

## Testing Considerations
1. **Notification Testing**
   - Test with the IPG test environment to verify all notification scenarios and transitions in order status.

2. **Customer Return Testing**
   - Verify redirection logic for both success and failure returns.
   - Check for consistent order status displays and ensure proper messages are shown to users.
   - Test scenarios where the customer returns before or after the notification is received.

3. **Security Testing**
   - Test invalid signatures and incorrect order keys to ensure notifications are not accepted if they come from unauthorized sources.
   - Ensure that the system handles duplicate notifications gracefully without causing repeated processing.

4. **Performance Testing**
   - Simulate high transaction volumes to test the system’s performance and the IPG's ability to handle multiple callbacks concurrently.
   - Monitor server resource utilization and response times during these simulations to identify potential bottlenecks.

## Debugging
1. **Enable Extensive Logging During Development**
   - During the development phase, enable detailed debugging logs for every method, function, callback, and key process. This will help track the entire flow and identify issues at any stage.
   
   ```php
   // Log entry into the process_payment function
   $this->logger->debug('Entering process_payment method', [
       'order_id' => $order_id
   ]);

   // Log payment data preparation
   $this->logger->debug('Payment data prepared for IPG initialization', [
       'payment_data' => $payment_data
   ]);

   // Log notification receipt
   $this->logger->debug('IPG Notification received', [
       'notification' => $notification
   ]);

   // Log order status updates
   $this->logger->debug('Updating order status', [
       'order_id' => $order->get_id(),
       'new_status' => $notification['result'] === 'CAPTURED' ? 'processing' : 'failed'
   ]);
   ```

   - Ensure logs are added to every entry and exit point of key methods and when significant state changes occur (e.g., order status updates, data storage).

2. **Monitor Endpoints**
   - Regularly check WooCommerce logs and monitor callbacks to ensure notifications are being received and processed as expected.
   - Log any unexpected errors or anomalies, especially during high transaction periods.

3. **Verify Data Consistency**
   - Validate order metadata, transaction IDs, and amounts to ensure data accuracy.
   - Check for data integrity issues, especially when multiple notifications are received or when race conditions occur.

4. **Error Recovery**
   - Implement retry logic for failed notifications where possible.
   - Ensure that error messages are logged with sufficient detail to aid in troubleshooting while avoiding exposing sensitive information.

## Data Storage Strategy

WooCommerce provides a variety of out-of-the-box (OoTB) functionalities for data management, including order metadata storage and transaction handling. To make the most of these features while keeping the implementation clean and efficient, consider the following suggestions:

1. **Use Built-in WooCommerce Meta Methods Efficiently**
   - Instead of manually storing every piece of data in custom meta fields, use WooCommerce's built-in methods such as `$order->set_transaction_id()` for storing transaction-specific information. This keeps the data standardized and makes it more accessible for other WooCommerce features.
   
   ```php
   // Example: Setting transaction ID
   $order->set_transaction_id($notification['tranid']);
   $order->save();
   ```

2. **Avoid Redundant Metadata**
   - Instead of creating custom meta fields for commonly used data (like `paymentid` or `transaction_id`), consider if that information can be stored using standard WooCommerce methods. This approach simplifies data management and ensures better compatibility with other WooCommerce plugins and extensions.

3. **Utilize Order Notes for Tracking**
   - To track the flow of notifications and payment stages, consider adding WooCommerce order notes instead of custom metadata for logs. Order notes are visible in the order’s history and can be helpful for both customers and administrators.
   
   ```php
   $order->add_order_note(__('Payment successful - IPG notification received', 'novabanka-ipg-gateway'));
   ```

4. **Standardize Data Storage**
   - When storing custom transaction data that doesn't fit into existing WooCommerce fields, ensure that field names are standardized and clear. Consider grouping fields logically (e.g., all IPG-related fields start with `_novabankaipg_`) to avoid conflicts and maintain data consistency.

   ```php
   $order->update_meta_data('_novabankaipg_payment_status', $notification['result']);
   $order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
   $order->save();
   ```

5. **Minimize Custom Data Storage**
   - Wherever possible, avoid adding too many custom fields to the order. Instead, leverage WooCommerce’s core methods and structures for tracking payment states and results. This practice keeps the database optimized and prevents performance degradation, especially for stores with large volumes of transactions.

6. **Data Privacy and Compliance**
   - Avoid storing sensitive information such as full card details in order metadata. Only store the last four digits if needed for customer reference. Ensure compliance with PCI-DSS standards by storing minimal cardholder information.
   
   ```php
   // Store only the last four digits for reference
   $order->update_meta_data('_novabankaipg_card_last_four', $notification['cardLastFourDigits']);
   $order->save();
   ```

These strategies will help ensure that the implementation remains maintainable, scalable, and compatible with future WooCommerce updates, while also optimizing performance and data security.
</file>

<file path="developer-woocommerce-payment-async.md">
# WooCommerce Asynchronous Payment Flow - NovaBanka IPG

## Overview

The payment flow involves server-to-server communication between IPG and WooCommerce through a notification callback system.

## Flow Diagram

Customer         Our Site              IPG                Bank
   |                |                   |                   |
   |---(1)Checkout->|                   |                   |
   |                |---(2)PaymentInit->|                   |
   |                |<-(3)HPP URL-------|                   |
   |<-(4)Redirect---|                   |                   |
   |                |                   |                   |
   |---(5)Enter Card Details---------->|                   |
   |                |                   |---(6)3DS Auth---->|
   |                |                   |<-(7)Auth Response-|
   |                |<-(8)POST Notification-|               |
   |                |---(9)Return URL-->|                   |
   |<-(10)Final Redirect---------------|                   |

## Communication Steps

1. **Initial Order Creation**
   - Customer places order on WooCommerce site
   - Order status: 'pending'

2. **Payment Initialization**
   ```php
   // Send to IPG
   $payment_data = [
       'responseURL' => WC()->api_request_url('novabankaipg'),  // Notification callback URL
       'errorURL'    => $order->get_checkout_payment_url(true)  // Error return URL
   ];
   ```

3. **HPP Redirection**
   - IPG returns HPP URL
   - Customer redirected to IPG domain
   - Order status: 'on-hold'

4. **Payment Processing**
   - Customer completes payment on IPG
   - IPG processes with bank
   - Order status unchanged

5. **Payment Notification**
   ```php
   // IPG POSTs to our notification URL
   add_action('woocommerce_api_novabankaipg', array($this, 'handle_notification_callback'));
   ```

6. **Order Update & Response**
   - Process notification
   - Update order status
   - Return browserRedirectionURL to IPG

## API Endpoints

### 1. Notification Callback Endpoint
```php
// /wc-api/novabankaipg
public function handle_notification_callback() {
    try {
        // Get POST data from IPG
        $notification = $this->get_post_data();
        
        // Verify notification signature
        if (!$this->api_handler->verify_signature($notification)) {
            throw new Exception('Invalid signature');
        }
        
        // Process payment result
        $order = $this->process_payment_result($notification);
        
        // Prepare response for IPG
        $response = [
            'msgName' => 'PaymentNotificationResponse',
            'version' => '1',
            'paymentID' => $notification['paymentid'],
            'browserRedirectionURL' => $this->get_return_url($order)
        ];
        
        // Add message verifier
        $response['msgVerifier'] = $this->api_handler->generate_message_verifier([
            $response['msgName'],
            $response['version'],
            $response['paymentID'],
            $this->get_secret_key(),
            $response['browserRedirectionURL']
        ]);
        
        // Return JSON response to IPG
        wp_send_json($response);
        
    } catch (Exception $e) {
        wp_send_json_error($e->getMessage(), 500);
    }
}
```

## Order Status Flow
```
pending -> on-hold -> processing/failed -> completed
```

- **pending**: Initial order creation
- **on-hold**: During HPP/3DS process
- **processing**: Successful payment
- **failed**: Failed payment
- **completed**: Order fulfilled

## Security Considerations

1. **Notification Verification**
   ```php
   // Verify IPG signature
   if (!$this->api_handler->verify_signature($notification)) {
       throw new Exception('Invalid signature');
   }
   ```

2. **Order State Validation**
   - Check current order status
   - Prevent duplicate processing
   - Validate payment amounts

3. **Response Signing**
   ```php
   // Generate response signature
   $msgVerifier = $this->api_handler->generate_message_verifier([
       'PaymentNotificationResponse',
       '1',
       $payment_id,
       $secret_key,
       $redirect_url
   ]);
   ```

## Implementation Notes

1. **Notification Handling**
   ```php
   private function process_payment_result($notification) {
       $order = wc_get_order($notification['trackid']);
       
       if (!$order) {
           throw new Exception('Order not found');
       }
       
       // Store transaction data
       $this->store_transaction_data($order, $notification);
       
       // Update order status based on result
       if ($notification['result'] === 'CAPTURED') {
           $order->payment_complete($notification['tranid']);
       } else {
           $order->update_status('failed', 'Payment failed: ' . $notification['result']);
       }
       
       return $order;
   }
   ```

2. **Data Storage**
   ```php
   private function store_transaction_data($order, $notification) {
       $order->update_meta_data('_novabankaipg_payment_id', $notification['paymentid']);
       $order->update_meta_data('_novabankaipg_transaction_id', $notification['tranid']);
       $order->update_meta_data('_novabankaipg_result', $notification['result']);
       $order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
       $order->save();
   }
   ```

## Testing Considerations

1. **Notification Testing**
   - Test with IPG test environment
   - Verify signature validation
   - Test all payment result scenarios

2. **Error Handling**
   - Test invalid signatures
   - Test missing order IDs
   - Test duplicate notifications

3. **Response Validation**
   - Verify response format
   - Test signature generation
   - Validate redirect URLs

## Debugging

1. **Enable Logging**
   ```php
   $this->logger->debug('Payment notification received', [
       'notification' => $notification,
       'order_id' => $order_id
   ]);
   ```

2. **Monitor Endpoints**
   - Check WooCommerce logs
   - Monitor notification callbacks
   - Track customer returns

3. **Verify Data**
   - Check order meta data
   - Verify transaction IDs
   - Validate amounts and currencies

## Role and Flow Mapping

### Component Roles
- WooCommerce (Our Plugin) = Merchant Implementation
- IPG = Payment Gateway Service
- Plugin Components = Integration Layer

### Flow Comparison
Your Flow:                     | Documentation Flow:
-----------------------------|-----------------------------
Woo Checkout -> Pay Now      | Merchant Order Form
Plugin Handles Init          | Merchant Backend
IPG HPP                      | IPG HPP
Bank Auth                    | Bank Auth
IPG Response                | IPG Response
Plugin Handles Response     | Merchant Backend
Woo Order Status Update     | Merchant Order Update

### Integration Points


## Data Storage Strategy

### Transaction Data Storage
```php
private function store_transaction_data($order, $notification) {
    // Store all transaction data
    foreach ($notification as $key => $value) {
        $order->update_meta_data("_novabankaipg_{$key}", $value);
    }
    
    // Store raw response for debugging
    $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
    
    $order->save();
}
```

### Required Data Fields
1. From IPG to Store:
   - PaymentID
   - TransactionID
   - Auth Code
   - Card Type
   - Card Last 4 Digits
   - Response Codes
   - All IPG Messages

2. Send to IPG:
   - Order ID (trackid)
   - Virtual Product SKU (udf1)
   - Customer Email (buyerEmailAddress)
   - Customer Phone (udf2)
   - Payment Amount (amt)
   - Currency (currencycode)

## Message Verification
```php
private function generate_message_verifier($fields) {
    $message = implode('', array_filter($fields));
    $message = preg_replace('/\s+/', '', $message);
    return base64_encode(hash('sha256', $message, true));
}
```
</file>

<file path="ipg-gateway-example-php.md">
<?php
/*
 * Plugin Name: WooCommerce IPG Payment Gateway
 * Plugin URI: https://www.tasgroup.rs/
 * Description: Extends WooCommerce with the IPG Payment Gateway.
 * Author: TAS EE
 * Author URI: https://www.tasgroup.rs/
 * Version: 1.0.4
 *
 * History: 
 *  1.0.1
 *      - Basic purchase functionality
 *  1.0.2
 *  - Added purchaseInstallData
 *  - Added action_woocommerce_order_refunded
 *  1.0.3
 *  - Fixed action woocommerce_api_callback
 *  1.0.4
 *  - Increased Response Title size and fixed default value of response URL 
 *  1.0.5
 *  - Improved NOT CAPTURED error message presentation
 *
 */

add_action( 'woocommerce_thankyou', 'ipg_order_received_title', 1 );
function ipg_order_received_title( ) {
    
    $title = '';
    if (isset($_GET['result']) &&  ($_GET['result'] == 'CAPTURED' || $_GET['result'] == 'APPROVED')) {
        $title.='<div style="color:Green;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment successful.</label><br>';
        $title.='<label>Result: ' . $_GET['result'] . '</label><br>';
        $title.='<label>Reference:'.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else if (isset($_GET['result']) && $_GET['result'] == 'NOT_CAPTURED') {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment Declined</label><br>';
        $title.='<label>Result: NOT CAPTURED</label><br>';
        $title.='<label>Response Code: '.$_GET['responseCode'].'</label><br>';
        if (isset($_GET['responseDescription'])) {
            $title.='<label>Response Description: '.$_GET['responseDescription'].'</label><br>';
        }
        $title.='<label>Reference: '.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else  if (isset($_GET['errorCode'])) {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Error :'.$_GET['errorCode'];
        if (isset($_GET['errorDesc'])) {
            $title.='-'.$_GET['errorDesc'].'';
        }
        $title.='</label>';
        $title.='</div>';
    } else {
        $title.='<div style="color:Red;font-size: 1.4em;padding-bottom: 0.9em;">';
        $title.='<label>Notification Error - Check RESPONSE URL</label><br>';
        $title.='<label>Please contact support</label><br>';
        $title.='</div>';
    }
    $title .= '<B>';
    
    echo $title;
}

add_filter('woocommerce_payment_gateways', 'ipg_gateway_class');
function ipg_gateway_class($gateways)
{
    $gateways[] = 'WC_IPG_POST_Gateway';
    return $gateways;
}

// Setup the responseURL interface
add_filter('query_vars', 'ipg_add_query_vars');

/**
 * Add the 'ipg_response_interface' query variable so WordPress
 * won't remove it.
 */
function ipg_add_query_vars($vars)
{
    $vars[] = "ipg_response_interface";
    return $vars;
}

add_action('woocommerce_before_thankyou', 'ipg_before_thankyou');

function ipg_before_thankyou($order_id)
{
    $has_order_id = isset($order_id);
    error_log('has_order_id ');
    error_log($has_order_id);
    if ($has_order_id != 1)
        return $order_id;
    
    error_log('Could perform something with Order ID: ');
    error_log($order_id);
    
    $order = new WC_Order($order_id);
    $order->set_payment_method_title('TUSAM');
    
}

/*
 * The class itself, please note that it is inside plugins_loaded action hook
 */
add_action('plugins_loaded', 'ipg_init_gateway_class');

function ipg_init_gateway_class()
{
    
    /**
     * check for 'ipg_response_interface' query variable and do what you want if its there
     */
    add_action('woocommerce_api_callback', 'ipg_response_interface');

    function ipg_response_interface($template)
    {
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
        // Load basics
        require_once ('wp-load.php');
        
        $request_body = file_get_contents("php://input");
        error_log('Received JSON request:');
        error_log($request_body);
        
        if (! isset($request_body) || empty($request_body)) {
            error_log('Received Empty JSON:');
            error_log($request_body);
            return $template;
        }
        
        $request_json = json_decode($request_body);
        
        // json request, reply with json response
        header('Content-Type: application/json');
        
        // Process the order
        if (isset($request_json->type) && $request_json->type == 'valid') {
            error_log('IPG JSON Valid Message:');
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            
            $order->set_transaction_id($request_json->paymentid);
            
            $result_url = $order->get_checkout_order_received_url();
            if (isset($request_json->result) && ($request_json->result == 'CAPTURED' || $request_json->result == 'APPROVED')) {
                $result_url .=  '&result='.$request_json->result.'&ref='.$request_json->ref;
                // Mark order as 'processing'
                $order->payment_complete();
                $order->add_order_note('Received Successful payment from IPG gateway, result: ' . $request_json->result . ', ref: ' . $request_json->ref, 'woocommerce_gateway_ipg');
                // log
                error_log('Received Payment successful from IPG gateway');
                // Order successful URL
            } else {
                $result_url .=  '&result=NOT_CAPTURED&responseCode='.$request_json->responsecode.'&ref='.$request_json->ref.'&responseDescription='.$request_json->responsedescription;
                // Mark order as 'failed'
                $order->update_status('failed', __('Received Payment Declined from IPG gateway , result: ' . $request_json->result . ', responseCode: ' . $request_json->responsecode . ', ref: ' . $request_json->ref.', responseDescription='.$request_json->responsedescription, 'woocommerce_gateway_ipg'));
                // log
                error_log('Received Payment Declined from IPG gateway ');
                // Order successful URL
            }
            // Command the redirection to the ThankYou page
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            $successful_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($successful_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        } else {
            error_log('IPG JSON Error Message:');
            error_log($request_json->errorCode);
            error_log($request_json->errorDesc);
            error_log($request_json->paymentid);
            error_log($request_json->trackid);
            
            wc_add_notice('IPG Response Error', 'error');
            wc_add_notice($request_json->errorDesc, 'error');
            
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            // Mark as 'Processing'
            $order->update_status('failed', __('Received Error from IPG gateway payment, paymentid: ' . $request_json->paymentid . ', errorCode: ' . $request_json->errorCode . ', errorDesc: ' . $request_json->errorDesc, 'woocommerce_gateway_ipg'));
            
            $result_url = $order->get_checkout_order_received_url() . '&errorCode=' . $request_json->errorCode . '&errorDesc=' . $request_json->errorDesc;
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                // 'YXKZPOQ9RRLGPDED5D3PC5BJ',
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            
            $error_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($error_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        }
        exit();

        return $template;
    }

    function getMessageVerifier($messageVerifierFields)
    {
        $messageVerifierBase = '';
        foreach ($messageVerifierFields as &$messageVerifierField) {
            $messageVerifierBase .= $messageVerifierField;
        }
        error_log('Message Verifier Base loaded: ');
        error_log($messageVerifierBase);
        
        $messageVerifierBase_hash = hash('sha256', $messageVerifierBase);
        error_log('Message Verifier Hash Hex loaded: ');
        error_log($messageVerifierBase_hash);
        
        $messageVerifierBase_hash_bytes = hex2bin($messageVerifierBase_hash);
        
        // Convert binary to base64
        $msgVerifier = base64_encode($messageVerifierBase_hash_bytes);
        error_log('Message Verifier Hash Base64 loaded: ');
        error_log($msgVerifier);
        return $msgVerifier;
    }

    class WC_IPG_POST_Gateway extends WC_Payment_Gateway
    {

        /**
         * Class constructor
         */
        public function __construct()
        {
            $this->id = 'asoftipg'; // payment gateway plugin ID

            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            if (empty($this->CheckoutIconUrl)) {
                // Set a default value
                $this->icon = plugin_dir_url(__FILE__) . '../ipg-gateway/assets/img/TASEE.png';
            } else {
                $this->icon = $this->CheckoutIconUrl;
            }
            
            $this->has_fields = false; // true in case you need a custom credit card form
            $this->method_title = 'IPG Gateway';
            $this->method_description = 'Description of IPG payment gateway'; // will be displayed on the options page
                                                                              
            // gateways can support subscriptions, refunds, saved payment methods,
                                                                              // but in this plugin we begin with simple payments
            $this->supports = array(
                'products'
            );
            
            // Method with all the options fields
            $this->init_form_fields();
            
            // Load the settings.
            $this->init_settings();
            $this->title = $this->get_option('title');
            $this->description = $this->get_option('description');
            $this->enabled = $this->get_option('enabled');
            
            $this->MessageType = $this->get_option('MessageType');
            $this->MessageVersion = $this->get_option('MessageVersion');
            $this->TerminalID = $this->get_option('TerminalID');
            $this->Password = $this->get_option('Password');
            $this->IPGURL = $this->get_option('IPGURL');
            $this->IPGSelect = $this->get_option('IPGSelect');
            $this->SecretKey = $this->get_option('SecretKey');
            $this->Action = $this->get_option('Action');
            $this->ResponseURL = $this->get_option('ResponseURL');
            $this->ErrorURL = $this->get_option('ErrorURL');
            $this->NotificationFormat = $this->get_option('NotificationFormat');
            $this->PaymentPageMode = $this->get_option('PaymentPageMode');
            $this->PaymentInstrument = $this->get_option('PaymentInstrument');
            $this->CardSHA2 = $this->get_option('CardSHA2');
            $this->PaymentTimeout = $this->get_option('PaymentTimeout');
            $this->Language = $this->get_option('Language');
            $this->PurchaseInstalData = $this->get_option('PurchaseInstalData');
            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            
            
            // This action hook saves the settings
            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array(
                $this,
                'process_admin_options'
            ));
            
            // We need custom JavaScript to obtain a token
            // add_action( 'wp_enqueue_scripts', array( $this, 'payment_scripts' ) );
            
            // You can also register a webhook here
            // add_action( 'woocommerce_api_IPG_webhook', array( $this, 'webhook' ) );
        }

        /**
         * Plugin options
         */
        public function init_form_fields()
        {
            $this->form_fields = array(
                'title' => array(
                    'title' => 'Title',
                    'type' => 'text',
                    'description' => 'This controls the title which the user sees during checkout.',
                    'default' => 'Credit Card',
                    'desc_tip' => true
                ),
                'description' => array(
                    'title' => 'Description',
                    'type' => 'textarea',
                    'description' => 'This controls the description which the user sees during checkout.',
                    'default' => 'Pay with your credit card via our IPG payment gateway.'
                ),
                'enabled' => array(
                    'title' => 'Enable/Disable',
                    'label' => 'Enable IPG Gateway',
                    'type' => 'checkbox',
                    'description' => '',
                    'default' => 'no'
                ),
                'MessageType' => array(
                    'title' => 'Message Type',
                    'type' => 'select',
                    'default' => 'VISEC / VIREC first transaction',
                    'class' => 'MessageType wc-enhanced-select',
                    'options' => array(
                        'MessageType' => 'VISEC / VIREC first transaction'
                    )
                ),
                'MessageVersion' => array(
                    'title' => 'Message Version',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'MessageVersion wc-enhanced-select',
                    'options' => array(
                        '1' => '1'
                    )),
                'TerminalID' => array(
                    'title' => 'Terminal ID:',
                    'type' => 'text',
                    'default' => '89110001'
                ),
                'Password' => array(
                    'title' => 'Password:',
                    'type' => 'password',
                    'default' => 'test1234'
                ),
                'IPGURL' => array(
                    'title' => 'IPG:',
                    'type' => 'text',
                    'default' => 'http://ipg-test:9080/IPGWeb/servlet/PaymentInitRequest'
                ),
                'SecretKey' => array(
                    'title' => 'Secret Key:',
                    'type' => 'text',
                    'default' => 'YXKZPOQ9RRLGPDED5D3PC5BJ'
                ),
                'Action' => array(
                    'title' => 'Action:',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'Action wc-enhanced-select',
                    'options' => array(
                        '1' => 'PURCHASE',
                        '4' => 'AUTHORIZATION'
                    )
                ),
                'ResponseURL' => array(
                    'title' => 'RESPONSE URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'ErrorURL' => array(
                    'title' => 'ERROR URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'NotificationFormat' => array(
                    'title' => 'Notiication Format:',
                    'type' => 'select',
                    'default' => 'json',
                    'class' => 'NotificationFormat wc-enhanced-select',
                    'options' => array(
                        'json' => 'JSON'
                    )
                ),
                'PaymentPageMode' => array(
                    'title' => 'Payment Page Mode:',
                    'type' => 'select',
                    'default' => '0',
                    'class' => 'PaymentPageMode wc-enhanced-select',
                    'options' => array(
                        '0' => 'STANDARD'
                    )
                ),
                'PaymentInstrument' => array(
                    'title' => 'Payment Instrument:',
                    'type' => 'text',
                    'default' => ''
                ),
                'CardSHA2' => array(
                    'title' => 'CARD SHA2:',
                    'type' => 'select',
                    'default' => 'Y',
                    'class' => 'CardSHA2 wc-enhanced-select',
                    'options' => array(
                        'Y' => 'Yes',
                        'N' => 'No'
                    )
                ),
                'PaymentTimeout' => array(
                    'title' => 'Payment Timeout:',
                    'type' => 'text',
                    'default' => '30'
                ),
                'Language' => array(
                    'title' => 'Language:',
                    'type' => 'text',
                    'default' => 'USA'
                ),
                'PurchaseInstalData' => array(
                    'title' => 'Installment Number: ',
                    'type' => 'text',
                    'default' => ''
                ),
                
                'CheckoutIconUrl' => array(
                    'title' => 'Checkout Icon URL: ',
                    'type' => 'text',
                    'description' => 'Insert URL of your Checkout Icon, or leave empty to use the default one.',
                    'default' => ''
                )
            );
        }

        public function process_payment($order_id)
        {
            global $woocommerce;
            
            // we need it to get any order detailes
            $order = new WC_Order($order_id);
            
            $args = array(
                "msgName" => "PaymentInitRequest",
                'version' => $this->MessageVersion,
                'id' => $this->TerminalID,
                'password' => $this->Password,
                
                'msgVerifier' => "",
                'langId' => $this->Language,
                
                'CartContent' => $this->CartContent, // JSON [complex]
                                                     
                // 'buyerFirstName' => $this->FirstName,
                                                     // 'buyerFirstName' => "",
                                                     // 'buyerLastName' => "",
                                                     // 'buyerUserId' => "",
                                                     // 'buyerPhoneNumber' => "",
                                                     // 'buyeremailaddress' => "",
                                                     // 'clientIpAddress' => "",
                                                     // 'clientUserAgent' => "",
                                                     // 'clientHttpHeaders' => "",
                                                     
                // 'shippingInfo' => "", // JSON
                                                     // 'billingInfo' => "", // JSON
                                                     
                // 'acctType' => "",
                                                     // 'accountInfo' => "", // JSON
                                                     // 'authenticationInfo' => "", // JSON
                                                     // 'priorAuthenticationInfo'=> "", // JSON
                
                'action' => $this->Action,
                'recurAction' => "",
                'recurContractId' => "",
                'responseURL' => $this->ResponseURL, // responseURL
                'errorURL' => $this->ErrorURL, // errorURL
                'currencycode' => $order->get_currency(),
                'amt' => $order->get_total(),
                'trackid' => $order_id,
                'cardSHA2' => $this->CardSHA2,
                'paymentTimeout' => $this->PaymentTimeout,
                //'pymnDscr' => $this->PaymentDescription,
                'notificationFormat' => $this->NotificationFormat,
                'paymentPageMode' => $this->PaymentPageMode,
                'payinst' => $this->PaymentInstrument,
                'purchaseInstalData' => $this->PurchaseInstalData,
            );
            
            if (! function_exists('write_log')) {

                function write_log($log)
                {
                    if (true === WP_DEBUG) {
                        if (is_array($log) || is_object($log)) {
                            error_log(print_r($log, true));
                        } else {
                            error_log($log);
                        }
                    }
                }
            }
            
            $message_verifier_fields_array = array(
                $args['msgName'],
                $args['version'],
                $args['id'],
                $args['password'],
                $args['amt'],
                $args['trackid'],
                '',
                $this->SecretKey,
                ''
            );
            
            // load message verifier
            $args['msgVerifier'] = getMessageVerifier($message_verifier_fields_array);
            
            $args['errorURL'] = $order->get_checkout_order_received_url();
            /*
             * Your API interaction could be built with wp_remote_post()
             */
            // $response = wp_remote_post( '{payment processor endpoint}', $args );
            
            $ipg_url = $this->IPGURL;
            write_log('Sending request, url: ');
            write_log($ipg_url);
            
            $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
            write_log('request_preety_json: ');
            write_log($request_preety_json);
            
            $request_json = json_encode($args);
            write_log('request_json: ');
            write_log($request_json);
            
            // $url = 'localhost:9082/IPGWeb/servlet/PaymentInitRequest';
            $response = wp_remote_post($ipg_url, array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'Content-Type' => 'application/json; charset=utf-8'
                ),
                'body' => $request_json,
                'method' => 'POST',
                'data_format' => 'body'
            ));
            
            if (is_wp_error($response) && ! empty($response->errors)) {
                wc_add_notice('HTTP Response Error', 'error');
                wc_add_notice($response->get_error_message(), 'error');
                return;
            }
            
            $response_code = wp_remote_retrieve_response_code($response);
            write_log('Loaded response code, response_code: ');
            write_log($response_code);
            if (! in_array($response_code, array(
                200,
                201
            ))) {
                wc_add_notice('HTTP Status Error', 'error');
                wc_add_notice($response_code, 'error');
                return;
            }
            
            $response_body = wp_remote_retrieve_body($response);
            write_log('Loaded response body, response_body: ');
            write_log($response_body);
            
            $response_json = json_decode($response_body);
            if (json_last_error() > JSON_ERROR_NONE) {
                wc_add_notice('Response JSON Error:', 'error');
                wc_add_notice(json_last_error_msg(), 'error');
                return;
            }
            
            write_log('Loadded JSON response, response_preety_json: ');
            $response_preety_json = json_encode($response_json, JSON_PRETTY_PRINT);
            write_log($response_preety_json);
            
            // it could be different depending on your payment processor
            if ($response_json->type == 'valid') {
                
                $response_url = $response_json->browserRedirectionURL;
                $response_url .= "?PaymentID=";
                $response_url .= $response_json->paymentid;
                
                if (! filter_var($response_url, FILTER_VALIDATE_URL)) {
                    wc_add_notice('Invalid IPG Response Url:', 'error');
                    wc_add_notice($response_url, 'error');
                    return;
                }
                
                // Mark as on-hold (we're awaiting the cheque)
                $order->update_status('on-hold', __('Awaiting IPG payment', 'ipg_plugin'));
                
                // // Reduce stock levels
                // $order->reduce_order_stock();
                
                // // Remove cart
                // $woocommerce->cart->empty_cart();
                
                // Redirect to the thank you page
                return array(
                    'result' => 'success',
                    'redirect' => $response_url
                );
            } else {
                wc_add_notice('IPG Response Error:', 'error');
                wc_add_notice($response_json->errorCode, 'error');
                wc_add_notice($response_json->errorDesc, 'error');
                return;
            }
                        
        }
        
         
    }
    
    
    // REFOUND CALL 1!
    
    // add the action
    add_action( 'woocommerce_order_refunded', 'action_woocommerce_order_refunded', 10, 2 );
    
    // Do the magic line 659
    function action_woocommerce_order_refunded( $order_id, $refund_id )
    {
        // Your code here
        error_log('REFOUND CALL >>> POST');

        error_log('Order ID: ');
        error_log($order_id);
        
        error_log('$refund_id: ');
        error_log($refund_id);        
        
        // we need it to get any order detailes
        $order = new WC_Order($order_id);
        
        $ipg_url =  'http://ipg-test:33666/IPGWeb/servlet/PaymentInitRequest';
        
        //  Sta treba da posaljem, i kako to da dohvatim i spakujem            <<<<<
        
        global $woocommerce;
        $order = new WC_Order($order_id);
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
       
        $a = array ($WC_IPG_POST_Gateway->get_form_fields());
        $b = $a['SecretKey'][0]->SecretKey;
        $b = 'YXKZPOQ9RRLGPDED5D3PC5BJ';
        
        error_log(' SecretKey == ');
        error_log( $b );
        
        //init_form_fields();

        $args = array(
            'msgName'           => 'FinancialRequest',               
            'version'           => '1',                              
            'id'                => '89110001',     
            'password'          => 'test1234',                       
            'action'            => '2',                             
            'amt'               => '0,01',                           
            'currencycode'      => '840',                            
            'trackid'           => 'CTV-TEST-PureBuy-1',              
            'tranid'            => '980026872121022345', 
            'udf1'               => 'AA',
            'udf2'               => 'BB',
            'udf3'               => 'CC',
            'udf4'               => 'DD',
            'udf5'               => 'EE',
        );
        
        $refund_parameters_message_verifier_fields_array = array(
            $args['msgName'],
            $args['version'],
            $args['id'],
            $args['password'],
            $args['amt'],
            $args['trackid'],
            '',
            $b,
            ''
        );
        
        // Just print to LOG
        $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($request_preety_json);
        
        $refund_parameters_message_verifier_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($refund_parameters_message_verifier_preety_json);
        
        // load message verifier
        $msgVerifier = getMessageVerifier($refund_parameters_message_verifier_fields_array);
        $args['msgVerifier'] = $msgVerifier;

        error_log(' msgVerifier== ');
        error_log( $msgVerifier );
                
        $json_to_go = json_encode($args);
        error_log($json_to_go);
        
        $response = wp_remote_post($ipg_url, array(
            'headers'     => array('Content-Type' => 'application/json; charset=utf-8'),
            'body'        => json_encode($args),
            'method'      => 'POST',
            'data_format' => 'body',
        ));
        
        error_log('DUMMY TEST NOVAK, received data: ');
        
        error_log(' transactionId== ');
        error_log($response->transactionId);
        
        error_log(' order_number== ');
        error_log($response->order_number);
        

    }
    

    
}
</file>

<file path="Simplified Plan for Seperation of Concerns SOC.md">
### Simplified Plan for Separation of Concerns (SoC)

#### Refactor the Core Payment Gateway Class (`NovaBankaIPGGateway`)

**Responsibility**: The `NovaBankaIPGGateway` should only handle WooCommerce integration, gateway setup, and initial flow control.

**Actions**:
- Keep WooCommerce hooks (`add_gateway`, `handle_callback`, etc.) in this class.
- Move business logic related to payments and refunds to dedicated service classes.

#### Create a `PaymentService` Class

**Responsibility**: Handle the actual payment processing logic, including payment initialization and refunds.

**Actions**:
- Move methods related to processing payments and generating API requests, like `process_payment()` and `sendPaymentInit()`, to `PaymentService`.
- This service should interact with the IPG API and should not be directly aware of WooCommerce.

```php
class PaymentService {
    private $api_handler;
    private $logger;

    /**
     * Constructor for PaymentService.
     *
     * @param APIHandler $api_handler Handles HTTP communication.
     * @param Logger $logger Manages logging.
     */
    public function __construct($api_handler, $logger) {
        $this->api_handler = $api_handler;
        $this->logger = $logger;
    }

    /**
     * Initializes a payment for an order.
     *
     * @param WC_Order $order The WooCommerce order object to initialize payment for.
     * @return array Response from the API containing payment initiation details.
     */
    public function initializePayment($order) {
        // Extract payment logic here to handle interactions with the IPG API.
        return $this->api_handler->sendPaymentInit($order);
    }

    /**
     * Refunds a payment for an order.
     *
     * @param WC_Order $order The WooCommerce order object to refund.
     * @param float $amount The amount to be refunded.
     */
    public function refundPayment($order, $amount) {
        // Handle refund logic here, including communication with the IPG API.
    }
}
```

#### Simplify `APIHandler` for API Requests Only

**Responsibility**: Handle HTTP communication with the NovaBanka IPG API.

**Actions**:
- Ensure that `APIHandler` contains only methods to send API requests and receive responses.
- Avoid embedding business rules, such as checking WooCommerce order statuses, in `APIHandler`.

#### Centralize Configuration Handling with `Config` Utility

**Gateway Settings Management**:
- Use the WooCommerce settings API (`init_form_fields`) to keep all configuration in one place.
- Move configuration fetching logic from the main plugin class to a new `Config` utility class.
- The `Config` class should provide a central point for managing default values and retrieving settings safely.

```php
class Config {
    /**
     * Retrieves a setting value by its key.
     *
     * @param string $key The key of the setting to retrieve.
     * @return mixed The setting value, or null if it does not exist.
     */
    public static function getSetting($key) {
        $settings = get_option('woocommerce_novabankaipg_settings', []);
        return $settings[$key] ?? null;
    }
}
```

#### Extract Logging Logic to a `Logger` Utility

**Responsibility**: Handle all log-related actions.

**Actions**:
- Move all logging to a dedicated `Logger` class, using WordPress’s built-in `WC_Logger` where appropriate.
- This ensures that logging can be easily modified (e.g., switching to a different logging mechanism).

#### Centralized Error Handling Using Custom Exceptions

**Custom Exceptions**:
- Introduce `NovaBankaIPGException` for specific error scenarios, such as `InvalidOrderException` or `PaymentFailureException`.
- This makes error management clearer and allows different parts of the system to respond appropriately.

**Error Management**:
- Ensure that exception handling is centralized within the payment service and is properly logged.

#### Refactor Payment Initialization and Notification Handlers

**Payment Initialization (`process_payment()`)**:
- Remain in `NovaBankaIPGGateway` but delegate to `PaymentService` for the actual initialization.

**Notification Handler (`handle_notification_callback()`)**:
- Extract the notification callback to `NotificationService` to manage incoming callbacks from IPG.

#### Simplify Front-End JavaScript Handling

**Split Functionality**:
- Move form handling and validation logic to a dedicated JavaScript module (e.g., `validation.js`).
- Keep different concerns, such as event listeners and API requests, in separate files.

### Revised Folder Structure for SoC

```
/includes
    /Core
        NovaBankaIPGGateway.php        // Handles WooCommerce integration only
    /Services
        PaymentService.php             // Handles payment-related business logic
        NotificationService.php        // Manages IPG notifications
    /Utils
        APIHandler.php                 // Handles HTTP communication
        Logger.php                     // Centralized logging utility
        Config.php                     // Manages plugin configuration
/assets
    /js
        validation.js                  // Front-end form validation logic
        api-handler.js                 // AJAX handling for payments
```

### Benefits of This Simplified Refactor

- **Easier Maintenance**: Each class has a specific responsibility, making the codebase easier to read and maintain.
- **Reduced Coupling**: By extracting services (`PaymentService`, `NotificationService`), changes in payment logic do not affect the WooCommerce-specific integration logic.
- **Improved Testability**: Moving business logic into services allows unit tests to be implemented more effectively without requiring WooCommerce context.
- **Alignment with WooCommerce Standards**: Keeping WooCommerce-specific concerns inside the `NovaBankaIPGGateway` class ensures better alignment with WooCommerce coding guidelines.

### Step-by-Step Refactor Implementation

1. **Extract Payment Logic to `PaymentService`**:
   - Move methods from `NovaBankaIPGGateway` that deal with initiating and validating payments.

2. **Refactor `APIHandler`**:
   - Simplify to focus solely on handling HTTP requests and responses.

3. **Migrate Logging to `Logger` Utility**:
   - Replace in-line logging throughout the codebase with calls to `Logger` for consistency.

4. **Notification Management**:
   - Extract the notification handling logic to `NotificationService` to streamline incoming payment notifications.

5. **Frontend Improvements**:
   - Ensure JavaScript for handling payment buttons and forms is organized into distinct responsibilities, such as validation and API communication.

This refactor plan keeps changes manageable, aligns with WooCommerce standards, and significantly improves the separation of concerns across the plugin for better maintainability and extensibility.
</file>

<file path="Simplified Plan for SOC To Do List.md">
### To-Do List for Completing SoC Refactor Based on Code Comparison

After comparing the provided old and refactored codebases, here are the steps required to ensure all components from the old implementation are fully transitioned into the new structure and aligned with the documented Separation of Concerns (SoC).

Complete OLD codebase: /home/financhssh/webprojects/financ/wp-content/plugins/gateway-33/repopack-output-main-branch.xml
Complete NEW codebase: /home/financhssh/webprojects/financ/wp-content/plugins/gateway-33/repopack-output.xml


#### 1. **Reintroduce Data Handling Utility (`DataHandler`)**
- **Issue**: The `DataHandler` class from the old code is not present in the refactored codebase.
- **Action**: Add the `DataHandler` class to the `/Utils` folder. This class should be responsible for formatting payment amounts, phone numbers, item amounts, and validating language codes, as in the old implementation.
- **Details**:
  - Ensure methods like `format_amount()`, `format_phone()`, and `validate_language_code()` are included.
  - This class should be used within the `PaymentService` and potentially within other utilities for consistent data formatting.

#### 2. **Reintegrate 3D Secure Handling (`ThreeDSHandler`)**
- **Issue**: The `ThreeDSHandler` utility is missing in the new codebase, but it was previously managing the 3D Secure (3DS) authentication process.
- **Action**: Add `ThreeDSHandler` to `/Utils`.
  - Ensure it handles the interaction with the 3D Secure mechanism, as part of the payment flow.
  - Reconnect `ThreeDSHandler` to the `PaymentService` so that 3D Secure verifications are executed appropriately.

#### 3. **Revise the Notification Handling Logic**
- **Issue**: While the `NotificationService` has been created, some of the finer aspects of handling notifications, such as specific error responses or signature verification, might be missing.
- **Action**: Double-check the `NotificationService` against the original notification handling code to ensure all logic has been carried over, particularly signature verification and response management.
- **Details**:
  - Make sure the notification verification (`verify_signature`) logic is implemented consistently.
  - Properly manage different notification types, including success, failure, and error scenarios.

#### 4. **Add Test Mode and Debug Logging Settings**
- **Issue**: The previous version had detailed settings for managing test and debug modes, which appear to be partially simplified or omitted in the refactor.
- **Action**: Reinstate `test_mode` and `debug` settings within `Config`.
  - Ensure the `Logger` utility can be set to different levels of verbosity based on the `debug` flag.
  - Test mode should control which API endpoint is used (live vs. test) and other related settings, like dummy credentials.

#### 5. **Enhance Logger Utility (`Logger`)**
- **Issue**: Logging is centralized, but the previous code included different log levels (`debug`, `info`, `warning`, `error`, `critical`).
- **Action**: Expand the `Logger` class to fully support different log levels.
  - Reintroduce log level configuration to provide more granular control over what gets logged.
  - Ensure all classes (`PaymentService`, `NotificationService`, `APIHandler`) use the appropriate log levels.

#### 6. **Update JavaScript for Enhanced User Interaction**
- **Issue**: Front-end JavaScript (`ipg-admin.js`, `ipg-scripts.js`) needs to be properly separated by concern.
- **Action**:
  - Split form validation logic into a separate module (e.g., `validation.js`) from the initialization and event handling logic.
  - Ensure each JavaScript module has a specific focus, such as form validation, API communication, or UI event handling.

#### 7. **Integrate Missing API Methods in `APIHandler`**
- **Issue**: Some methods from the old `APIHandler` may not have been transferred, such as those dealing with refund processing or notification verification.
- **Action**: Add missing methods to the `APIHandler` class for a complete set of API interactions.
  - Ensure methods like `process_refund()`, `verify_notification()`, and `send_payment_init()` are properly included.
  - `APIHandler` should focus solely on handling the HTTP requests and responses with the external IPG.

#### 8. **Revise Refund Handling in `PaymentService`**
- **Issue**: The refund logic (`process_refund()`) in the refactored `PaymentService` appears simplified compared to the original.
- **Action**: Update `PaymentService` to include more comprehensive refund handling logic.
  - Reintroduce validation checks, logging, and API call management as seen in the old codebase.
  - Ensure refunds are processed using the `APIHandler` and are consistent with the original flow.

#### 9. **Add Consistent Exception Handling**
- **Issue**: Custom exception handling (`NovaBankaIPGException`) is present, but it is not consistently applied across all classes.
- **Action**: Ensure `NovaBankaIPGException` is used uniformly across the codebase.
  - Replace generic PHP exceptions with `NovaBankaIPGException` where applicable.
  - Make sure each exception includes meaningful messages and additional context for easier debugging.

#### 10. **Adjust WooCommerce Hooks and Settings Initialization**
- **Issue**: Some WooCommerce-specific hooks and settings (e.g., for receipt pages or order processing) might not have been transferred.
- **Action**:
  - Review WooCommerce hook initialization in `NovaBankaIPGGateway` to make sure all previously supported hooks are in place.
  - Reintroduce receipt page and order status hooks as necessary.

class-novabankaipg.php *main plugin file*
  /assets/
    /js
      ipg-admin.js
      ipg-scripts.js
    /css
    ipg-admin.css
      ipg-styles.css
  /includes
    /Core
      class-novabankaipggateway.php        // Only handles WooCommerce integration.
    /Services
      class-paymentservice.php             // Payment business logic.
      class-notificationservice.php        // Manages incoming callbacks and notifications.
  /Utils
    class-apihandler.php                 // HTTP communication.
    class-logger.php                     // Logging utility, includes log levels.
    class-config.php                     // Configuration handling.
    class-datahandler.php                // Data formatting and validation.
    class-threedshandler.php             // Handles 3DS processing.
  /Exceptions
    class-novabankaipgexception.php      // Custom exception handling.

Various other developer notes and ASoft notes are in the codebase. This SOC To Do List is based on the code comparison and the notes.

### Summary
This to-do list is designed to fully integrate the key elements from the old codebase into the new refactored structure, ensuring alignment with the SoC principles. The steps focus on improving utility handling, ensuring comprehensive error management, reinstating key functional parts (e.g., data and 3D Secure handlers), and enhancing consistency across the codebase, all while following WooCommerce and WordPress best practices.
</file>

</repository_files>
