This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T19:36:22.180Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
assets/
  css/
    ipg-admin.css
    ipg-styles.css
  js/
    ipg-admin.js
    ipg-scripts.js
includes/
  Core/
    class-novabankaipggateway.php
  Exceptions/
    class-novabankaipgexception.php
  Interfaces/
    interface-api-handler.php
    interface-data-handler.php
    interface-logger.php
  Services/
    class-notificationservice.php
    class-paymentservice.php
  Utils/
    class-apihandler.php
    class-config.php
    class-datahandler.php
    class-logger.php
    class-messagehandler.php
    class-threedshandler.php
.cursorignore
.cursorrules
.gitignore
Asoft IPG 3DS eCommerce Transaction flow.md
AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt
class-novabankaipg.php
developer-documentation.md
developer-redirect-payment.md
developer-strategy.md
developer-woo-ipg-logic.md
developer-woocommerce-payment-async-two-processes.md
developer-woocommerce-payment-async.md
ipg-gateway-example-php.md
Simplified Plan for Seperation of Concerns SOC.md
Simplified Plan for SOC To Do List.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="assets/css/ipg-admin.css">
/* assets/css/ipg-admin.css */

.ipg-admin-section {
    padding: 20px;
    background: #fff;
    border: 1px solid #ddd;
    margin: 10px 0;
}

.ipg-field-row {
    margin: 15px 0;
}

.ipg-field-row label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
}

.ipg-field-row input[type="text"],
.ipg-field-row input[type="password"] {
    width: 400px;
    max-width: 100%;
}

.ipg-field-description {
    color: #666;
    font-style: italic;
    margin-top: 5px;
}

.ipg-test-mode-notice {
    background: #fff8e5;
    border-left: 4px solid #ffb900;
    padding: 10px;
    margin: 10px 0;
}

/* Transaction details table */
.ipg-transaction-details {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
}

.ipg-transaction-details th,
.ipg-transaction-details td {
    padding: 8px;
    text-align: left;
    border: 1px solid #ddd;
}

.ipg-transaction-details th {
    background: #f8f8f8;
}
</file>

<file path="assets/css/ipg-styles.css">
/* assets/css/ipg-styles.css */

/* Payment form styling */
.ipg-payment-form {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
}

/* Loading overlay for redirect */
.ipg-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.ipg-loading-overlay.active {
    display: flex;
}

.ipg-loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

/* Payment status messages */
.ipg-status-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
}

.ipg-status-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.ipg-status-error {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Animation keyframes */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</file>

<file path="assets/js/ipg-admin.js">
// assets/js/ipg-admin.js

(function($) {
    'use strict';

    const NovaBankaIPGAdmin = {
        init: function() {
            this.initializeTooltips();
            this.handleTestMode();
            this.initializeValidation();
        },

        initializeTooltips: function() {
            $('.ipg-help-tip').tipTip({
                'attribute': 'data-tip',
                'fadeIn': 50,
                'fadeOut': 50,
                'delay': 200
            });
        },

        handleTestMode: function() {
            const testModeCheckbox = $('#woocommerce_novabankaipg_testmode');
            const credentialsSection = $('.ipg-credentials-section');

            testModeCheckbox.on('change', function() {
                if ($(this).is(':checked')) {
                    credentialsSection.before(
                        '<div class="ipg-test-mode-notice">' +
                        'Test mode is enabled - test credentials will be used.' +
                        '</div>'
                    );
                } else {
                    $('.ipg-test-mode-notice').remove();
                }
            });

            // Trigger on page load
            testModeCheckbox.trigger('change');
        },

        initializeValidation: function() {
            const form = $('form#mainform');

            form.on('submit', function(e) {
                const terminal_id = $('#woocommerce_novabankaipg_terminal_id').val();
                const terminal_password = $('#woocommerce_novabankaipg_terminal_password').val();
                const secret_key = $('#woocommerce_novabankaipg_secret_key').val();

                if ($('#woocommerce_novabankaipg_enabled').is(':checked')) {
                    if (!terminal_id || !terminal_password || !secret_key) {
                        e.preventDefault();
                        alert('Please provide all required credentials for the payment gateway.');
                        return false;
                    }
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPGAdmin.init();
    });

})(jQuery);
</file>

<file path="assets/js/ipg-scripts.js">
(function($) {
    'use strict';

    const NovaBankaIPG = {
        init: function() {
            this.form = $('form.checkout');
            this.submitButton = $('button#place_order');
            this.loadingOverlay = $('.ipg-loading-overlay');
            this.initializeEvents();
        },

        initializeEvents: function() {
            // Handle form submission
            this.form.on('checkout_place_order_novabankaipg', this.handleSubmit.bind(this));

            // Handle HPP return
            if (window.location.href.indexOf('novabankaipg-return') > -1) {
                this.handleReturn();
            }
        },

        handleSubmit: function() {
            this.showLoading();
            return true; // Allow form submission
        },

        showLoading: function() {
            this.loadingOverlay.addClass('active');
            this.submitButton.prop('disabled', true);
        },

        hideLoading: function() {
            this.loadingOverlay.removeClass('active');
            this.submitButton.prop('disabled', false);
        },

        handleReturn: function() {
            // Handle return from HPP
            const urlParams = new URLSearchParams(window.location.search);
            const status = urlParams.get('payment_status');

            if (status === 'success') {
                this.showMessage('Payment completed successfully.', 'success');
            } else if (status === 'cancel') {
                this.showMessage('Payment was cancelled.', 'error');
            } else if (status === 'error') {
                this.showMessage('Payment failed. Please try again.', 'error');
            }
        },

        showMessage: function(message, type) {
            // Remove existing messages
            $('.woocommerce-error, .woocommerce-message, .ipg-status-message').remove();

            // Create message element using WooCommerce classes for consistency
            const messageHtml = type === 'success' 
                ? `<div class="woocommerce-message">${message}</div>`
                : `<div class="woocommerce-error">${message}</div>`;
            
            // Add message to WooCommerce notices wrapper
            $('.woocommerce-notices-wrapper').first().html(messageHtml);

            // Scroll to message
            $('html, body').animate({
                scrollTop: $('.woocommerce-notices-wrapper').first().offset().top - 100
            }, 500);
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPG.init();
    });

})(jQuery);
</file>

<file path="includes/Core/class-novabankaipggateway.php">
<?php
/**
 * NovaBanka IPG Gateway Class
 *
 * This class integrates the NovaBanka IPG into WooCommerce.
 * Handles payment settings, order processing, and general WooCommerce compatibility.
 *
 * @package NovaBankaIPG\Core
 * @since 1.0.1
 */

namespace NovaBankaIPG\Core;

use NovaBankaIPG\Services\PaymentService;
use NovaBankaIPG\Services\NotificationService;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use WC_Payment_Gateway;
use Exception;

class NovaBankaIPGGateway extends WC_Payment_Gateway {
	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	protected $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	protected $logger;

	/**
	 * Payment Service instance.
	 *
	 * @var PaymentService
	 */
	protected $payment_service;

	/**
	 * Notification Service instance.
	 *
	 * @var NotificationService
	 */
	protected $notification_service;

	/**
	 * Constructor for the gateway.
	 *
	 * @param APIHandler|null $api_handler The API handler instance.
	 * @param Logger|null     $logger The logger instance.
	 */
	public function __construct( APIHandler $api_handler = null, Logger $logger = null ) {
		$this->id                 = 'novabankaipg';
		$this->has_fields         = true;
		$this->method_title       = __( 'NovaBanka IPG', 'novabanka-ipg-gateway' );
		$this->method_description = __( 'Accept payments through NovaBanka IPG gateway with 3D Secure.', 'novabanka-ipg-gateway' );

		// Initialize dependencies.
		$this->api_handler = $api_handler ?? new APIHandler(); // Use provided API handler or create a new one.
		$this->logger      = $logger ?? new Logger(); // Use provided Logger or create a new one.

		// Initialize PaymentService and NotificationService.
		$this->payment_service      = new PaymentService( $this->api_handler, $this->logger );
		$this->notification_service = new NotificationService( $this->api_handler, $this->logger );

		// Load settings using Config utility.
		$this->init_form_fields(); // Initialize the settings form fields for the payment gateway.
		$this->init_settings(); // Load current settings from WooCommerce.

		// Add hooks for receipt and IPN notifications.
		add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) ); // Hook for saving settings in the admin panel.
		add_action( 'woocommerce_receipt_' . $this->id, array( $this, 'receipt_page' ) ); // Hook for displaying the receipt page after checkout.
		add_action( 'woocommerce_api_wc_' . $this->id, array( $this, 'handle_notification_callback' ) ); // Hook for handling IPN notifications from NovaBanka IPG.
	}

	/**
	 * Initialize gateway settings form fields.
	 *
	 * This method defines the form fields for the payment gateway settings in WooCommerce.
	 */
	public function init_form_fields() {
		$this->form_fields = array(
			'enabled'     => array(
				'title'   => __( 'Enable/Disable', 'novabanka-ipg-gateway' ),
				'type'    => 'checkbox',
				'label'   => __( 'Enable NovaBanka IPG Payment Gateway', 'novabanka-ipg-gateway' ),
				'default' => Config::get_setting( 'enabled' ) ?? 'no',
			),
			'title'       => array(
				'title'       => __( 'Title', 'novabanka-ipg-gateway' ),
				'type'        => 'text',
				'description' => __( 'The title the user sees during checkout.', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'title' ) ?? __( 'NovaBanka IPG', 'novabanka-ipg-gateway' ),
				'desc_tip'    => true,
			),
			'description' => array(
				'title'       => __( 'Description', 'novabanka-ipg-gateway' ),
				'type'        => 'textarea',
				'description' => __( 'The description the user sees during checkout.', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'description' ) ?? __( 'Pay securely using NovaBanka IPG.', 'novabanka-ipg-gateway' ),
			),
			'test_mode'   => array(
				'title'       => __( 'Test Mode', 'novabanka-ipg-gateway' ),
				'type'        => 'checkbox',
				'label'       => __( 'Enable Test Mode', 'novabanka-ipg-gateway' ),
				'default'     => Config::get_setting( 'test_mode' ) ?? 'yes',
				'description' => __( 'Place the payment gateway in test mode to simulate transactions.', 'novabanka-ipg-gateway' ),
			),
		);
	}

	/**
	 * Process the payment for an order.
	 *
	 * @param int $order_id Order ID.
	 * @return array|
	 * @throws Exception When payment processing fails.
	 *
	 * This method is called when a customer places an order and chooses this payment gateway.
	 */
	public function process_payment( $order_id ) {
		try {
			$order = wc_get_order( $order_id ); // Retrieve the WooCommerce order by ID.

			// Check if the gateway is in test mode and log accordingly.
			if ( Config::is_test_mode() ) {
				$this->logger->info( 'Processing payment in test mode.', array( 'order_id' => $order_id ) );
			}

			// Use PaymentService to initialize the payment.
			$response = $this->payment_service->initialize_payment( $order );

			// Store payment ID and redirect user to the payment gateway.
			$order->update_status( 'on-hold', __( 'Awaiting payment gateway response.', 'novabanka-ipg-gateway' ) );
			$this->logger->info(
				'Payment process initialized.',
				array(
					'order_id' => $order_id,
					'response' => $response,
				)
			);
			return array(
				'result'   => 'success',
				'redirect' => $response['browserRedirectionURL'], // Redirect customer to the payment gateway.
			);
		} catch ( Exception $e ) {
			// Log the error and notify the customer.
			$this->logger->error(
				'Payment process failed.',
				array(
					'order_id' => $order_id,
					'error'    => $e->getMessage(),
				)
			);
			wc_add_notice( __( 'Payment error: ', 'novabanka-ipg-gateway' ) . $e->getMessage(), 'error' );
			return array(
				'result' => 'failure',
			);
		}
	}

	/**
	 * Receipt page.
	 *
	 * @param int $order_id Order ID.
	 *
	 * This method displays the receipt page where customers can proceed to payment after placing an order.
	 */
	public function receipt_page( $order_id ) {
		echo '<p>' . esc_html__( 'Thank you for your order, please click the button below to pay.', 'novabanka-ipg-gateway' ) . '</p>';
		echo '<button id="novabanka-ipg-pay-button">' . esc_html__( 'Proceed to Payment', 'novabanka-ipg-gateway' ) . '</button>'; // Display the payment button.
	}

	/**
	 * Handle notification callback from IPG.
	 *
	 * This method is called when the IPG sends a notification regarding payment status.
	 * It verifies the notification and updates the order accordingly.
	 */
	public function handle_notification_callback() {
		try {
			$notification_data = $_POST; // Assuming IPG sends POST data.

			// Log if in test mode.
			if ( Config::is_test_mode() ) {
				$this->logger->info( 'Handling notification in test mode.', array( 'notification_data' => $notification_data ) );
			}

			// Use NotificationService to handle the notification.
			$this->notification_service->handle_notification( $notification_data );

			// Respond to IPG to confirm successful processing.
			http_response_code( 200 );
			$this->logger->info( 'Notification callback handled successfully.', array( 'notification_data' => $notification_data ) );
			echo 'OK';
		} catch ( Exception $e ) {
			// Log the error and respond with failure.
			$this->logger->error(
				'Notification callback handling failed.',
				array(
					'error' => $e->getMessage(),
				)
			);
			http_response_code( 500 );
			echo 'FAIL';
		}
	}
}
</file>

<file path="includes/Exceptions/class-novabankaipgexception.php">
<?php
/**
 * Custom Exception Handler
 *
 * @package     NovaBankaIPG\Exceptions
 * @since       1.0.0
 */

namespace NovaBankaIPG\Exceptions;

defined( 'ABSPATH' ) || exit;

/**
 * NovaBankaIPGException Class
 *
 * Custom exception class for handling IPG specific errors.
 *
 * @since 1.0.0
 */
class NovaBankaIPGException extends \Exception {
	/**
	 * Error codes and their messages
	 */
	/**
	 * Error codes mapping
	 */
	private const ERROR_CODES = array(
		// API Errors.
		'API_ERROR'             => array(
			'code'    => 1000,
			'message' => 'API communication error',
		),
		'INVALID_RESPONSE'      => array(
			'code'    => 1001,
			'message' => 'Invalid response from gateway',
		),
		'INVALID_SIGNATURE'     => array(
			'code'    => 1002,
			'message' => 'Invalid message signature',
		),

		// Validation Errors.
		'INVALID_AMOUNT'        => array(
			'code'    => 2000,
			'message' => 'Invalid amount format or value',
		),
		'INVALID_CURRENCY'      => array(
			'code'    => 2001,
			'message' => 'Unsupported currency',
		),
		'MISSING_FIELD'         => array(
			'code'    => 2002,
			'message' => 'Required field missing',
		),

		// Payment Errors.
		'PAYMENT_FAILED'        => array(
			'code'    => 3000,
			'message' => 'Payment failed',
		),
		'PAYMENT_CANCELLED'     => array(
			'code'    => 3001,
			'message' => 'Payment cancelled by user',
		),
		'3DS_ERROR'             => array(
			'code'    => 3002,
			'message' => '3D Secure authentication failed',
		),

		// Order Errors.
		'ORDER_NOT_FOUND'       => array(
			'code'    => 4000,
			'message' => 'Order not found',
		),
		'INVALID_ORDER_STATE'   => array(
			'code'    => 4001,
			'message' => 'Invalid order state',
		),

		// Configuration Errors.
		'INVALID_CONFIGURATION' => array(
			'code'    => 5000,
			'message' => 'Invalid gateway configuration',
		),
	);

	/**
	 * Additional error data
	 *
	 * @var mixed
	 */
	private $error_data;

	/**
	 * Error type
	 *
	 * @var string
	 */
	private $error_type;

	/**
	 * Constructor
	 *
	 * @param string          $message    Error message.
	 * @param string          $error_type Error type from ERROR_CODES.
	 * @param mixed           $error_data Additional error data.
	 * @param \Throwable|null $previous   Previous exception.
	 */
	public function __construct(
		string $message = '',
		string $error_type = 'API_ERROR',
		$error_data = null,
		\Throwable $previous = null
	) {
		$error_code = self::ERROR_CODES[ $error_type ]['code'] ?? 1000;
		parent::__construct(
			$message,
			$error_code,
			$previous
		);
		$this->error_type = $error_type;
		$this->error_data = $error_data;
	}

	/**
	 * Get error data
	 *
	 * @return mixed
	 */
	public function getErrorData() {
		return $this->error_data;
	}

	/**
	 * Get error type
	 *
	 * @return string
	 */
	public function getErrorType(): string {
		return $this->error_type;
	}

	/**
	 * Create API error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function apiError( string $message = '', $data = null ): self {
		$exception             = new self( $message, self::ERROR_CODES['API_ERROR']['code'] );
		$exception->error_type = 'API_ERROR';
		$exception->error_data = $data;
		return $exception;
	}

	/**
	 * Create validation error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function validationError( string $message = '', $data = null ): self {
		return new self( $message, 'MISSING_FIELD', $data );
	}

	/**
	 * Create payment error exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function paymentError( string $message = '', $data = null ): self {
		return new self( $message, 'PAYMENT_FAILED', $data );
	}

	/**
	 * Get additional error data.
	 *
	 * @return mixed
	 */
	public function getData() {
		return $this->error_data;
	}

	/**
	 * Get error type.
	 *
	 * @return string
	 */
	public function getType() {
		return $this->error_type;
	}

	/**
	 * Create an invalid signature exception
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function invalidSignature( string $message, $data = null ): self {
		$exception             = new self( $message, self::ERROR_CODES['INVALID_SIGNATURE']['code'] );
		$exception->error_type = 'INVALID_SIGNATURE';
		$exception->error_data = $data;
		return $exception;
	}
}
</file>

<file path="includes/Interfaces/interface-api-handler.php">
<?php
/**
 * Interface for API Handler
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.0
 */

namespace NovaBankaIPG\Interfaces;

interface APIHandlerInterface {
	/**
	 * Send PaymentInit request to IPG
	 *
	 * @param array $data Payment initialization data.
	 * @return array
	 * @throws NovaBankaIPG\Exceptions\NovaBankaIPGException If the payment initialization fails.
	 */
	public function send_payment_init( array $data ): array;

	/**
	 * Verify payment notification
	 *
	 * @param array $notification Notification data.
	 * @return bool
	 * @throws NovaBankaIPG\Exceptions\NovaBankaIPGException If the notification verification fails.
	 */
	public function verify_notification( array $notification ): bool;

	/**
	 * Generate notification response
	 *
	 * @param string $payment_id  Payment ID.
	 * @param string $redirect_url Redirect URL.
	 * @return array
	 */
	public function generate_notification_response( string $payment_id, string $redirect_url ): array;

	/**
	 * Set API configuration
	 *
	 * @param array $config API configuration.
	 * @return void
	 */
	public function set_config( array $config ): void;
}
</file>

<file path="includes/Interfaces/interface-data-handler.php">
<?php
/**
 * Defines the DataHandler interface for managing data operations
 *
 * @package NovaBankaIPG\Interfaces
 */

namespace NovaBankaIPG\Interfaces;

interface DataHandler {
	/**
	 * Format amount for IPG.
	 *
	 * @param float $amount Amount to format.
	 * @return string Formatted amount.
	 */
	public function format_amount( float $amount ): string;

	/**
	 * Format phone number.
	 *
	 * @param string $phone Phone number to format.
	 * @return string|null Formatted phone number or null if not formatted.
	 */
	public function format_phone( string $phone ): ?string;

	/**
	 * Format item amount.
	 *
	 * @param float $amount Amount to format.
	 * @param int   $quantity Quantity to format.
	 * @return string Formatted amount.
	 */
	public function format_item_amount( float $amount, int $quantity = 1 ): string;

	/**
	 * Validate language code.
	 *
	 * @param string $lang_code Language code to validate.
	 * @return string Validated language code.
	 */
	public function validate_language_code( string $lang_code ): string;
}
</file>

<file path="includes/Interfaces/interface-logger.php">
<?php
/**
 * Logger Interface
 *
 * @package     NovaBankaIPG\Interfaces
 * @since       1.0.0
 */

namespace NovaBankaIPG\Interfaces;

defined( 'ABSPATH' ) || exit;

/**
 * Logger Interface
 *
 * @since 1.0.0
 */
interface Logger {
	/**
	 * Log debug message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function debug( string $message, array $context = array() ): void;

	/**
	 * Log info message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function info( string $message, array $context = array() ): void;

	/**
	 * Log warning message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function warning( string $message, array $context = array() ): void;

	/**
	 * Log error message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function error( string $message, array $context = array() ): void;

	/**
	 * Log critical message
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function critical( string $message, array $context = array() ): void;

	/**
	 * Log payment process
	 *
	 * @param string $status  Payment status.
	 * @param string $message Status message.
	 * @param array  $context Additional context.
	 * @return void
	 */
	public function log_payment( string $status, string $message, array $context = array() ): void;
}
</file>

<file path="includes/Services/class-notificationservice.php">
<?php
/**
 * NotificationService Class
 *
 * This class is responsible for handling all payment notification-related logic.
 * It verifies notifications from the NovaBanka IPG and processes orders accordingly.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

class NotificationService {
	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor for the NotificationService class.
	 *
	 * @param APIHandler $api_handler API handler instance.
	 * @param Logger     $logger Logger instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger ) {
		$this->api_handler = $api_handler;
		$this->logger      = $logger;
	}

	/**
	 * Handle IPG payment notification.
	 *
	 * @param array $notification_data The data received from the IPG notification.
	 * @return void
	 * @throws NovaBankaIPGException When the notification handling fails.
	 */
	public function handle_notification( array $notification_data ) {
		try {
			// Verify notification signature.
			if ( ! $this->verify_signature( $notification_data, $notification_data['msgVerifier'] ) ) {
				throw new NovaBankaIPGException( 'Invalid notification signature.' );
			}

			$order_id = $notification_data['trackid'];
			$order    = wc_get_order( $order_id );

			if ( ! $order ) {
				throw new NovaBankaIPGException( 'Order not found for ID: ' . esc_html( $order_id ) );
			}

			// Process the notification based on the result.
			switch ( $notification_data['result'] ) {
				case 'CAPTURED':
					$this->process_successful_payment( $order, $notification_data );
					$this->logger->info(
						'Payment captured successfully.',
						array(
							'order_id'          => $order_id,
							'notification_data' => $notification_data,
						)
					);
					break;
				case 'DECLINED':
					$this->process_declined_payment( $order, $notification_data );
					$this->logger->warning(
						'Payment was declined.',
						array(
							'order_id'          => $order_id,
							'notification_data' => $notification_data,
						)
					);
					break;
				case 'FAILED':
					$this->process_failed_payment( $order, $notification_data );
					$this->logger->error(
						'Payment failed.',
						array(
							'order_id'          => $order_id,
							'notification_data' => $notification_data,
						)
					);
					break;
				default:
					throw new NovaBankaIPGException( 'Unknown payment result: ' . esc_html( $notification_data['result'] ) );
			}
		} catch ( Exception $e ) {
			$this->logger->error(
				'Notification handling failed.',
				array(
					'notification_data' => $notification_data,
					'error'             => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( 'Notification handling failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Verify the notification signature.
	 *
	 * @param array  $notification_data The data from the notification.
	 * @param string $signature The expected signature for validation.
	 * @return bool True if the signature is valid, false otherwise.
	 */
	private function verify_signature( array $notification_data, string $signature ) {
		// Generate the expected signature using a secret key and notification data.
		$expected_signature = hash( 'sha256', json_encode( $notification_data ) . Config::get_setting( 'secret_key' ) );
		return hash_equals( $expected_signature, $signature );
	}

	/**
	 * Process successful payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_successful_payment( WC_Order $order, array $notification_data ) {
		$order->payment_complete( $notification_data['tranid'] );
		$order->add_order_note(
			sprintf(
				__( 'Payment completed successfully. Transaction ID: %1$s, Auth Code: %2$s', 'novabanka-ipg-gateway' ),
				$notification_data['tranid'],
				$notification_data['auth']
			)
		);
		$order->update_meta_data( '_novabankaipg_auth_code', $notification_data['auth'] );
		$order->update_meta_data( '_novabankaipg_card_type', $notification_data['cardtype'] ?? 'unknown' );
		$order->update_meta_data( '_novabankaipg_card_last4', $notification_data['cardLastFourDigits'] );
		$order->update_meta_data( '_novabankaipg_payment_reference', $notification_data['paymentReference'] ?? 'N/A' );
		$order->save();
	}

	/**
	 * Process declined payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_declined_payment( WC_Order $order, array $notification_data ) {
		$order->update_status(
			'on-hold',
			sprintf(
				__( 'Payment was declined. Result: %1$s, Code: %2$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A'
			)
		);
	}

	/**
	 * Process failed payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_failed_payment( WC_Order $order, array $notification_data ) {
		$order->update_status(
			'failed',
			sprintf(
				__( 'Payment failed. Result: %1$s, Code: %2$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A'
			)
		);
	}
}
</file>

<file path="includes/Services/class-paymentservice.php">
<?php
/**
 * Payment Service Class
 *
 * This class is responsible for handling all payment-related logic.
 * It handles payment initialization, refunds, and verification with the NovaBanka IPG.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

class PaymentService {
	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor for the PaymentService class.
	 *
	 * @param APIHandler $api_handler API handler instance.
	 * @param Logger     $logger Logger instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger ) {
		$this->api_handler = $api_handler;
		$this->logger      = $logger;
	}

	/**
	 * Initialize a payment for an order.
	 *
	 * @param WC_Order $order The WooCommerce order object.
	 * @return array Response data from the payment initialization.
	 * @throws NovaBankaIPGException When payment initialization fails.
	 */
	public function initialize_payment( WC_Order $order ) {
		try {
			// Retrieve currency and language from settings if needed.
			$currency = Config::get_setting( 'currency' ) ?? $order->get_currency();
			$language = Config::get_setting( 'language' ) ?? 'EN';

			// Prepare payment data.
			$payment_data = array(
				'trackid'      => $order->get_id(),
				'amount'       => $order->get_total(),
				'currency'     => $currency,
				'response_url' => $order->get_checkout_payment_url( true ),
				'error_url'    => $order->get_checkout_payment_url( false ),
				'language'     => $language,
				'secret_key'   => Config::get_setting( 'secret_key' ), // Include secret key for request security.
			);

			// Call the API handler to initialize the payment.
			$response = $this->api_handler->send_payment_init( $payment_data );

			// Log successful initialization.
			$this->logger->info(
				'Payment initialized successfully.',
				array(
					'order_id' => $order->get_id(),
					'response' => $response,
				)
			);

			return $response;
		} catch ( Exception $e ) {
			// Log the error and throw an exception.
			$this->logger->error(
				'Payment initialization failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( 'Payment initialization failed: ' . $e->getMessage() );
		}
	}

	/**
	 * Refund a payment for an order.
	 *
	 * @param WC_Order $order The WooCommerce order object.
	 * @param float    $amount Amount to refund.
	 * @return array Response data from the refund request.
	 * @throws NovaBankaIPGException When the refund process fails.
	 */
	public function process_refund( WC_Order $order, float $amount ) {
		try {
			// Validate the refund amount.
			if ( $amount > $order->get_total() ) {
				throw new NovaBankaIPGException( 'Refund amount exceeds the original order total.' );
			}

			if ( $amount <= 0 ) {
				throw new NovaBankaIPGException( 'Refund amount must be greater than zero.' );
			}

			// Prepare refund data.
			$refund_data = array(
				'trackid'    => $order->get_id(),
				'amount'     => $amount,
				'currency'   => $order->get_currency(),
				'tranid'     => $order->get_transaction_id(), // Include transaction ID for better traceability.
				'secret_key' => Config::get_setting( 'secret_key' ), // Include secret key for request security.
			);

			// Call the API handler to process the refund.
			$response = $this->api_handler->process_refund( $refund_data );

			// Update WooCommerce order status if the refund is successful.
			$order->add_order_note(
				sprintf(
					__( 'Refund processed successfully. Amount: %1$s %2$s. Transaction ID: %3$s', 'novabanka-ipg-gateway' ),
					$amount,
					$order->get_currency(),
					$response['tranid'] ?? 'N/A'
				)
			);

			// Log successful refund.
			$this->logger->info(
				'Refund processed successfully.',
				array(
					'order_id' => $order->get_id(),
					'response' => $response,
				)
			);

			return $response;
		} catch ( Exception $e ) {
			// Log the error and throw an exception.
			$this->logger->error(
				'Refund process failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( 'Refund process failed: ' . $e->getMessage() );
		}
	}
}
</file>

<file path="includes/Utils/class-apihandler.php">
<?php
/**
 * APIHandler Utility Class
 *
 * This class is responsible for managing HTTP communication with the NovaBanka IPG API.
 * It abstracts all the API requests and responses, focusing only on interactions with the IPG endpoints.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WP_Error;

class APIHandler {
	/**
	 * Send payment initialization request to the IPG API.
	 *
	 * @param array $payment_data The data for initializing payment.
	 * @return array The response from the IPG API.
	 * @throws NovaBankaIPGException If the request fails or returns an error.
	 */
	public function send_payment_init( array $payment_data ) {
		$endpoint = Config::is_test_mode() ? Config::get_setting( 'test_api_url' ) : Config::get_setting( 'live_api_url' );
		$url      = rtrim( $endpoint, '/' ) . '/payment-init';

		$response = wp_remote_post(
			$url,
			array(
				'body'    => json_encode( $payment_data ),
				'headers' => array(
					'Content-Type' => 'application/json',
				),
			)
		);

		return $this->handle_response( $response );
	}

	/**
	 * Send refund request to the IPG API.
	 *
	 * @param array $refund_data The data for processing a refund.
	 * @return array The response from the IPG API.
	 * @throws NovaBankaIPGException If the request fails or returns an error.
	 */
	public function process_refund( array $refund_data ) {
		$endpoint = Config::is_test_mode() ? Config::get_setting( 'test_api_url' ) : Config::get_setting( 'live_api_url' );
		$url      = rtrim( $endpoint, '/' ) . '/refund';

		$response = wp_remote_post(
			$url,
			array(
				'body'    => json_encode( $refund_data ),
				'headers' => array(
					'Content-Type' => 'application/json',
				),
			)
		);

		return $this->handle_response( $response );
	}

	/**
	 * Verify payment notification from the IPG.
	 *
	 * @param array $notification_data The data received from IPG to verify.
	 * @return bool True if notification verification is successful, false otherwise.
	 * @throws NovaBankaIPGException If the verification fails.
	 */
	public function verify_notification( array $notification_data ) {
		// Verification logic, for example using a shared secret to validate the notification.
		$expected_signature = hash( 'sha256', json_encode( $notification_data ) . Config::get_setting( 'secret_key' ) );
		return hash_equals( $expected_signature, $notification_data['msgVerifier'] );
	}

	/**
	 * Handle the response from an API request.
	 *
	 * @param array|WP_Error $response The response from wp_remote_post or wp_remote_get.
	 * @return array The decoded response body.
	 * @throws NovaBankaIPGException If the response contains errors.
	 */
	private function handle_response( $response ) {
		if ( is_wp_error( $response ) ) {
			throw new NovaBankaIPGException( 'API request failed: ' . $response->get_error_message() );
		}

		$response_code = wp_remote_retrieve_response_code( $response );
		$response_body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( $response_code < 200 || $response_code >= 300 ) {
			throw new NovaBankaIPGException( 'API request returned error code ' . $response_code . ': ' . json_encode( $response_body ) );
		}

		return $response_body;
	}
}
</file>

<file path="includes/Utils/class-config.php">
<?php
/**
 * Config Utility Class
 *
 * This class is responsible for managing the plugin configuration settings.
 * It provides methods to retrieve and update configuration options for the NovaBanka IPG plugin.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

class Config {
	/**
	 * Retrieve a setting value by key.
	 *
	 * @param string $key The setting key to retrieve.
	 * @return mixed The setting value or null if not found.
	 */
	public static function get_setting( $key ) {
		$settings = get_option( 'woocommerce_novabankaipg_settings', array() );
		return $settings[ $key ] ?? null;
	}

	/**
	 * Retrieve all plugin settings.
	 *
	 * @return array All settings as an associative array.
	 */
	public static function get_all_settings() {
		return get_option( 'woocommerce_novabankaipg_settings', array() );
	}

	/**
	 * Update a specific plugin setting.
	 *
	 * @param string $key The setting key to update.
	 * @param mixed  $value The new value for the setting.
	 * @return bool True on success, false on failure.
	 */
	public static function update_setting( $key, $value ) {
		$settings         = get_option( 'woocommerce_novabankaipg_settings', array() );
		$settings[ $key ] = $value;
		return update_option( 'woocommerce_novabankaipg_settings', $settings );
	}

	/**
	 * Determine if the plugin is in test mode.
	 *
	 * @return bool True if test mode is enabled, false otherwise.
	 */
	public static function is_test_mode() {
		return self::get_setting( 'test_mode' ) === 'yes';
	}

	/**
	 * Determine if debug logging is enabled.
	 *
	 * @return bool True if debug logging is enabled, false otherwise.
	 */
	public static function is_debug_mode() {
		return self::get_setting( 'debug' ) === 'yes';
	}
}
</file>

<file path="includes/Utils/class-datahandler.php">
<?php
/**
 * DataHandler Utility Class
 *
 * This class is responsible for handling various data formatting and validation processes,
 * such as formatting payment amounts, phone numbers, item quantities, and validating language codes.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;

class DataHandler {
	/**
	 * Currency codes mapping as per IPG specs.
	 *
	 * @var array
	 */
	protected const CURRENCY_CODES = array(
		'EUR' => '978',
		'USD' => '840',
		'GBP' => '826',
		'BAM' => '977',
	);

	/**
	 * Maximum field lengths as per IPG specs.
	 *
	 * @var array
	 */
	protected const FIELD_LENGTHS = array(
		'phone'    => 20,
		'email'    => 255,
		'amount'   => 10,  // Plus 2 decimals.
		'name'     => 50,
		'address1' => 100,
		'address2' => 100,
		'address3' => 40,
		'city'     => 40,
		'zip'      => 20,
	);

	/**
	 * Format the payment amount to the required decimal places.
	 *
	 * @param float|string $amount Amount to format.
	 * @return string
	 * @throws NovaBankaIPGException If the amount is not numeric or exceeds the maximum allowed value.
	 */
	public function format_amount( $amount ) {
		// Remove any existing formatting.
		$amount = str_replace( array( ',', ' ' ), '', (string) $amount );

		if ( ! is_numeric( $amount ) ) {
			throw NovaBankaIPGException::invalidRequest( 'Invalid amount format.' );
		}

		$amount = (float) $amount;

		// Check maximum value.
		if ( $amount > 9999999999.99 ) {
			throw NovaBankaIPGException::invalidRequest( 'Amount exceeds maximum allowed value.' );
		}

		// Format with exactly 2 decimal places.
		return number_format( $amount, 2, '.', '' );
	}

	/**
	 * Format a phone number to the expected format for API communication.
	 *
	 * @param string $phone_number The phone number to format.
	 * @return string|null
	 */
	public static function format_phone( $phone_number ) {
		if ( empty( $phone_number ) ) {
			return null;
		}

		// Remove everything except numbers and +.
		$phone_number = preg_replace( '/[^0-9+]/', '', $phone_number );

		// Ensure + is only at the start.
		$phone_number = preg_replace( '/(?!^)\+/', '', $phone_number );

		// Truncate to max length defined in FIELD_LENGTHS.
		return substr( $phone_number, 0, self::FIELD_LENGTHS['phone'] );
	}

	/**
	 * Format email according to IPG specifications.
	 *
	 * @param string $email Email address.
	 * @return string|null
	 */
	public function format_email( $email ) {
		$email = sanitize_email( $email );

		if ( ! is_email( $email ) ) {
			return null;
		}

		// Truncate to max length defined in FIELD_LENGTHS.
		return substr( $email, 0, self::FIELD_LENGTHS['email'] );
	}

	/**
	 * Validate the language code to ensure it meets expected standards.
	 *
	 * @param string $language_code The language code to validate.
	 * @return bool True if the language code is valid, false otherwise.
	 */
	public static function validate_language_code( $language_code ) {
		// Ensure language code is two or three letters (e.g., 'EN', 'FR', 'ESP').
		return preg_match( '/^[a-zA-Z]{2,3}$/', $language_code ) === 1;
	}

	/**
	 * Format the item quantity to an integer value.
	 *
	 * @param float $quantity The quantity to format.
	 * @return int The formatted item quantity.
	 */
	public static function format_quantity( $quantity ) {
		return (int) $quantity;
	}

	/**
	 * Get currency code based on the currency name.
	 *
	 * @param string $currency Currency name (e.g., 'EUR', 'USD').
	 * @return string|null Currency code or null if not found.
	 */
	public function get_currency_code( $currency ) {
		return self::CURRENCY_CODES[ $currency ] ?? null;
	}
}
</file>

<file path="includes/Utils/class-logger.php">
<?php
/**
 * Logger Utility Class
 *
 * This class is responsible for managing all logging for the NovaBanka IPG plugin.
 * It uses WordPress's built-in WC_Logger to handle different levels of logging based on plugin settings.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use WC_Logger;

class Logger {
	/**
	 * Logger instance.
	 *
	 * @var WC_Logger
	 */
	private $logger;

	/**
	 * Constructor for the Logger utility class.
	 */
	public function __construct() {
		$this->logger = new WC_Logger();
	}

	/**
	 * Log informational messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function info( $message, array $context = array() ) {
		if ( Config::is_debug_mode() ) {
			$this->log( 'info', $message, $context );
		}
	}

	/**
	 * Log warning messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function warning( $message, array $context = array() ) {
		$this->log( 'warning', $message, $context );
	}

	/**
	 * Log error messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function error( $message, array $context = array() ) {
		$this->log( 'error', $message, $context );
	}

	/**
	 * Log debug messages.
	 *
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	public function debug( $message, array $context = array() ) {
		if ( Config::is_debug_mode() ) {
			$this->log( 'debug', $message, $context );
		}
	}

	/**
	 * Generic log method for handling all log levels.
	 *
	 * @param string $level The level of the log (info, warning, error, debug).
	 * @param string $message The message to log.
	 * @param array  $context Additional context for the message.
	 */
	private function log( $level, $message, array $context = array() ) {
		$context_string = empty( $context ) ? '' : json_encode( $context );
		$this->logger->log( $level, sprintf( '[%s] %s %s', strtoupper( $level ), $message, $context_string ) );
	}
}
</file>

<file path="includes/Utils/class-messagehandler.php">
<?php
/**
 * Message Handler Implementation
 *
 * Handles message construction, verification, and processing for IPG integration.
 *
 * @package     NovaBankaIPG\Utils
 * @since       1.0.0
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;

defined( 'ABSPATH' ) || exit;

/**
 * Class MessageHandler.
 *
 * Handles message construction, verification, and processing for IPG integration.
 *
 * @package     NovaBankaIPG\Utils
 * @since       1.0.0
 */
class MessageHandler {
	/**
	 * Secret key for message verification.
	 *
	 * @var string
	 */
	private $secret_key;

	/**
	 * Data handler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Terminal ID.
	 *
	 * @var string
	 */
	private $terminal_id;

	/**
	 * Terminal password.
	 *
	 * @var string
	 */
	private $terminal_password;

	/**
	 * Constructor
	 *
	 * @param string      $terminal_id       Terminal ID.
	 * @param string      $terminal_password Terminal password.
	 * @param string      $secret_key        Secret key for message verification.
	 * @param DataHandler $data_handler      Data handler instance.
	 * @param Logger      $logger            Logger instance.
	 */
	public function __construct(
		string $terminal_id,
		string $terminal_password,
		string $secret_key,
		DataHandler $data_handler,
		Logger $logger
	) {
		$this->terminal_id = $terminal_id;
		$this->terminal_password = $terminal_password;
		$this->secret_key = $secret_key;
		$this->data_handler = $data_handler;
		$this->logger = $logger;
	}

	/**
	 * Generate PaymentInit request message.
	 *
	 * @param array $data Payment data.
	 * @return array
	 * @throws NovaBankaIPGException When required fields are missing or invalid.
	 */
	public function generate_payment_init_request( array $data ): array {
		try {
			// Validate required fields.
			$this->validate_required_fields(
				$data,
				array(
					'id',
					'password',
					'amount',
					'currency',
					'trackid',
					'responseURL',
					'errorURL',
					'langid',
				)
			);

			$request = $this->prepare_payment_init_request( $data );

			$this->logger->debug( 'Generated PaymentInit request.', array( 'request' => $request ) );

			return $request;

		} catch ( \Exception $e ) {
			$this->logger->error(
				'Failed to generate PaymentInit request.',
				array(
					'error' => esc_html( $e->getMessage() ),
					'data'  => esc_html( wp_json_encode( $data ) ),
				)
			);
			throw new NovaBankaIPGException(
				esc_html( $e->getMessage() ),
				'REQUEST_GENERATION_ERROR',
				esc_html( wp_json_encode( $data ) )
			);
		}
	}

	/**
	 * Verify PaymentInit response.
	 *
	 * @param array $response Response from IPG.
	 * @return string
	 * @throws NovaBankaIPGException When response verification fails.
	 */
	public function verify_payment_init_response( array $response ): string {
		$this->logger->debug('Processing PaymentInit response', [
			'response' => $response
		]);

		// Check for error response
		if (isset($response['type']) && $response['type'] === 'error') {
			throw new NovaBankaIPGException(
				isset($response['errorDesc']) ? $response['errorDesc'] : 'Payment initialization failed'
			);
		}

		// Verify we have the redirection URL
		if (!isset($response['browserRedirectionURL'])) {
			throw new NovaBankaIPGException('Missing HPP redirection URL in response');
		}

		// Return just the HPP URL
		return $response['browserRedirectionURL'];
	}

	/**
	 * Generate notification response.
	 *
	 * @param array  $notification Notification data from IPG.
	 * @param string $redirect_url URL for browser redirection.
	 * @return array
	 * @throws NovaBankaIPGException When notification response generation fails.
	 */
	public function generate_notification_response( array $notification, string $redirect_url ): array {
		try {
			$this->validate_required_fields( $notification, array( 'paymentid' ) );

			$response = array(
				'msgName'               => 'PaymentNotificationResponse',
				'version'               => '1',
				'paymentID'             => $notification['paymentid'],
				'browserRedirectionURL' => $redirect_url,
			);

			// Generate message verifier.
			$response['msgVerifier'] = $this->generateMessageVerifier(
				$response['msgName'],
				$response['version'],
				$response['paymentID'],
				$this->secret_key,
				$response['browserRedirectionURL']
			);

			return $response;

		} catch ( \Exception $e ) {
			$this->logger->error(
				'Failed to generate notification response',
				array(
					'error'        => $e->getMessage(),
					'notification' => $notification,
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ), 'NOTIFICATION_RESPONSE_ERROR', esc_html( $notification ) );
		}
	}

	/**
	 * Generate message verifier.
	 *
	 * @param mixed ...$fields Fields to include in verifier.
	 * @return string
	 */
	private function generate_message_verifier( ...$fields ): string {
		// Direct concatenation without spaces between fields
		$message = implode( '', $fields );

		$this->logger->debug(
			'Message verifier generation:',
			array(
				'initial_string' => $message,
				'initial_hex'    => bin2hex( $message ),
			)
		);

		// Remove all spaces
		$message = preg_replace( '/\s+/', '', $message );

		$this->logger->debug(
			'After space removal:',
			array(
				'processed_string' => $message,
				'processed_hex'    => bin2hex( $message ),
			)
		);

		// Get raw hash bytes
		$hash_bytes = hash( 'sha256', $message, true );

		$this->logger->debug(
			'Hash bytes:',
			array(
				'hex' => strtoupper( bin2hex( $hash_bytes ) ),
			)
		);

		// Base64 encode
		$verifier = base64_encode( $hash_bytes );

		$this->logger->debug(
			'Final verifier:',
			array(
				'verifier' => $verifier,
			)
		);

		return $verifier;
	}

	/**
	 * Validate required fields.
	 *
	 * @param array $data   Data to validate.
	 * @param array $fields Required field names.
	 * @throws NovaBankaIPGException If a required field is missing.
	 */
	private function validate_required_fields( array $data, array $fields ): void {
		foreach ( $fields as $field ) {
			if ( empty( $data[ $field ] ) ) {
				throw new NovaBankaIPGException( esc_html( "Missing required field: {$field}" ) );
			}
		}
	}

	/**
	 * Validate payment instrument.
	 *
	 * @param string $instrument Payment instrument code.
	 * @return string
	 * @throws NovaBankaIPGException If the payment instrument is invalid.
	 */
	private function validate_payment_instrument( string $instrument ): string {
		$valid_instruments = array( 'CC', 'VPAS', 'IP', 'MPASS', 'MYBANK' );

		if ( ! in_array( $instrument, $valid_instruments, true ) ) {
			throw new NovaBankaIPGException( 'Invalid payment instrument' );
		}

		return $instrument;
	}

	/**
	 * Validate recurring action.
	 *
	 * @param string $action Recurring action.
	 * @return string
	 * @throws NovaBankaIPGException If the recurring action is invalid.
	 */
	private function validate_recur_action( string $action ): string {
		$valid_actions = array( 'activation', 'consumer_initiated', '' );

		if ( ! in_array( strtolower( $action ), $valid_actions, true ) ) {
			throw new NovaBankaIPGException( 'Invalid recurring action' );
		}

		return $action;
	}

	/**
	 * Add buyer information to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data    Source data.
	 */
	private function add_buyer_information( array &$request, array $data ): void {
		$buyer_fields = array(
			'buyerFirstName'    => 50,
			'buyerLastName'     => 50,
			'buyerPhoneNumber'  => 20,
			'buyerEmailAddress' => 255,
			'buyerUserId'       => 50,
		);

		foreach ( $buyer_fields as $field => $max_length ) {
			if ( ! empty( $data[ $field ] ) ) {
				$request[ $field ] = substr( sanitize_text_field( $data[ $field ] ), 0, $max_length );
			}
		}
	}

	/**
	 * Add UDF fields to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data    Source data.
	 */
	private function add_u_d_f_fields( array &$request, array $data ): void {
		for ( $i = 1; $i <= 5; $i++ ) {
			$field = "udf{$i}";
			if ( isset( $data[ $field ] ) ) {
				$request[ $field ] = $this->data_handler->format_udf( $data[ $field ] );
			}
		}
	}
	/**
	 * Generate Payment Query request.
	 *
	 * @param string $terminal_id Terminal ID.
	 * @param string $password    Terminal password.
	 * @param string $payment_id  Payment ID to query.
	 * @return array
	 * @throws NovaBankaIPGException If request generation fails due to invalid input or processing error.
	 */
	public function generate_payment_query_request(
		string $terminal_id,
		string $password,
		string $payment_id
	): array {
		try {
			$request = array(
				'msgName'   => 'PaymentQueryRequest',
				'version'   => '1',
				'id'        => $terminal_id,
				'password'  => $password,
				'action'    => '8', // Payment Query action code.
				'paymentid' => $payment_id,
			);

			// Generate message verifier according to spec.
			$request['msgVerifier'] = $this->generate_message_verifier(
				$request['msgName'],
				$request['version'],
				$request['id'],
				$request['password'],
				$request['action'],
				$this->secret_key,
				$request['paymentid']
			);

			$this->logger->debug( 'Generated Payment Query request', array( 'request' => $request ) );

			return $request;

		} catch ( \Exception $e ) {
			$this->logger->error(
				'Failed to generate Payment Query request',
				array(
					'error'      => $e->getMessage(),
					'payment_id' => $payment_id,
				)
			);
			throw new NovaBankaIPGException( $e->getMessage(), 'QUERY_REQUEST_ERROR' );
		}
	}

	/**
	 * Process Payment Query response.
	 *
	 * @param array $response Response from gateway.
	 * @return array Processed response data.
	 * @throws NovaBankaIPGException If response processing fails due to invalid input or processing error.
	 */
	public function process_payment_query_response( array $response ): array {
		try {
			// Validate required fields.
			$this->validateRequiredFields(
				$response,
				array(
					'msgName',
					'version',
					'msgDateTime',
					'paymentid',
					'trackid',
					'status',
					'result',
					'amt',
					'msgVerifier',
				)
			);

			// Verify message signature.
			$message_verifier = $this->generate_message_verifier(
				$response['msgName'],
				$response['version'],
				$response['msgDateTime'],
				$response['paymentid'],
				$response['amt'],
				$response['trackid'],
				$response['udf1'] ?? '',
				$this->secret_key,
				$response['udf5'] ?? ''
			);

			if ( ! hash_equals( $message_verifier, $response['msgVerifier'] ) ) {
				throw new NovaBankaIPGException( 'Invalid query response signature' );
			}

			// Process status and result.
			return $this->parse_query_response( $response );

		} catch ( \Exception $e ) {
			$this->logger->error(
				'Payment Query response processing failed',
				array(
					'error'    => $e->getMessage(),
					'response' => $response,
				)
			);
			throw new NovaBankaIPGException( $e->getMessage(), 'QUERY_RESPONSE_ERROR', $response );
		}
	}

	/**
	 * Parse Payment Query response.
	 *
	 * @param array $response Raw response data.
	 * @return array Processed response data.
	 */
	private function parse_query_response( array $response ): array {
		$processed = array(
			'payment_id' => $response['paymentid'],
			'track_id'   => $response['trackid'],
			'status'     => $this->getStatusDescription( $response['status'] ),
			'result'     => $response['result'],
			'amount'     => $response['amt'],
			'currency'   => $response['currencycode'],
			'timestamp'  => array(
				'init'    => $response['payinittm'] ?? null,
				'present' => $response['payprsntm'] ?? null,
				'process' => $response['payprcstm'] ?? null,
			),
		);

		// Add payment instrument if present.
		if ( ! empty( $response['payinst'] ) ) {
			$processed['payment_instrument'] = $response['payinst'];
		}

		// Add 3DS information if available.
		if ( ! empty( $response['eci'] ) ) {
			$processed['threeds'] = array(
				'eci'             => $response['eci'],
				'cavv'            => $response['cavv'] ?? null,
				'xid'             => $response['xid'] ?? null,
				'liability_shift' => $response['liability'] ?? null,
			);
		}

		// Add risk information if available.
		if ( isset( $response['riskLevel'] ) ) {
			$processed['risk'] = array(
				'level'     => $response['riskLevel'],
				'threshold' => $response['riskThreshold'] ?? null,
				'score'     => $response['riskScore'] ?? null,
				'max_score' => $response['riskMaxScore'] ?? null,
			);
		}

		// Add transaction rows if present.
		if ( ! empty( $response['rows'] ) && ! empty( $response['row'] ) ) {
			$processed['transactions'] = $this->parse_transaction_rows( $response['row'] );
		}

		return $processed;
	}

	/**
	 * Parse transaction rows from response.
	 *
	 * @param array $rows Transaction rows.
	 * @return array Processed transaction data.
	 */
	private function parse_transaction_rows( array $rows ): array {
		$transactions = array();

		foreach ( $rows as $row ) {
			$transaction = array(
				'action'         => $row['action'],
				'transaction_id' => $row['tranid'],
				'timestamp'      => $row['msgDateTime'],
				'amount'         => $row['amt'],
				'result'         => $row['result'],
				'auth_code'      => $row['auth'] ?? null,
				'card_type'      => $row['cardtype'] ?? null,
				'response_code'  => $row['responsecode'] ?? null,
				'reference'      => $row['ref'] ?? null,
			);

			// Add UDF fields if present.
			for ( $i = 1; $i <= 5; $i++ ) {
				$udf = "udf{$i}";
				if ( ! empty( $row[ $udf ] ) ) {
					$transaction['udf'][ $udf ] = $row[ $udf ];
				}
			}

			$transactions[] = $transaction;
		}

		return $transactions;
	}

	/**
	 * Get human-readable status description.
	 *
	 * @param string $status Status code from response.
	 * @return string
	 */
	private function get_status_description( string $status ): string {
		$statuses = array(
			'INITIALIZED' => 'Payment initialized but not yet displayed to customer',
			'PRESENTED'   => 'Payment page presented but process not completed',
			'PROCESSED'   => 'Payment has been processed completely',
			'TIMEOUT'     => 'Payment expired due to timeout',
		);

		return $statuses[ $status ] ?? $status;
	}

	/**
	 * Check if payment query response indicates success.
	 *
	 * @param array $response Processed response.
	 * @return bool
	 */
	public function is_query_response_successful( array $response ): bool {
		$success_results = array(
			'CAPTURED',
			'APPROVED',
		);
		return in_array( $response['result'], $success_results, true ) &&
				'PROCESSED' === $response['status'];
	}

	/**
	 * Extract transaction details from query response.
	 *
	 * @param array $response Processed response.
	 * @return array|null Transaction details or null if not found.
	 */
	public function get_transaction_details( array $response ): ?array {
		if ( empty( $response['transactions'] ) ) {
			return null;
		}

		// Find the main transaction (usually the first one).
		foreach ( $response['transactions'] as $transaction ) {
			if ( in_array( $transaction['action'], array( '1', '4' ) ) ) { // Purchase or Authorization.
				return $transaction;
			}
		}

		return $response['transactions'][0] ?? null;
	}

	/**
	 * Prepare PaymentInit request data.
	 *
	 * @param array $data Payment initialization data.
	 * @return array Prepared request data.
	 * @throws NovaBankaIPGException When data validation fails.
	 */
	private function prepare_payment_init_request( array $data ): array {
		$this->logger->debug(
			'Starting payment init request preparation',
			array(
				'raw_input_data' => $data,
			)
		);

		// Store raw values for message verification
		$raw_values = array(
			'msgName'  => 'PaymentInitRequest',
			'version'  => '1',
			'id'       => $data['id'],
			'password' => $data['password'],
			'amt'      => $this->data_handler->format_amount( $data['amount'] ),
			'trackid'  => (string) $data['trackid'],
			'udf1'     => $data['udf1'] ?? '',
			'udf5'     => $data['udf5'] ?? '',
		);

		$this->logger->debug(
			'Raw values prepared for verification',
			array(
				'raw_values' => $raw_values,
			)
		);

		// Prepare request
		$request = array(
			'msgName'            => $raw_values['msgName'],
			'version'            => $raw_values['version'],
			'id'                 => $raw_values['id'],
			'password'           => $raw_values['password'],
			'action'             => '1',
			'currencycode'       => $this->data_handler->get_currency_code( $data['currency'] ),
			'amt'                => $raw_values['amt'],
			'trackid'            => $raw_values['trackid'],
			'responseURL'        => $data['responseURL'],
			'errorURL'           => $data['errorURL'],
			'langid'             => $data['langid'],
			'notificationFormat' => 'json',
			'payinst'            => 'VPAS',
			'recurAction'        => '',
		);

		$this->logger->debug(
			'Base request prepared',
			array(
				'request' => $request,
			)
		);

		// Add optional fields.
		if ( ! empty( $data['email'] ) ) {
			$request['buyerEmailAddress'] = $data['email'];
		}

		// Add UDF fields.
		foreach ( array( 'udf1', 'udf2', 'udf3' ) as $udf ) {
			if ( ! empty( $data[ $udf ] ) ) {
				$request[ $udf ] = $data[ $udf ];
			}
		}

		// Generate message verifier using raw values.
		$verifier_fields = array(
			$raw_values['msgName'],
			$raw_values['version'],
			$raw_values['id'],
			$raw_values['password'],
			$raw_values['amt'],
			$raw_values['trackid'],
			$raw_values['udf1'],
			$this->secret_key,
			$raw_values['udf5'],
		);

		$this->logger->debug(
			'Preparing message verifier',
			array(
				'verifier_fields' => $verifier_fields,
				'secret_key'      => $this->secret_key,
				'field_order'     => array(
					'msgName',
					'version',
					'id',
					'password',
					'amt',
					'trackid',
					'udf1',
					'secret_key',
					'udf5',
				),
			)
		);

		// Log the concatenated string before hashing.
		$message = implode( '', $verifier_fields );
		$this->logger->debug(
			'Message string before whitespace removal',
			array(
				'message' => $message,
			)
		);

		// Remove whitespace.
		$message = preg_replace( '/\s+/', '', $message );
		$this->logger->debug(
			'Message string after whitespace removal',
			array(
				'message' => $message,
			)
		);

		// Calculate verifier.
		$verifier = base64_encode( hash( 'sha256', $message, true ) );
		$this->logger->debug(
			'Message verifier calculated',
			array(
				'message'  => $message,
				'verifier' => $verifier,
			)
		);

		$request['msgVerifier'] = $verifier;

		$this->logger->debug(
			'Final request prepared',
			array(
				'final_request' => $request,
			)
		);

		return $request;
	}
}
</file>

<file path="includes/Utils/class-threedshandler.php">
<?php
/**
 * ThreeDSHandler Utility Class
 *
 * This class is responsible for managing the 3D Secure (3DS) authentication process.
 * It helps ensure that transactions comply with security standards by handling 3DS verifications.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\Logger;

class ThreeDSHandler {
	/**
	 * API Handler instance
	 *
	 * @var ApiHandler
	 */
	private $api_handler;

	/**
	 * Logger instance
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Data Handler instance
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Constructor
	 *
	 * @param ApiHandler  $api_handler API handler instance.
	 * @param Logger      $logger Logger instance.
	 * @param DataHandler $data_handler Data handler instance.
	 */
	public function __construct( ApiHandler $api_handler, Logger $logger, DataHandler $data_handler ) {
		$this->api_handler  = $api_handler;
		$this->logger       = $logger;
		$this->data_handler = $data_handler;
	}

	/**
	 * Verify if the transaction requires 3D Secure.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return bool True if 3DS is required, false otherwise.
	 */
	public static function is_3ds_required( $transaction_data ) {
		// Check if the 3D Secure flag is set in transaction data.
		return isset( $transaction_data['threeDSRequired'] ) && $transaction_data['threeDSRequired'] === true;
	}

	/**
	 * Generate the URL required for 3D Secure authentication.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return string The URL to redirect the user for 3DS authentication.
	 * @throws NovaBankaIPGException If 3DS data is missing or invalid.
	 */
	public static function generate_3ds_url( $transaction_data ) {
		if ( empty( $transaction_data['threeDSURL'] ) ) {
			throw new NovaBankaIPGException( '3D Secure URL is missing from the transaction data.' );
		}

		// Return the URL to which the customer should be redirected.
		return $transaction_data['threeDSURL'];
	}

	/**
	 * Handle the response from the 3D Secure process.
	 *
	 * @param array $response_data The response data from the 3D Secure authentication process.
	 * @return bool True if the 3DS authentication was successful, false otherwise.
	 * @throws NovaBankaIPGException If the response data is invalid or indicates a failure.
	 */
	public static function handle_3ds_response( $response_data ) {
		// Validate the response status.
		if ( empty( $response_data['status'] ) || $response_data['status'] !== 'AUTHENTICATED' ) {
			throw new NovaBankaIPGException( '3D Secure authentication failed or returned an invalid status.' );
		}

		// If the status is AUTHENTICATED, return true indicating success.
		return true;
	}

	/**
	 * Verify the authentication response signature for added security.
	 *
	 * @param array  $response_data The response data from the 3DS.
	 * @param string $signature The expected signature for validation.
	 * @return bool True if the signature is valid, false otherwise.
	 */
	public static function verify_3ds_signature( $response_data, $signature ) {
		// Here you would implement logic to verify that the signature matches what is expected.
		// This might involve hashing response data with a shared secret and comparing.

		// Example: Compare the calculated signature with the provided one.
		$calculated_signature = hash( 'sha256', json_encode( $response_data ) . Config::get_setting( 'secret_key' ) );
		return hash_equals( $calculated_signature, $signature );
	}

	/**
	 * Prepare 3DS data for PaymentInit request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prepared 3DS data.
	 */
	public function prepare_3ds_data( array $order_data ): array {
		$threeds_data = array(
			'payinst'                                 => 'VPAS', // 3DS Secure payment instrument.
			'acctInfo'                                => $this->prepare_account_info( $order_data ),
			'threeDSRequestorAuthenticationInfo'      => $this->prepare_authentication_info( $order_data ),
			'threeDSRequestorPriorAuthenticationInfo' => $this->prepare_prior_auth_info( $order_data ),
		);

		$this->logger->debug( 'Prepared 3DS data', array( 'data' => $threeds_data ) );

		return $threeds_data;
	}

	/**
	 * Prepare account information for 3DS.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Account information.
	 */
	private function prepare_account_info( array $order_data ): array {
		$user_id      = $order_data['user_id'] ?? 0;
		$account_data = array();

		if ( $user_id ) {
			$user                    = get_userdata( $user_id );
			$registration_date       = $user->user_registered;
			$days_since_registration = ( time() - strtotime( $registration_date ) ) / DAY_IN_SECONDS;

			$account_data['chAccAgeInd'] = $days_since_registration > 365 ? '05' : '02';
			$account_data['chAccDate']   = date( 'Ymd', strtotime( $registration_date ) );
		}

		return $account_data;
	}

	/**
	 * Prepare authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Authentication information.
	 */
	private function prepare_authentication_info( array $order_data ): array {
		// Implement the preparation of authentication information as per 3DS specifications.
		$auth_info = array(
			'threeDSReqAuthMethod' => '02', // Example: 02 means two-factor authentication.
		);

		return $auth_info;
	}

	/**
	 * Prepare prior authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prior authentication information.
	 */
	private function prepare_prior_auth_info( array $order_data ): array {
		// Implement the preparation of prior authentication information if available.
		$prior_auth_info = array(
			'threeDSReqPriorAuthData'   => 'ABC123', // Example data, this would come from prior transactions.
			'threeDSReqPriorAuthMethod' => '01',  // 01 indicates Frictionless flow.
		);

		return $prior_auth_info;
	}
}
</file>

<file path=".cursorignore">
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
</file>

<file path=".cursorrules">
After each response, ask the user wheter they'd like to co know more about the code provided, implement a new feature, or inquire about anything relevant to your response. Always update journal.json with details on our activities, approach, technology stack, current progress, remaining features, unresolved bugs, potential future features, and any other details a developer might need to remember or know and then use that journal.json as a reference for understanding our codebase.
</file>

<file path=".gitignore">
repopack-output-main-branch.xml
</file>

<file path="Asoft IPG 3DS eCommerce Transaction flow.md">
# 3DS E-commerce Transactions ​

## Introduction

This section describes the stages of an e-commerce transaction using the IPG platform and HPP web interface, focusing on the actions carried out by each party involved. ​

### The Buyer Perspective ​

1. Chooses products.  
2. Enters personal details for shipment and clicks "Buy". ​  
3. Is redirected to the HPP.  
4. Enters credit card data and clicks "Pay".  
5. If the card is 3-D Secure enabled, the Buyer is redirected to their bank's website to enter the password and then returns to the HPP. ​  
6. Is redirected to a specific page on the Merchant website displaying the payment result. ​  
7. Receives an email notification of payment if enabled by the Merchant. ​

### The Merchant Perspective ​

1. Receives a purchase order from the Buyer. ​  
2. Sends a PaymentInit message to IPG. ​  
3. Receives a unique PaymentID and the URL of the HPP. ​  
4. Redirects the Buyer to the HPP URL with the PaymentID. ​  
5. Receives a transaction notification from IPG. ​  
6. Responds with the URL for the Buyer to be redirected to for the transaction result. ​  
7. Presents the result to the Buyer. ​  
8. Receives an email notification of payment if enabled. ​

### The IPG Perspective ​

1. Receives a PaymentInit message from the Merchant. ​  
2. Responds with the HPP URL and a PaymentID. ​  
3. Presents the HPP to the Buyer. ​  
4. Receives the Buyer's credit card data. ​  
5. If the card is 3-D Secure enabled, redirects the Buyer to the bank's site for authentication and awaits the result. ​  
6. Processes the transaction by sending the request to the credit card company and gets a response. ​  
7. Sends a result notification message to the Merchant. ​  
8. Receives the URL for Buyer redirection. ​  
9. Redirects the Buyer to the specified URL. ​  
10. Sends an email notification of payment to the Buyer and/or Merchant if enabled. ​

### Diagram of Information Flow ​

The following pattern of actions/communications occurs during a transaction:

1. Buyer completes the shopping cart. ​  
2. Merchant prepares and returns the checkout page. ​  
3. Buyer fills out required fields and clicks "Buy".  
4. Merchant sends PaymentInit request to IPG. ​  
5. IPG verifies the request, saves transaction data, and returns the HPP URL and PaymentID. ​  
6. Merchant saves the PaymentID and redirects the browser to the HPP URL with the PaymentID. ​  
7. IPG checks the PaymentID, prepares the payment page, and returns it to the Buyer's browser. ​  
8. Buyer enters necessary data and clicks "Pay".  
9. If 3-D Secure, IPG redirects the browser to the bank's site for authentication. ​  
10. Buyer provides authentication data and is redirected back to IPG.  
11. IPG combines data and sends the request to the authorization system. ​  
12. Authorization system processes the request and returns the result to IPG. ​  
13. IPG sends a POST message to the Merchant with the transaction result. ​  
14. Merchant updates the transaction status and returns the URL for Buyer redirection. ​  
15. IPG redirects the browser to the specified URL and displays the final page with payment details. ​  
16. Buyer reviews the Merchant result page. ​

### Description of the Steps ​

The table below presents the full flow of activities in a payment transaction:

| Buyer | Merchant | Website IPG | Authorization Centre |
| ----- | ----- | ----- | ----- |
| 1\. Completes Shopping Cart. ​ | 2\. Prepares and returns the Check Out page. ​ |  |  |
| 3\. Fills out the required fields and clicks the "Buy” button. ​ | 4\. Prepares the HTTP PaymentInit request with all transaction data and sends it via POST to IPG. ​ | 5\. After verifying the validity of the request received, IPG saves the transaction data, associates a PaymentID to it and returns to the Merchant the URL where the Cardholder browser must be redirected and the PaymentID to use in redirection. ​ |  |
|  | 6\. Saves the PaymentID among other transaction data, then redirects the browser to the URL of the HPP specifying the PaymentID as the GET parameter. ​ | 7\. After checking the PaymentID received, IPG prepares the payment page and returns it to the buyer‘s browser. ​ |  |
| 8\. Enters the necessary data, and clicks the "Pay" button. Note: If the Buyer clicks the "Cancel" button, the transaction is not processed, and the flow proceeds to step 13\. ​ |  | 9\. (if the card is enabled for 3-D Secure) Redirects the browser to an external site to authenticate the Cardholder. ​ |  |
| 10\. (if the card is enabled for 3-D Secure) Provides their authentication data to the external site (the site of the bank that issued the credit card) and, at the end, is redirected to IPG. ​ |  | 11\. Receives data, combines it with data from the Merchant and the transaction and sends the request to the Authorisation System. ​ | 12\. Receives and processes the request and returns the result to IPG. ​ |
|  |  | 13\. Sends a POST message to the Merchant communicating the result of the transaction. ​ |  |
|  | 14\. Receives the message and updates the transaction status with the result received. ​ It then returns the URL where the buyer browser is to be redirected to for the presentation of the response page. ​ |  |  |
|  |  | 15\. Redirects the buyer browser to the URL specified by the merchant in previous step and displays the final page, with details of the payment result. ​ |  |
| 16\. Receives and reviews Merchant result page. ​ |  |  |  |

## Merchant Integration

### Introduction

IPG includes direct communications with the Merchant server to complete transactions. ​ This can be implemented via:

* A special plug-in. ​  
* Creating a custom communication interface. ​

### Messages Between the Merchant Site and IPG ​

Server-to-server messages are divided into:

* Online messages: Occur during the transaction and are mandatory.  
* Offline messages: Occur after the transaction and are optional. ​

### Online Messages

* PaymentInit Request: Sent by the Merchant to IPG to initialize the transaction. ​  
* PaymentInit Response: Sent by IPG to the Merchant containing the HPP URL and PaymentID. ​  
* Notification: Sent by IPG to the Merchant with transaction results. ​  
* Notification Response: Sent by the Merchant to IPG with the final redirection URL. ​

### Offline Messages

* Payment Request: Used for various accounting transactions post-payment. ​  
* PaymentQuery: Allows the Merchant to check the status and details of a transaction in real-time. ​

### Message Verifier

All messages are signed using a Message Verifier (msgVerifier) generated by:

1. Concatenating specified message data. ​  
2. Removing spaces.  
3. Hashing the string using SHA256. ​  
4. Base64 encoding the hash bytes. ​

Example for PaymentInit request:

* Concatenate: msgName \+ version \+ id \+ password \+ amt \+ trackid \+ udf1 \+ SECRET KEY \+ udf5 ​  
* Remove spaces.  
* Hash using SHA256. ​  
* Base64
</file>

<file path="AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt">
Asoft IPG 

Merchant Integration Guide 
Payment 3DS 
Version 1.12 

Table of Contents 
History of revisions................................................................................................................. 5 
Introduction ..................................................................................................................................... 6 
Hosted Payment Page (HPP) ................................................................................................ 6 
3DS e-commerce transactions ........................................................................................................ 7 
Introduction ............................................................................................................................ 7 
The Buyer perspective .................................................................................................. 7 
The Merchant perspective ............................................................................................ 7 
The IPG perspective ..................................................................................................... 7 
Diagram of information flow .......................................................................................... 8 
Description of the steps ................................................................................................ 9 
Merchant Integration ............................................................................................................ 10 
Introduction ................................................................................................................. 10 
Messages between the merchant site and IPG ........................................................... 10 
Online messages ........................................................................................................ 11 
Offline messages ........................................................................................................ 11 
Message Verifier ......................................................................................................... 12 
PaymentInit request .................................................................................................... 14 
PaymentInit response ................................................................................................. 20 
Notification message .................................................................................................. 20 
Notification response .................................................................................................. 23 
Financial Request message ........................................................................................ 23 
Financial Response message ..................................................................................... 24 
Payment Query Request message ............................................................................. 25 
Payment Query Response message ........................................................................... 26 
MOTO transactions ....................................................................................................................... 28 
Introduction .......................................................................................................................... 28 
The Buyer perspective ................................................................................................ 28 
The Merchant perspective .......................................................................................... 28 
The IPG perspective ................................................................................................... 28 
Merchant Integration ............................................................................................................ 28 
Introduction ................................................................................................................. 28 
Messages between the merchant site and IPG ........................................................... 29 
Message Verifier ......................................................................................................... 29 
Payment Request ....................................................................................................... 30 
Payment response ...................................................................................................... 32 
Plug-in interface specifications ...................................................................................................... 34 
Java plugin .......................................................................................................................... 34 
Java IPG Demo Plugin Simulator ................................................................................ 34 
IPG Payment Service Factory ..................................................................................... 35 
IPG Logger Interface .................................................................................................. 35 
IPG Payment Service Interface ................................................................................... 36 
DLL plugin ............................................................................................................................ 37 
Direct interface specifications ....................................................................................................... 38 
Communication protocol specifications ................................................................................ 38 
Data transmission format ..................................................................................................... 38 
Data reception format .......................................................................................................... 39 
IPG Demo Plugin .......................................................................................................................... 41 
Test environment........................................................................................................................... 42 
Variables to be set for the creation of PaymentInit message ................................................ 42 
Mandatory test cases ........................................................................................................... 42 
HPP Customization ....................................................................................................................... 44 
Examples of Layout1 and Layout2 ....................................................................................... 45 
Customization on Smartphones and Tablets ........................................................................ 45 
Appendix A – Response Codes ..................................................................................................... 46 
 
  Introduction 
The Electronic Commerce service aims at brokering the cash flow from Internet sales. Merchants, who already have their own website on the Internet, are provided with a unique platform for the complete management of E-commerce transactions by credit card: 
•
 Online: manage all phases of the economic transaction in a secure way. 

•
 Offline: provides the Merchant with an account to access the web via the administrative interface, in which he is able to check the status of transactions, generate operational reports and proceed to the necessary accounting operations. 


 
Hosted Payment Page (HPP) 
During the payment of an e-commerce transaction with a credit card, the Merchant redirects the 
browser of the Buyer to the Internet Payment Gateway site 
(hereafter IPG) to enter credit card data. In this way, the Merchant reaches many significant goals: 
•
 The Merchant is unaware of the credit card data used by the Buyer, thus eliminating the burden of having to implement all the safety requirements, physical and logical, required by the management and storage of this type of data. 

•
 IPG is delegated the E-Commerce protocol management intended to be used and for which the service has been obtained from the bank. 

•
 The Merchant can customise the payment page presented to the Buyer, so to maintain the same look and feel of the Merchant’s site and thus creating a transparent redirection for the Buyer, without affecting their shopping experience. 


 
The payment page presented by IPG to the Buyer is called Hosted Payment Page (HPP). It 
handles all payment protocols (also known as Payment Instruments) supported by the Merchant. 
A further benefit of this solution is the fact that should any evolutions of these protocols occur in 
the future, or the introduction of new ones, IPG will implement them on HPP, without the Merchant needing to make any changes to his site. 
 
 
  3DS e-commerce transactions 
Introduction 
This chapter aims to describe all the stages of an e-commerce transaction using the IPG platform 
and HPP web interface on it, initially focusing on the actions carried out by each of the parties involved and then integrating them into a smooth, continuous flow of successive stages. 
The Buyer perspective 
To make a purchase on the Merchant site, Buyer: 
•
 Chooses products 

•
 Enters their personal details to allow the shipment of goods and clicks on "Buy" button. 

•
 Is redirected to the HPP. 

•
 Enters their credit card data and clicks on the "Pay" button 

•
 If the card is 3-D Secure enabled, the Buyer is redirected to their bank website to enter the password associated with the credit card, and returns to the HPP upon completion 

•
 Is redirected to a specific page on the Merchant website which displays the result of the payment 

•
 Receives an e-mail message notification of payment if the setting is enabled by the Merchant, to be used as virtual receipt 


The Merchant perspective 
The Merchant receives a purchase order from the Buyer and: 
•
 Sends a payment initialization message (PaymentInit) to IPG 

•
 Receives a unique payment code (PaymentID) in response and the URL of the HPP 

•
 Redirects the Buyer to the URL of the HPP and attaches the PaymentID information 

•
 Receives the notification of the transaction from IPG 

•
 Responds with the URL to which the Buyer should be redirected for the presentation of the transaction result 

•
 Presents the result to the Buyer 

•
 Receives an e-mail message notification of payment if the setting is enabled by the Merchant, to be used as virtual receipt 


 
The IPG perspective 
IPG receives an initialization message (PaymentInit) from the Merchant and: 
•
 Responds with the URL of the HPP and a transaction identification code (PaymentID) 

•
 Presents the HPP to the Buyer 

•
 Receives Credit Card data of the Buyer 

•
 If the card is 3-D Secure enabled, it redirects the Buyer to his bank’s site to enter the password associated with the credit card, and awaits the reverse redirection with the authentication result provided by the bank 

•
 Processes the transaction by sending the request to the credit card company authorisation systems and gets a response 

•
 Sends a result notification message to the Merchant 

•
 Receives the URL to redirect the Buyer in return 

•
 Redirects the Buyer to the URL received 

•
 Sends an e-mail message notification of payment to the Buyer and / or the Merchant (if the setting is enabled by the Merchant) to be used as virtual receipt. 


Diagram of information flow 
By integrating all the previously described activities, the result is the following pattern of actions / 
communications that occur during a transaction between the parties involved: 
 
 
 

Description of the steps 
The table below presents the full flow of activities in a payment transaction: 
 
Buyer  
 Merchant 
 Website IPG 
 Authorisation 
centre 
 
1. Completes Shopping 
Cart. 
 2. Prepares and returns the Check Out page. 
  
  
 
3. Fills out the required 
fields and clicks the 
"Buy” button. 
 4. Prepares the HTTP 
PaymentInit request 
with all transaction 
data and sends it via 
POST to IPG. 
 5. After verifying the 
validity of the request 
received, IPG saves the transaction data, 
associates a PaymentID to it and returns to the 
Merchant the URL 
where the Cardholder 
browser must be 
redirected and the 
PaymentID to use in 
redirection. 
  
 
 
 6. Saves the PaymentID among other transaction data, then redirects the browser to the URL of the HPP specifying the 
PaymentID as the GET 
parameter. 
 7. After checking the 
PaymentID received, 
IPG prepares the 
payment page and 
returns it to the buyer‘s 
browser. 
  
 
8. Enters the necessary data, and clicks the "Pay" button. 
Note: If the Buyer 
clicks the "Cancel" 
button, the transaction 
is not processed, and 
the flow proceeds to 
step 13. 
  
 9. (if the card is enabled for 3-D Secure) Redirects the browser to an external site to authenticate the 
Cardholder. 
  
 
10. (if the card is 
enabled for 3-D 
Secure) Provides their 
authentication data to 
the external site (the 
site of the bank that 
issued the credit card) 
and, at the end, is 
redirected to IPG. 
  
 11. Receives data, 
combines it with data 
from the Merchant and 
the transaction and 
sends the request to 
the Authorisation 
System. 
 12. Receives and 
processes the request 
and returns the result 
to IPG. 
 
 
  
 13. Sends a POST 
  
 


message to the 
Merchant 
communicating the 
result of the 
transaction. 
 
 
 14. Receives the 
message and updates 
the transaction status 
with the result received. It then returns the URL where 
the buyer browser is to be redirected to for the 
presentation of the 
response page. 
  
  
 
 
  
 15. Redirects the buyer 
browser to the URL specified by the merchant in previous step and displays the final page, with details of the payment result. 
  
 
16. Receives and reviews Merchant result page. 
  
  
  
 


 
Merchant Integration 
Introduction 
IPG includes the presence of some direct communications with the Merchant server to complete 
the transactions. This exchange of messages can be implemented in two ways: 
•
 through the installation of a special plug-in 

•
 by creating their own communication interface 


 
The plug-in is easy to integrate and is compatible with all sites developed in Java, C/C++, ColdFusion, ActiveX/COM, VB, ASP, .NET. 
 
If it is not possible or desirable to use the plug-in (e.g. because it is not compatible with the 
technological platform, or the site is published via an external provider in shared hosting) it is 
always possible, according to the specifications provided, to create your own communication 
interface. 
 
Messages between the merchant site and IPG 
Server-to-server messages between the Merchant Site and IPG are divided into two categories: 
•
 Online messages: occur during the transaction (indicated with arrows filled in blue in 


the flow diagram described in section Diagram of information flow) - their implementation is mandatory to complete the transaction successfully; 
•
 Offline messages: take place after the transaction processing is finished and are used by the Merchant for specific purposes - their implementation is optional. 


Online messages 
•
 PaymentInit Request: initialization message sent by the Merchant to IPG (step 4 in above Diagram of information flow); 

•
 PaymentInit Response: message sent by IPG to the merchant containing URL of IPG payment page (HPP) and ID of payment initiation request (Payment ID) - step 5 in above Diagram of information flow; 

•
 Notification: message sent by IPG to the Merchant containing transaction results (step 13 in above Diagram of information flow); 

•
 Notification Response: message sent by the merchant to IPG containing final redirection URL (step 14 in above Diagram of information flow); 


 
Offline messages 
Payment Request - After the payment, the Merchant proceeds with the order. Subsequently, various accounting transactions may be required: for instance, the account crediting (if the transaction did not involve automatic crediting) to the repayment of the Customer in the event of returned goods, and so on.  
IPG offers the ability to manage these requirements quickly and effectively. It is possible to carry 
the operations out in 2 ways: 
•
 By connecting to the BackOffice site and using the features therein 

•
 By sending the request directly from the system to IPG, using the Payment message, in which all of the original transaction parameters must be entered and the appropriate action code is to be set. In 


 
PaymentQuery - allows the Merchant to contact IPG to know in real time, at every 
moment, the processing status and details of a particular transaction. 
 
  
Message Verifier 
 
All messages exchanged between Merchant Site and IPG are signed using Message Verifier (msgVerifier) which is dynamically composed of specific message data (see bellow message specifications). 
Steps for Message Verifier generation are: 
a) Concatenate specified message data to create Message Verifier string; 
b) Remove spaces (if exists) 
c) Hash the string created in previous step using SHA256 algorithm to get HASH bytes 
d) Base64 the HASH bytes to create final msgVerifier field value. 
Example of Message Verifier creation for PaymentInit request message - 
Message data 
 Value 
 
msgName 
 “PaymentInitRequest” 
 
version 
 “1” 
 
id 
 “89110001” 
 
password 
 “test1234” 
 
amt 
 “15.00” 
 
trackid 
 “CTV-TEST-PureBuy-1” 
 
udf1 
 “AA” 
 
SECRET KEY 
 “YXKZPOQ9RRLGPDED5D3PC5BJ” 
 
udf5 
 “EE “ 
 


 
a) Concatenate msgName, version, id, password, amt, trackid, udf1, SECRET KEY and udf5: 
“PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE “ 
 
b) Remove spaces: 
 
“PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE” 
 
c) Hash of step (b) value using SHA256 algorithm to generate hash bytes:  
 
B3A54617D2E9ACD9079D85EA15D066A5892E3CABE1B41DA4891B3A65FFAA0CCE 
 
d) Base64 of step (c) value to generate final msgVerifier value:  
 
s6VGF9LprNkHnYXqFdBmpYkuPKvhtB2kiRs6Zf+qDM4= 
 
 
  
Following is Java code example to message verifier calculation: 
  
public static void main(String[] args) { 
 try { 
 
   // https://hash.online-convert.com/sha256-generator    
   String messageVerifierBase = "PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE"; 
   System.out.println("messageVerifierBase=" + messageVerifierBase); 
    
   MessageDigest digest = MessageDigest.getInstance("SHA-256"); 
   byte[] messageVerifierBase64Hash = digest.digest(messageVerifierBase.getBytes()); 
   System.out.println("SHA256(messageVerifierBase)=" + byteArrayToHex(messageVerifierBase64Hash)); 
 
   String msgVerifier = Base64Codec.encodeBytes(messageVerifierBase64Hash); 
   System.out.println("msgVerifier=Base64(SHA256(messageVerifierBase)=" + msgVerifier); 
             
  } catch (Throwable t) { 
t.printStackTrace(); 
  } 
} 
 
public static String byteArrayToHex(byte[] bytes) { 
  StringBuilder result = new StringBuilder(bytes.length * 2); 
  for (byte singleByte : bytes) { 
    result.append(String.format("%02x", singleByte).toUpperCase()); 
  } 
  return result.toString(); 
 } 
 
Following is printed on Java console: 
 
messageVerifierBase=PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE 
SHA256(messageVerifierBase)=B3A54617D2E9ACD9079D85EA15D066A5892E3CABE1B41DA4891B3A65FFAA0CCE  
msgVerifier=Base64(SHA256(messageVerifierBase))=s6VGF9LprNkHnYXqFdBmpYkuPKvhtB2kiRs6Zf+qDM4= 
 
Note: if Base64(SHA256(messageVerifierBase)) calculation results with different string value, common issue is related to the value of messageVerifierBase.  
Message verifier base must match fields from specific fields from request or response message.  
For example: purchase amount value (15.00) takes part in the message verifier calculation, but different purchase amount value is provided in the JSON message (15). 
  
The same message verifier value could be calculated via https://hash.online-convert.com/sha256-generator: 
 
 

 
 
After clicking on START, following result is displayed: 
 
 

  
PaymentInit request 
This message is sent by the Merchant to IPG to start a transaction. It uses the following items: 
 
<Request> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentInitRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID - TranPortalID, assigned during activation of the service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<payinst> 
  
  
 O 
 20 
 "CC"/"VPAS"/"IP"/"MPASS"/"MYBANK" - to be specified if Merchant wants to show only one specific payment Instrument. 
 
<action> 
  
  
 M 
 2 
 Type of transaction: 
1=Purchase 
4=Authorization 
14 = Card Verification 
 
<currencycode> 
  
  
 M 
 3 
 Currency code 
 
<amt> 
  
  
 M 
 10.2 
 Transaction amount 
(NNNNNNNNNN.NN format 
Max. Val. 9999999999.99). 
 
<trackid> 
  
  
 M 
 255 
 Order identification code set by the Merchant. It is advisable that this code is unique to each transaction. 
 
<RecurAction> 
  
  
 M 
 10 
 Possible Values (case insensitive): 
“” – indicates a normal e-commerce order 
“activation” – indicates that the Merchant requires a new Recurring Payment to be activated with this order 
“consumer_initiated” – indicates card-on-file consumer initiated payment 
 
<RecurContractId> 
  
  
 O 
 30 
 Optional information to collect the Recurring Payment Contract Identifier. 
 
<recurid> 
  
  
 C 
 20 
 Recurring Payment identifier. Mandatory if <RecurAction>=”consumer_initiated” in the PaymentInit request and terminal is enabled to Rec. Pymnts.  
 
<pymnDscr> 
  
  
 O 
 255 
 Recurring Payment description 
 
<cardSHA2> 
  
  
 O 
 1 
 “Y” / “N” to receive the card SHA-2 hash in the notification message  
 
<paymentTimeout> 
  
  
 O 
 2 
 payment session validity (from the paymentInit time) – in number of minutes. If not present, IPG default value is used . 
 
 
  
  
  
  
  
 
<bankStmtFreeText> 
  
  
 O 
 50 
 Free Text that will be forwarded to Auth System in p127, to be printed on bank account statement. 
 
<instructedFees> 
  
  
 O 
 255 
 Text field that can host any fees that could be applied to the original amount. 
 


<responseURL> 
  
  
 M 
 255 
 URL used by IPG to send Notification Message to the Merchant. 
 
<errorURL> 
  
  
 M 
 384 
 URL towards which IPG redirects the Buyer in case that any problem occurs when sending the Notification Message. 
 
<notificationFormat> 
  
  
 O 
 10 
 Optional field to specify the format of the Notification Message sent by IPG. Possible values: 
- “xml” – msg is sent in xml format 
- “form” – msg is sent as a HTML form (nvp) 
If empty, the default value is “xml”. Values different from those specified will generate a validation error. 
 
<paymentPageMode> 
  
  
 O 
 1 
 Payment Page mode 
0 = Standard (the customer's browser is redirected to the payment page) 
1 = Light Box (the payment page is presented on the merchant page). 
If omitted, the Standard option is assumed. 
 
<langid> 
  
  
 M 
 3 
 Code to set the language in which HPP will be displayed and for notification email. The following are supported: 
"ITA" = Italian 
"USA" = English 
"FRA" = French 
"DEU" = German 
"ESP" = Spanish 
"SLO" = Slovenian 
"SRB" = Serbian 
"POR" = Portuguese 
"RUS" = Russian 
 
<udf1> 
  
  
 O 
 255 
 User free field 1. 
Field at the discretion of the Merchant used for an additional information. 
 
<udf2> 
  
  
 O 
 255 
 User free field 2 
 
<udf3> 
  
  
 O 
 255 
 User free field 3 
 
<udf4> 
  
  
 O 
 255 
 User free field 4 
 
<udf5> 
  
  
 O 
 255 
 User free field 5 
 
<buyerFirstName> 
  
  
 O 
 50 
 Buyer first name 
 
<buyerLastName> 
  
  
 O 
 50 
 Buyer last name 
 
<buyerUserId> 
  
  
 O 
 50 
 UserId with which the buyer is registered at the merchant web site 
 
<buyerPhoneNumber> 
  
  
 O 
 20 
 Buyer phone number 
 
<buyerEmailAddress> 
  
  
 O 
 255 
 Allows you to pre-set the email field that the 
Buyer can enter on the payment page to 
receive transaction e-mail receipt (option only 
possible if the Merchant has enabled the sending email function to the Buyer using the back office). 
 
<cartContent> 
  
  
 O 
  
 Shopping cart content. 
 
 
 <item> 
  
 C 
  
 [1..n] <item> tags if <cartContent> is present 
 
 
  
 <productId> 
 M 
 30 
 product identifier 
 
 
  
 <productDesc> 
 O 
 255 
 product description 
 
 
  
 <qty> 
 M 
 8 
 product quantity in the cart 
 


 
  
 <singlePrice> 
 M 
 10.2 
 product single price  
 
<shippingInfo> 
  
  
 O 
  
 Shipping Details 
 
 
 <recipientFirstName> 
  
 C 
 50 
 Recipient First Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientLastName> 
  
 C 
 50 
 Recipient Last Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientPhoneNumber> 
  
 O 
 20 
 Recipient Phone Number. 
 
 
 <ShippingAddress> 
  
 C 
  
 Shipping Address. Mandatory if <shippingInfo> is present 
 
 
  
 <country> 
 C 
 3 
 Shipping Country. Mandatory if <buyerShippingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Shipping City. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Shipping Postal Code. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Shipping Address Line 1 (Street name, number). Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Shipping Address Line 2 (apt number, suite, etc) 
 
 
  
 <addrLine3> 
 O 
 40 
 Shipping Address Line 3 (all info not containable in first 2 lines) 
 
<billingInfo> 
  
  
 O 
  
 Billing Details 
 
 
 <billingFirstName> 
  
 C 
 50 
 First name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingLastName> 
  
 C 
 50 
 Last name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingAddress> 
  
 C 
  
 Billing Address. Mandatory if <billingInfo> is present  
 
 
  
 <country> 
 C 
 3 
 Billing Country. Mandatory if <billingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Billing City. Mandatory if <billingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Billing Postal Code. Mandatory if <billingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Billing Address Line 1 (Street name, number). Mandatory if <billingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Billing Address Line 2 (Street name, number) 
 
 
  
 <addrLine3> 
 O 
 40 
 Billing Address Line 3 (all info not containable in first 2 lines) 
 
<acctType> 
  
  
 O 
 2 
 Account Type 
Accepted Values: 
01 = Not Applicable 
02 = Credit 
03 = Debit 
 
<acctInfo> 
 <chAccAgeInd> 
  
 O 
 2 
 Length of time that the cardholder has had the account with the merchant. 
Accepted Values: 
01 = No account (guest check-out) 
02 = Created during this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <chAccDate> 
  
 O 
 8 
 Date that the cardholder opened the account with the merchant. 
 


Format accepted: 
Date format = YYYYMMDD 
 
 
 <chAccChangeInd> 
  
 O 
 2 
 Length of time since the cardholder’s account information with the merchant was last changed. 
Accepted Values: 
01 = Changed during this transaction 
02 = Less than 30 days 
03 = 30−60 days 
04 = More than 60 days 
 
 
 <chAccChange> 
  
 O 
 8 
 Date that the cardholder’s account with the merchant was last changed. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <chAccPwChangeInd> 
  
 O 
 2 
 Indicates the length of time since the cardholder’s account with the merchant had a password change or account reset. 
Accepted Values: 
01 = No change 
02 = Changed during this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <chAccPwChange> 
  
 O 
 8 
 Date that cardholder’s account with the merchant had a password change or account reset. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <shipAddressUsageInd> 
  
 O 
 2 
 Indicates when the shipping address used for this transaction was first used with the merchant. 
Accepted Values: 
01 = This transaction 
02 = Less than 30 days 
03 = 30−60 days 
04 = More than 60 days 
 
 
 <shipAddressUsage> 
  
 O 
 8 
 Date when the shipping address used for this transaction was first used with the merchant. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <txnActivityDay> 
  
 O 
 3 
 Number of transactions (successful and abandoned) for this cardholder account with the merchant across all payment accounts in the previous 24 hours. 
 
 
 <txnActivityYear> 
  
 O 
 3 
 Number of transactions (successful and abandoned) for this cardholder account with the merchant across all payment accounts in the previous year. 
 
 
 <provisionAttemptsDay> 
  
 O 
 3 
 Number of Add Card attempts in the last 24 hours. 
 
 
 <nbPurchaseAccount> 
  
 O 
 4 
 Number of purchases with this cardholder account during the previous six months. 
 
 
 <suspiciousAccActivity> 
  
 O 
 2 
 Indicates whether the merchant has experienced suspicious activity on the cardholder account. 
Values accepted: 
01 = No suspicious activity has been observed 
02 = Suspicious activity has been observed 
 


 
 <shipNameIndicator> 
  
 O 
 2 
 Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction. 
Values accepted: 
• 01 = Account Name identical to shipping Name 
• 02 = Account Name different than shipping Name 
 
 
 <paymentAccInd> 
  
 O 
 2 
 Indicates the length of time that the payment account was enrolled in the cardholder’s account with the merchant. 
Values accepted: 
01 = No account (guest check-out) 
02 = During this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <paymentAccAge> 
  
 O 
 8 
 Date that the payment account was enrolled in the cardholder’s account with the merchant. 
Format accepted: 
Date format = YYYYMMDD 
 
<threeDSRequestorAuthenticationInfo> 
 <threeDSReqAuthMethod> 
  
 O 
 2 
 Mechanism used by the Cardholder to authenticate to the merchant. 
Values accepted: 
01 = No merchant authentication occurred (i.e. cardholder “logged in” as guest) 
02 = Login to the cardholder account at the 3DS Requestor system using merchant’s own credentials 
03 = Login to the cardholder account at the merchant system using federated ID 
04 = Login to the cardholder account at the merchant system using issuer credentials 
05 = Login to the cardholder account at the merchant system using third-party authentication 
06 = Login to the cardholder account at the merchant system using FIDO Authenticator 
07 = Login to the cardholder account at the merchant system using FIDO Authenticator (FIDO assurance data signed) 
08 = SRC Assurance Data 
 
 
 <threeDSReqAuthTimestamp> 
  
 O 
 12 
 Date and time in UTC of the cardholder authentication. 
Format accepted: 
Date format = YYYYMMDDHHMM 
 
 
 <threeDSReqAuthData> 
  
 O 
 20000 
 Data that documents and supports a specific authentication process. 
 
<threeDSRequestorPriorAuthenticationInfo> 
 <threeDSReqPriorAuthMethod> 
  
 O 
 2 
 Mechanism used by the Cardholder to previously authenticate to the merchant. 
Values accepted: 
• 01 = Frictionless authentication occurred by ACS 
• 02 = Cardholder challenge occurred by ACS 
• 03 = AVS verified 
• 04 = Other issuer methods 
 
 
 <threeDSReqPriorRef> 
  
 O 
 36 
 This data element provides additional information to the ACS to determine the best approach for handing a request. 
Value accepted: 
 


This data element contains an ACS Transaction ID for a prior authenticated transaction (for example, the first recurring transaction that was authenticated with the cardholder). 
 
 
 <threeDSReqPriorAuthTimestamp> 
  
 O 
 12 
 Date and time in UTC of the prior cardholder authentication. 
Format accepted: 
Date format = YYYYMMDDHHMM 
 
 
 <threeDSReqPriorAuthData> 
  
 O 
 2048 
 Data that documents and supports a specific authentication process. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + amt + trackid + udf1 + SECRET KEY + udf5 
 


PaymentInit response 
The response, that IPG returns to Merchant after getting PaymentInit request and having verified 
the validity, contains the following fields: 
 
<Response> 
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “PaymentInitResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<paymentID> 
 valid 
 M 
 20 
 Order PaymentID.  
 
<browserRedirectionURL> 
 valid 
 M 
 256 
 IPG URL for browser redirection. 
 
<errorCode> 
 error 
 M 
 20 
 Error Code returned by IPG.  
 
<errorService> 
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + paymentID + SECRET KEY + browserRedirectionURL 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
Notification message 
After payment processing, IPG sends this message to inform the Merchant of the transaction result (if it has been processed) or the error reason (if it has not been processed). The messages exchanged can be formatted in xml or as a html form (nvp), based on the value of the NotificationFormat field of the PaymentInit message. The default, if not specified, is the xml format. 
 
Notification message in the case of xml format has the following structure: 
 
<Request> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
  
 
1st 
levTag 
 2rd 
lev Tag 
 Response Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentNotificationRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<paymentID> 
  
  
 M 
 20 
 Order PaymentID. 
 
<tranID> 
  
 valid 
 M 
 20 
 TransactionID. 
 
<action> 
  
 valid 
 M 
 2 
 Action code. 
 
<payinst> 
  
 valid 
 M 
 20 
 Payment Instrument used for the transaction.  
 
<result> 
  
 valid 
 M 
 20 
 Result of the operation: 
"APPROVED" = Successful preauthorization 
"NOT APPROVED" = Not Authorized preauthorization 
"CAPTURED" = Successful purchase  
"NOT CAPTURED" = Not Authorized purchase 
"DENIED BY RISK" = Not processed due to failure to pass any risk criteria imposed by banks 
"HOST TIMEOUT" = Not processed due to no reply by the authorization system 
"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<auth> 
  
 valid 
 M 
 35 
 Auth Code. 
 
<currencycode> 
  
 valid 
 M 
 3 
 Currency code. 
 
<amt> 
  
 valid 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
  
 valid 
 M 
 255 
 Merchant TrackId. 
 
<ref> 
  
 valid 
 M 
 20 
 Auth system ref number. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<responsecode> 
  
 valid 
 M 
 3 
 Host Response Code. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<cardtype> 
  
 valid 
 M 
 10 
 Brand Id. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<liability> 
  
 valid 
 M 
 1 
 “Y” / “N”. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<RecurContractID> 
  
 valid 
 O 
 30 
 Recurring Payment Contract Identifier. 
 
<recurid> 
  
 valid 
 C 
 20 
 Recurring Payment identifier. Only if Merchant specified <RecurAction>=”ACTIVATION” in the PaymentInit request and terminal is enabled to Rec. Pymnts.  
 
<expDate> 
  
 valid 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
  
 valid 
 M 
 4 
 Card last 4 digits 
 
<cardCountry> 
  
 valid 
 M 
 2 
 card country. Only if payinst = “CC”,”VPAS”,”MPASS” 
 
<ipCountry> 
  
 valid 
 M 
 2 
 IP address country 
 
<cardSHA2> 
  
 valid 
 C 
 32 
 card number hash value, using sha2 (256) algorithm. Only if Merchant specified the <cardSha2> = “Y” field in the PaymentInit request and payinst = “CC”,”VPAS”,”MPASS” 
 
<udf1> 
  
 valid 
 O 
 255 
 user free field 1 
 
<udf2> 
  
 valid 
 O 
 255 
 user free field 2 
 
<udf3> 
  
 valid 
 O 
 255 
 user free field 3 
 
<udf4> 
  
 valid 
 O 
 255 
 user free field 4 
 
<udf5> 
  
 valid 
 O 
 255 
 user free field 5 
 


<riskLevel> 
  
 valid 
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if and terminal is Smash enabled. 
 
<riskThreshold> 
  
 valid 
 C 
 4 
 Risk treshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
  
 valid 
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
  
 valid 
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<myBankBuyerBankAlias> 
  
 valid 
 C 
 256 
 Alias of the Buyer Bank choosen by the buyer. Only if payInst=”MYBANK” 
 
<mpShippingFlag> 
  
 valid 
 C 
 3 
 MasterPass shipping flag configured by the Merchant in GUI: “SUP”/”NOT”/”DYN”. Only if payInst=”MPASS”. –  Future use –  
 
 
 <mpShippingOption> 
 valid 
 C 
 20 
 MasterPass shipping option choosen by the buyer after wallet comeback. Only if payInst=”MPASS” and if <mpShippingFlag>=”DYN”. –  Future use – 
 
 
 <mpShippingRecipientName> 
 valid 
 C 
 100 
 Recipient Name. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingRecipientPhoneNumber> 
 valid 
 C 
 20 
 Recipient Phone Number. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCountry> 
 valid 
 C 
 2 
 Shipping Country. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCountrySubdivision> 
 valid 
 C 
 5 
 Shipping country subdivision. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCity> 
 valid 
 C 
 25 
 Shipping City. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingpostalCode> 
 valid 
 C 
 20 
 Shipping Postal Code. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine1> 
 valid 
 C 
 40 
 Shipping Address Line 1 (Street name, number). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine2> 
 valid 
 O 
 40 
 Shipping Address Line 2 (apt number, suite, etc). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine3> 
 valid 
 O 
 256 
 Shipping Address Line 3 (all info not containable in first 2 lines). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
<errorCode> 
  
 error 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
  
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
  
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + paymentid + tranid + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + paymentid + errorCode + SECRET KEY + errorDesc 


 


 
 
Notification response 
In Notification response, the Merchant sends the URL to which he wants the Customer to be redirected for the presentation of the result page. 
The merchant Notification response message must follow the same format chosen for the Notification request. In the xml case the structure is the following: 
 
<Response> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentNotificationResponse” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<paymentID> 
  
  
 M 
 20 
 Order PaymentID 
 
<browserRedirectionURL> 
  
  
 M 
 512 
 URL for the final browser redirection to the Merchant website 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256). 
String to hash in this exact order (only fields values, not tags): 
msgName + version + paymentID + SECRET KEY + browserRedirectionURL 
 


 
 
 
Financial Request message 
Through a simple exchange of server-to-server messages, the Merchant can make automated 
financial operations (Credit, Capture, Purchase Reversal and Void Preauthorization) remotely. 
 
The fields to be included in the request message are: 
<Request> 
 
1st 
levTag 
  
  
 Mand 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “FinancialRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<tranid> 
  
  
 M 
 20 
 Unique identification code of the original 
transaction, created by IPG and communicated to the Merchant in the Notification Message 
 
<action> 
  
  
 M 
 2 
 Type of action: 
2 = Credit 
3 = Purchase Reversal 
5 = Capture 
9 = Void Preauthorization 
 
<currencycode> 
  
  
 O 
 3 
 currency code 
 
<amt> 
  
  
 M 
 10.2 
 operation amount (nnnnnnnnnn.nn) 
 
<trackid> 
  
  
 M 
 255 
 Identification code associated with the order by the Merchant. Usually this is the identification code of the purchase order on the Merchant site. It is advisable that this code is unique to each transaction. 
 


<udf1> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf2> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf3> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf4> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf5> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + tranid + amt + trackid + udf1 + SECRET KEY + udf5 
 


 
Financial Response message 
The response that IPG returns to Merchant, after evaluating the financial request and processing the 
transaction, contains the following fields: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response 
Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “FinancialResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<recurid> 
 “valid” 
 C 
 20 
 RecurID (if referenced original transaction is under a RecurID, the response reports the RecurID) 
 
<paymentid> 
 “valid” 
 C 
 20 
 PaymentID (if referenced original transaction has a PaymentID, the response reports the PaymentID) 
 
<payinst> 
 “valid” 
 M 
 20 
 Payment instrument used for the transaction (Credit Card, 3D Secure, MasterPass, MyBank) 
 
<tranid> 
 “valid” 
 M 
 20 
 Unique transaction identification code assigned by IPG 
 
<action> 
 “valid” 
 M 
 2 
 Type of action: 
2 = Credit 
3 = Purchase Reversal 
5 = Capture 
9 = Void Preauthorization 
 
<result> 
 “valid” 
 M 
 20 
 Transaction result: 
"CAPTURED" = Successful Captured (if Action 5) 
"CAPTURED" = Successful Credited (if Action = 2) 
"NOT CAPTURED" = Not credited/Re-credited 
“VOIDED” = Successful Written off (if Action =3), or Canceled (if Action=9) 
"DENIED BY RISK" = Denied because exceeding the limits imposed by the bank 
 


"HOST TIMEOUT" = Not processed due to no reply by the authorization system within specified period. 
"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<auth> 
 “valid” 
 M 
 35 
 Authorization code released by the credit card company, concerning the original transaction. 
 
<currencycode> 
 “valid” 
 M 
 3 
 Currency code. 
 
<amt> 
 “valid” 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
 “valid” 
 M 
 255 
 Merchant TrackId.  
 
<ref> 
 “valid” 
 M 
 20 
 Authorization system reference number. 
 
<responsecode> 
 “valid” 
 M 
 3 
 Code granted by the Issuer that identifies, in case of failure, the reason for denying  
 
<udf1> 
 “valid” 
 O 
 255 
 user free field 1. If sent by the Merchant 
 
<udf2> 
 “valid” 
 O 
 255 
 user free field 2. If sent by the Merchant 
 
<udf3> 
 “valid” 
 O 
 255 
 user free field 3. If sent by the Merchant 
 
<udf4> 
 “valid” 
 O 
 255 
 user free field 4. If sent by the Merchant 
 
<udf5> 
 “valid” 
 O 
 255 
 user free field 5. If sent by the Merchant 
 
<cardtype> 
 “valid” 
 M 
 10 
 Brand Id (Visa, MasterCard, AMEX,...) 
 
<expDate> 
 “valid” 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
 “valid” 
 M 
 4 
 Card last 4 digits 
 
<errorCode> 
 “error” 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
 “error” 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 “error” 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + tranid + result + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
 
Payment Query Request message 
Through a simple exchange of server-to-server messages, the Merchant can request information about payment order status. 
 
The fields to be included in the request message are: 
<Request> 
 
1st 
levTag 
  
  
 Mand 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentQueryRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<action> 
  
  
 M 
 2 
 Type of action: 
8 = Payment Query 
 


<paymentid> 
  
  
 M 
 20 
 Unique identification code of the order, created by IPG and communicated to the Merchant in the PaymentInitResponse Message 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + action + SECRET KEY + paymentid 
 


 
Payment Query Response message 
The response that IPG returns to Merchant, after processing the Payment Query request, contains the following fields: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 2nd 
levTag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “PaymentQuaryResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<merchantid> 
  
 M 
 10 
 Unique merchant identificator 
 
<termid> 
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<paymentid> 
  
 M 
 20 
 Order ID 
 
<trackid> 
  
 M 
 255 
 Merchant TrackId.  
 
<tranid> 
  
 M 
 20 
 Unique transaction identification code assigned by IPG 
 
<currencycode> 
  
 M 
 3 
 Currency code. 
 
<amt> 
  
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<status> 
  
 M 
 12 
 Order status: 
"INITIALIZED" = PaymentInit message received and validated by IPG. Payment page has not been displayed to the customer 
"PRESENTED" = Payment page presented, but the customer has not completed the process.                          
“PROCESSED” = The order has been completely processed by the IPG, and confirmation message received from the host. 
“TIMEOUT” = The order has expired due to the host timing out the process. 
 
<result> 
  
 M 
 20 
 Transaction result: 
"CAPTURED" = Successful Captured (if Action 5) 
"CAPTURED" = Successful Credited (if Action = 2) 
"NOT CAPTURED" = Not credited/Re-credited 
“VOIDED” = Successful Written off (if Action =3), or Canceled (if Action=9) 
"DENIED BY RISK" = Denied because exceeding the limits imposed by the bank 
"HOST TIMEOUT" = Not processed due to no reply by the authorization system within specified period. 
 


"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<payinst> 
  
 M 
 20 
 Payment instrument used for the transaction (Credit Card, 3D Secure, Instant Payment, MasterPass, MyBank) 
 
<payinittm> 
  
 M 
 11 
 Order Initialization Date/Time 
 
<payprsntm> 
  
 M 
 11 
 Order Presentment Date/Time 
 
<payprcstm> 
  
 M 
 11 
 Order Processed Date/Time 
 
<udf1> 
  
 O 
 255 
 user free field 1. If sent by the Merchant 
 
<udf2> 
  
 O 
 255 
 user free field 2. If sent by the Merchant 
 
<udf3> 
  
 O 
 255 
 user free field 3. If sent by the Merchant 
 
<udf4> 
  
 O 
 255 
 user free field 4. If sent by the Merchant 
 
<udf5> 
  
 O 
 255 
 user free field 5. If sent by the Merchant 
 
<eci> 
  
 O 
 2 
 3D-Secure Electronic commerce indicator 
 
<cavv> 
  
 O 
 40 
 3D-Secure Cardholder authentication verification value 
 
<xid> 
  
 O 
 40 
 3D-Secure XID value 
 
<liability> 
  
 M 
 1 
 Liability Shift indicator 
 
<riskLevel> 
  
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if and terminal is Smash enabled. 
 
<riskThreshold> 
  
 C 
 4 
 Risk treshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
  
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
  
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<rows> 
  
 C 
 2 
 Number of transaction data rows 
 
<row> 
  
  
  
 [1..n] <row> tags with order’s transaction data 
 
 
 <action> 
  
 2 
 Action code 
 
 
 <tranid> 
  
 20 
 Transaction ID 
 
 
 <msgDateTime> 
  
 24 
 Message creation date/time, in UTC format 
 
 
 <amt> 
  
 10.2 
 Transaction’s amount 
 
 
 <result> 
  
 20 
 Transaction result 
 
 
 <auth> 
  
 20 
 Authorization Code 
 
 
 <cardtype> 
  
 10 
 Brand Id (Visa, MasterCard, AMEX,...) 
 
 
  <responsecode> 
  
 3 
 Host Response Code. 
 
 
 <ref> 
  
 20 
 Authorization system reference number.  
 
 
 <udf1> 
  
 255 
 user free field 1. If sent by the Merchant 
 
 
 <udf2> 
  
 255 
 user free field 2. If sent by the Merchant 
 
 
 <udf3> 
  
 255 
 user free field 3. If sent by the Merchant 
 
 
 <udf4> 
  
 255 
 user free field 4. If sent by the Merchant 
 
 
 <udf5> 
  
 255 
 user free field 5. If sent by the Merchant 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + msgDateTime + paymentid + amt + trackid + udf1 + SECRET KEY +  udf5 
 


 
  MOTO transactions 
Introduction 
IPG provides a service for managing payment transactions with credit cards obtained as a result of sales made by mail or through call centers. This chapter describes necessary merchant activities to integrate with IPG in case of MOTO payment transaction processing. 
The Buyer perspective 
To make a purchase, the Buyer: 
•
 Chooses products 

•
 Creates an order, including card details and sends it to the merchant by email or through the call center. 

•
 Receives an e-mail message notification of payment, if the setting is enabled by the Merchant, to be used as a virtual receipt 


The Merchant perspective 
The Merchant receives a purchase order from the Buyer and: 
•
 Sends a payment request message (TransactionRequest) to the IPG 

•
 Receives a response message (TransactionResponse) with transaction result from IPG 

•
 Presents the result to the Buyer 

•
 Receives an e-mail message notification of payment, if the setting is enabled by the Merchant, to be used as a virtual receipt 


The IPG perspective 
IPG receives a payment request (TransactionRequest) from the Merchant and: 
•
 Processes the transaction by sending the request to the credit card company authorisation systems and gets a response 

•
 Sends to the merchant a response message (TransactionResponse) with the transaction result 

•
 Sends an e-mail message notification of payment to the Buyer and / or the Merchant (if the setting is enabled by the Merchant) to be used as virtual receipt. 


Merchant Integration 
Introduction 
IPG includes the presence of some direct communications with the Merchant server to complete 
the transactions. This exchange of messages can be implemented in two ways: 
•
 through the installation of a special plug-in 

•
 by creating their own communication interface 


 
The plug-in is easy to integrate and is compatible with all sites developed in Java, C/C++, ColdFusion, ActiveX/COM, VB, ASP, .NET. 
 
If it is not possible or desirable to use the plug-in (e.g. because it is not compatible with the 
technological platform, or the site is published via an external provider in shared hosting) it is 
always possible, according to the specifications provided, to create your own communication 
interface. 
 
 
Messages between the merchant site and IPG 
Message Verifier 
All messages exchanged between Merchant Site and IPG are signed using Message Verifier (msgVerifier) which is dynamically composed of specific message data (see bellow message specifications). 
Steps for Message Verifier generation are: 
a) Concatenate specified message data to create Message Verifier string; 
b) Remove spaces; 
c) Hash the string created in previous step using SHA256 algorithm. 
Example of Message Verifier creation for PaymentInit request message - 
Message data 
 Value 
 
msgName 
 PaymentInitRequest 
 
version 
 1 
 
id 
 89110001 
 
password 
 test1234 
 
amt 
 15.00 
 
trackid 
 CTV-TEST-PureBuy-1 
 
udf1 
 AA 
 
SECRET KEY 
 YXKZPOQ9RRLGPDED5D3PC5BJ 
 
udf5 
 EE 
 


 
a) Concatenate msgName, version, id, password, amt, trackid, udf1, SECRET KEY and udf5: 
PaymentInitRequest 1 89110001 test1234 15.00 CTV-TEST-PureBuy-1 AA YXKZPOQ9RRLGPDED5D3PC5BJ EE 
 
 
PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE 
 
c) Hash of step (b) value using SHA256 algorithm 
 
b3a54617d2e9acd9079d85ea15d066a5892e3cabe1b41da4891b3a65ffaa0cce 
 
Payment Request 
This message (TransactionRequest) is sent by the Merchant to IPG to start a transaction. It uses the following items:> 
<Request> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “TransactionRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 tranPortalID 
 
<password> 
  
  
 M 
 16 
 tranPortal pwd 
 
<payinst> 
  
  
 O 
 20 
 fixed: "CC" 
 
<action> 
  
  
 M 
 2 
 action code: 1 or 4 
 
<currencycode> 
  
  
 M 
 3 
 currency code 
 
<amt> 
  
  
 M 
 10.2 
 nnnnnnnnnn.nn 
 
<trackid> 
  
  
 M 
 255 
 Merchant TrackId 
 
<member> 
  
  
 C 
 384 
 cardholder name - Mandatory if recurAction = “” or recurAction = “activation” 
 
<addr> 
  
  
 O 
 255 
 cardholder address 
 
<zip> 
  
  
 O 
 20 
 cardholder postal code 
 
<card> 
  
  
 C 
 19 
 card number – Mandatory if recurAction = “” or recurAction = “activation” 
 
<cvv2> 
  
  
 O 
 4 
 card security code. Could be mandatory for some merchants 
 
<expYear> 
  
  
 C 
 4 
 card expiration year - Mandatory if recurAction = “” or recurAction = “activation” 
 
<expMonth> 
  
  
 C 
 2 
 card expiration month - Mandatory if recurAction = “” or recurAction = “activation” 
 
<eci> 
  
  
 O 
 2 
 3DS ECI value. Only used by ECSEC merchants 
 
<xid> 
  
  
 O 
 40 
 3DS XID value. Only used by ECSEC merchants 
 
<cavv> 
  
  
 O 
 40 
 3DS CAVV value. Only used by ECSEC merchants 
 
<clientIPAddress> 
  
  
 O 
 25 
 buyer browser IP Address. Only used by ECSEC merchants 
 
<clientUserAgent> 
  
  
 O 
 512 
 buyer browser user agent string. Only used by ECSEC merchants 
 
<clientHTTPHeaders> 
  
  
 O 
 2048 
 buyer browser http headers values. Only used by ECSEC merchants 
 
<langid> 
  
  
 O 
 3 
 language used by the buyer on merch. Website. Only used by ECSEC merchants 
 
<buyerUserId> 
  
  
 O 
 50 
 UserId with which the buyer is registered at the merchant web site. Only used by ECSEC merchants 
 
<recurAction> 
  
  
 M 
 10 
 Possible Values (case insensitive): 
“activation” – the Merchant requires a new Recurring Payment to be activated 
“merchant_initiated” – a following transaction on an active recurring payment is requested 
“delete” – a recurring payment cancellation is requested 
“” – indicates a normal s2s transaction 
 


<recurContractID> 
  
  
 O 
 30 
 Optional information to collect the Recurring Payment Contract Identifier (only if recurAction=”activation”, otherwise ignored). 
 
<pymnDscr> 
  
  
 O 
 255 
 Recurring Payment description 
 
<recurid> 
  
  
 C 
 20 
 RecurID: Mandatory if recurAction= “merchant_initiated” or ”delete”, otherwise ignored 
 
<recurNewCardExpDate> 
  
  
 O 
 6 
 Rec.Pymn. new card expiration date (format YYYYMM) – Considered if recurAction=“merchant_initiated”, otherwise ignored 
 
<bankStmtFreeText> 
  
  
 O 
 50 
 Free Text that will be forwarded to Auth System in p127, in order to be printed on bank account statement (replaces “B24POSFTEXT” special value in UDF1) 
 
<udf1> 
  
  
 O 
 255 
 user free field 1 
 
<udf2> 
  
  
 O 
 255 
 user free field 2 
 
<udf3> 
  
  
 O 
 255 
 user free field 3 
 
<udf4> 
  
  
 O 
 255 
 user free field 4 
 
<udf5> 
  
  
 O 
 255 
 user free field 5 
 
<buyerFirstName> 
  
  
 O 
 50 
 Buyer first name 
 
<buyerLastName> 
  
  
 O 
 50 
 Buyer last name 
 
<buyerPhoneNumber> 
  
  
 O 
 20 
 Buyer phone number 
 
<buyerEmailAddress> 
  
  
 O 
 255 
 Buyer email address 
 
<cartContent> 
  
  
 O 
  
 Order content. 
 
 
 <item> 
  
 C 
  
 [1..n] <item> tags if <cartContent> is present 
 
 
  
 <productId> 
 M 
 30 
 product identifier 
 
 
  
 <productDesc> 
 O 
 255 
 product description 
 
 
  
 <qty> 
 M 
 8 
 product quantity in the cart 
 
 
  
 <singlePrice> 
 M 
 10.2 
 product single price  
 
<shippingInfo> 
  
  
 O 
  
 Shipping details 
 
 
 <recipientFirstName> 
  
 C 
 50 
 Recipient First Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientLastName> 
  
 C 
 50 
 Recipient Last Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientPhoneNumber> 
  
 O 
 20 
 Recipient Phone Number. 
 
 
 <ShippingAddress> 
  
 C 
  
 Shipping Address. Mandatory if <shippingInfo> is present 
 
 
  
 <country> 
 C 
 3 
 Shipping Country. Mandatory if <buyerShippingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Shipping City. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Shipping Postal Code. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Shipping Address Line 1 (Street name, number). Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Shipping Address Line 2 (apt number, suite, etc) 
 
 
  
 <addrLine3> 
 O 
 40 
 Shipping Address Line 3 (all info not containable in first 2 lines) 
 
<billingInfo> 
  
  
 O 
  
 Billing details 
 


 
 <billingFirstName> 
  
 C 
 50 
 First name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingLastName> 
  
 C 
 50 
 Last name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingAddress> 
  
 C 
  
 Billing Address. Mandatory if <billingInfo> is present  
 
 
  
 <country> 
 C 
 3 
 Billing Country. Mandatory if <billingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Billing City. Mandatory if <billingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Billing Postal Code. Mandatory if <billingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Billing Address Line 1 (Street name, number). Mandatory if <billingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Billing Address Line 2 (Street name, number) 
 
 
  
 <addrLine3> 
 O 
 40 
 Billing Address Line 3 (all info not containable in first 2 lines) 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + recurid + amt + trackid + udf1 + SECRET KEY + udf5 
 


 
Payment response 
After payment processing, IPG sends this message (TransactionResponse) to inform the Merchant of the transaction result (if it has been processed) or the error reason (if it has not been processed). Payment response message has the following structure: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response 
Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “TransactionResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<tranID> 
 valid 
 M 
 20 
 TransactionID. 
 
<action> 
 valid 
 M 
 2 
 action code. 
 
<payinst> 
 valid 
 M 
 20 
 payment instrument used for the transaction. 
 
<result> 
 valid 
 M 
 20 
 Transaction result. 
 
<auth> 
 valid 
 M 
 35 
 Auth code. 
 
<currencycode> 
 valid 
 M 
 3 
 Currency code. 
 
<amt> 
 valid 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
 valid 
 M 
 255 
 Merchant TrackId. 
 
<ref> 
 valid 
 M 
 20 
 Auth system ref number. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<responsecode> 
 valid 
 M 
 3 
 Host Response Code. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<cardtype> 
 valid 
 M 
 10 
 brand Id.  
 
<recurid> 
 valid 
 C 
 20 
 Recurring Payment identifier. Only if Merchant specified in the request: 
 


- <recurAction>=”activation” (in this case, it’s the RecurID of a newly generated recurring payment) 
- <recurAction>=”merchant_initiated”, “delete” (in this case, it’s the RecurID provided by the Merchant in the rec. payment instance request).  
 
<expDate> 
 valid 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
 valid 
 M 
 4 
 Card last 4 digits 
 
<recurContractID> 
 valid 
 C 
 30 
 Recurring Payments Contract Identifier indicated by the Merchant in the request. 
 
<recurNewCardExpDate> 
 valid 
 C 
 6 
 If a new card expiration date is successfully used for a recurring payment instance, the new exp date is reported to the merchant. 
 
<cardCountry> 
 valid 
 M 
 2 
 card country.  
 
<udf1> 
 valid 
 O 
 255 
 user free field 1 - Only if Merchant sent it in the request 
 
<udf2> 
 valid 
 O 
 255 
 user free field 2 - Only if Merchant sent it in the request 
 
<udf3> 
 valid 
 O 
 255 
 user free field 3 - Only if Merchant sent it in the request 
 
<udf4> 
 valid 
 O 
 255 
 user free field 4 - Only if Merchant sent it in the request 
 
<udf5> 
 valid 
 O 
 255 
 user free field 5 - Only if Merchant sent it in the request 
 
<riskLevel> 
 valid 
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if terminal is Smash enabled. 
 
<riskThreshold> 
 valid 
 C 
 4 
 Risk threshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
 valid 
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
 valid 
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<errorCode> 
 error 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + tranid + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
 
 
 
  
  Plug-in interface specifications 
Plug-in is a application module/library which provides integration implementation directly to the merchant. In this way, the developer skips low level integration and works directly with the provided IPG API.  
There are two plug-in APIs provided:  
•
 Java API for integration with java based merchant applications 

•
 DLL API for integration with Windows based merchant application 


Java plugin 
Java Plug-in implementation is provided through the ipg-java-plugin-src-1.x.x.jar file. This file is part of every distribution of IPGDemoPlugin simulator in a following file: IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar.  

• Java Plug-in API is provided with the following interface: rs.asoft.ipg.plugin.service. IPGPaymentService. 1.
 Presents all internet payment methods provided by IPG server. In order to choose optimal integration approach, it is essential to understand all the integration options. 

2.
 Provides ipgdemo.log file with detailed logging description of each action when simulating internet payments. Merchant developers should use it to understand what parameters and data are necessary to be provided for a successful communication with the IPG server. 

3.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war file demonstrates an example of the deployment package necessary to integrate with the IPG server.   

4.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> IPGDemoPlugin-src-1.*.jar contains all Java classes necessary for the Merchant to develop in order to fully integrate with the IPG server. 

5.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> ipg-java-plugin-src-1.*.*.jar contains Java plugin to be used out of box in order to speed up and simplify the integration 

6.
 If IPG Demo Plugin application is installed on the merchant host server, merchant developer will be able to compare the processing  between merchant and simulator implementation 





Java IPG Demo Plugin Simulator 
IPG Demo Plugin Simulator is the essential tool provided in order to simplify integration with the merchant site. The Java version of IPG Demo Plugin Simulator is provided via IPGDemoPluginServer.zip which is able to download via https://<ipgtesthost> /IPGDemoPlugin/demoPlugin.html?msgName=HelpRequest help page.  
IPGDemoPluginServier.zip contains simple Jetty server and IPG Demo Plugin client application. To run the IPG Demo Plugin simulator, it is enough to unzip the archive and double click IPGDemoPlugin.bat (if having issues please follow the Java installation steps on the help page).  
 
Use of IPG Demo Simulator has following benefits: 
.    
 
IPG Payment Service Factory 
Best way to create an instance of IPGPaymentService is via rs.asoft.ipg.plugin.service. IPGPaymentServiceFactory class by invoking IPGPaymentService getIPGPaymentService(int ipgClientType) method. Currently following IPG client types are supported: 
•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_GENERIC_XML = 1 – Default implementation for using custom XML protocol. 

•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_REST_XML = 2 – REST XML implementation 

•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_REST_JSON = 3 – REST Json implementation 


 
Example: In order to create IPG Generic XML instance following code is to be used: 
int ipgClientType = IPG_CLIENT_TYPE_GENERIC_XML; 
IPGPaymentService ipgPaymentService = IPGPaymentServiceFactory.getIPGPaymentService(ipgClientType); 
IPG Logger Interface 
The default logging implementation is rs.asoft.ipg.plugin.service.IPGLoggerLog4jImpl class as a logging wrapper around Log4j implementation.  
In order to substitute logging implementation create a new implementation by extending rs.asoft.ipg.plugin.service.IPGLogger and use logger following method of IPGPaymentServiceFactory class: 
IPGPaymentService ipgPaymentService = IPGPaymentServiceFactory.getIPGPaymentService(ipgClientType, ipgLogger); 
 
 
IPG Payment Service Interface 
The Java plugin API - IPGPaymentService functions provides main IPG business functions.  The functions are divided in the following groups: 
 
•
  Setup methods – to substitute following IPG Payment Service client modules: 

a)
 void setHttpSender(HttpSender httpSender) – communication with IPG server 

b)
 void setIPGXmlParser(IPGXmlParser ipgXmlParser) – parsing of XML request and response messages (applicable only in case of IPG_CLIENT_TYPE_GENERIC_XML) 


 
•
 3DSecure methods – provides methods to invoke when integrating with standard 3DSecure payment transactions (Cardholder data collected on the IPG server): 

a)
 PaymentInitResponse sendPaymentInitRequest(PaymentInitRequest) – to start 3DSecure payment transaction with IPG server 

b)
 byte[] procesNotificationXmlRequest(String secretKey, byte[] xmlBytes, NotificationUrlBulder notificationUrlBulder) – utility function to parse XML Notification Request submitted by IPG server and create Notification Response XML bytes. 

c)
 byte[] procesNotificationFormRequest(String secretKey, Map requestParameters, NotificationUrlBulder notificationUrlBulder) – utility function to parse HTTP  Notification Request submitted by IPG server and create Notification Response URL bytes 

d)
 byte[] procesNotificationJsonRequest(String secretKey, byte[] jsonBytes, NotificationUrlBulder notificationUrlBulder) – utility function to parse JSON  Notification Request submitted by IPG server and create Notification Response JSON bytes 


 
•
 VI3DSecure methods – provides methods to invoke when integrating with standard 3DSecure payment transactions(Cardholder data collected on the Merchant PCI Compliant server): : 

a)
 TransactionVI3DSResponse sendTransactionVI3DSVerifyEnrollment(TransactionVI3DSVEReqRequest) – to start 3DSecure payment transaction with IPG server 

b)
 TransactionVI3DSResponse sendTransactionVI3DSPARes(TransactionVI3DSPAResRequest) – to finish 3DSecure payment transaction with IPG server 


 
•
 MOTO (Mail Order / Telephone Order) method – provides method to submit MOTO transaction (Cardholder data collected on the Merchant PCI Compliant server): 

a)
 TransactionResponse sendTransactionRequest(TransactionRequest) ) – to process MOTO transaction on IPG server 


 
•
 Financial method – provides method to submit Financial transaction (CREDIT, VOID_PURCHASE, CAPTURE, VOID_CREDIT, VOID_CAPTURE, VOID_AUTHORIZATION, GAMING_PAYMENT): 

a)
 FinancialResponse sendFinancialRequest(FinancialRequest financialRequest) ) – to process Financial transaction on IPG server 


 
•
 Batch method – provides method to submit MOTO transactions via a batch file (Cardholder data collected on the Merchant PCI Compliant server): 

b)
 BatchResponse sendBatchFileRequest(BatchFileRequest) to process MOTO transactions on IPG server, provided in the Batch file 


 
DLL plugin 
Windows DLL Plug-in implementation is provided through the IPGPaymentService.dll and IPGPaymentService.tlb files. These files are part of the IPGDemoPlugin simulator – Windows IIS version.  
If you wish to receive the files, please submit the request to the IPG support contact.   
 
  Direct interface specifications 
If you don‘t have a suitable platform to use plug-in or want to create your own interface, all information on the communication protocol, the transmission and reception of the message formats, their variables and error messages are listed below. 
 
Communication protocol specifications 
•
 Target (action): 


- in a test environment 
<TestEnvironment_IP_address>/IPGWeb/servlet/IPGPaymentXMLServlet 
 
Note: Test environment IP address will be communicated to you via e-mail. 
 
- in a production environment 
<Production_IP_address>/IPGWeb/servlet/PaymentInitHTTPServlet 
•
 Method: POST 

•
 Content-Type: “application/xml” 


Data transmission format 
Examples of messages sent by Merchant to IPG: 
 
PaymentInit Message 
<request> 
  <msgName>PaymentInitRequest</msgName> 
  <version>1</version> 
  <id>89110001</id> 
  <password>test1234</password> 
  <langId>USA</langId> 
  <buyerFirstName /> 
  <buyerLastName /> 
  <buyerUserId /> 
  <buyerPhoneNumber /> 
  <buyerEmailAddress /> 
  <clientIpAddress /> 
  <clientUserAgent /> 
  <clientHttpHeaders /> 
  <action>1</action> 
  <recurAction /> 
  <recurContractId>RECURCNTRID-12345</recurContractId> 
  <amt>12.35</amt> 
  <payinst /> 
  <currencycode>978</currencycode> 
  <trackid>CTV-TEST-PureBuy-1</trackid> 
  <responseURL>http://192.168.100.104:8080/IPGDemoPlugin/paymentNotification.html</responseURL> 
  <errorURL>http://192.168.100.104:8080/IPGDemoPlugin/paymentError.html</errorURL> 
  <cardSHA2>Y</cardSHA2> 
  <paymentTimeout>30</paymentTimeout> 
  <bankStmtFreeText /> 
  <pymnDscr /> 
  <instructedFees /> 
  <notificationFormat>xml</notificationFormat> 
  <paymentPageMode>0</paymentPageMode> 
  <udf1>AA</udf1> 
  <udf2>BB</udf2> 
  <udf3>CC</udf3> 
  <udf4>DD</udf4> 
  <udf5>EE</udf5> 
<msgVerifier>i/CFOYVGoVdNrAg+AdqnMav4QDv6WhXBJlirRTiU5yY=</msgVerifier> 
</request> 
 
Payment Message 
<request> 
  <msgName>FinancialRequest</msgName> 
  <version>1</version> 
  <id>89110001</id> 
  <password>test1234</password> 
  <action>2</action> 
  <amt>1.00</amt> 
  <currencycode>978</currencycode> 
  <trackid>A1B2C3</trackid> 
  <tranid>666311898221172199</tranid> 
  <udf1>AA</udf1> 
  <udf2>BB</udf2> 
  <udf3>CC</udf3> 
  <udf4>DD</udf4> 
  <udf5>EE</udf5> 
  <msgVerifier>FJcbvZ5VE0grZgaOHsh6N+apgEl2yS+v5gksMhMMYCI=</msgVerifier> 
</request> 
Data reception format 
Examples of messages sent by IPG to Merchant: 
 
PaymentInit Response: 
<response type="valid"> 
<msgName>PaymentInitResponse</msgName> 
<version>1</version> 
<msgDateTime>2017-08-07 10:49:01.788</msgDateTime> 
<paymentid>490861957491072190</paymentid> 
<browserRedirectionURL>http://ipg-test:9080/IPGWeb/servlet/PaymentSelection.html</browserRedirectionURL> 
<msgVerifier>K5s0L0+Fpm2C6bvt4Own9ExH0cC82083I23B+mxcEMA=</msgVerifier> 
</response> 
 
Payment Response: 
<response type="valid"> 
<msgName>FinancialResponse</msgName> 
<version>1</version> 
<msgDateTime>2017-08-07 11:23:15.260</msgDateTime> 
<paymentid>375113018221172196</paymentid> 
<action>2</action> 
<currencycode>978</currencycode> 
<amt>5.00</amt> 
<payinst>CC</payinst> 
<cardtype>VISA</cardtype> 
<expdate>203603</expdate> 
<cardlastfourdigits>0004</cardlastfourdigits> 
<result>CAPTURED</result> 
<auth>720479</auth> 
<ref>721911012683</ref> 
<responsecode>00</responsecode> 
<tranid>596343336231172190</tranid> 
<trackid>A1B2C3</trackid> 
<udf1>AA</udf1> 
<udf2>BB</udf2> 
<udf3>CC</udf3> 
<udf4>DD</udf4> 
<udf5>EE</udf5> 
<msgVerifier>MZTL7EJNe3Xsk0qgNPkJJpZaU89K1XotD23AyIsZGUY=</msgVerifier> 
</response> 
 
 
  IPG Demo Plugin 
For better understanding of merchant integration, the IPG Demo Plugin is available. It simulates messages exchanging between merchant server and payment gateway server. Additional technical information are provided through online log which is presented during the plugin is running. Detailed instruction for how to use IPG Demo Plugin are provided in AsoftIPG Transactions User Guide.  
To activate IPG Demo Plugin: 
1.
 access to IPG simulator’s URL address (the address will be provided by Bank’s contact person); 

2.
 Open Help menu; 

3.
 Download IPG Demo Plugin; 

4.
 Unzip the IPGDemoPluginServer.zip file; 

5.
 Update the value of the parameter "webapp.address" in ipgDemoPluginCfg.properties file (replace <merchantsiteurl> with your public IP address); 

6.
 Run IPGDemoPlugin.bat file. 


 
The IPG Demo log provides a detailed insight into the correct processing of the client application and demonstration of an optimal integration method.  
 
For better understanding the procedure of generating Message Verifier (MsgVerifier) fields, do the following: 
1. Perform payment transaction using IPG Demo application with predefined parameters; 
2. Search for “Message Verifier Base loaded, messageVerifierBase:..” row in IPG Demo log file to see how looks like MsgVerifier string for the transaction preformed in previous step; 
3. Inspect method IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar -> rs.asoft.ipg.plugin.service.IPGPaymentServiceSupport.generateMessageVerifier  to consider the way of Message Verifier generating using SHA256 algorithm; 
4. Inspect method IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar -> rs.asoft.ipg.plugin.model.PaymentInitRequest -> PaymentInitRequest.getMessageVerifierBase()  to consider the way of Message Verifier for PaymentInit message generating. 
  Test environment 
IPG provides a test environment where the Merchant can freely perform transactions to properly 
prepare the interface for the transition into production. 
 
The test environment is always available, even if 24-hour availability cannot be guaranteed, as a 
result of corrective and evolutionary maintenance interventions that could make it temporarily 
unusable, without notice. 
 
Variables to be set for the creation of PaymentInit message 
If you use the plug-in, use the following URL for an IPG test connection: 
•
 <TestEnvironment_IP_address>/IPGDemoPlugin/demoPlugin.html 


 
If you are using direct interfacing, the full address to create the connection is as follows: 
•
 <TestEnvironment_IP_address>/IPGWeb/servlet/IPGPaymentXMLServlet 


 
The variables to be set in a fixed manner are the following: 
•
 Response URL: <TestEnvironment_IP_address>/IPGDemoPlugin/paymentNotification.html 

•
 Error URL: <TestEnvironment_IP_address>/IPGDemoPlugin/paymentError.html 


 
Note: Test environment IP address and Secret Key will be communicated to you via e-mail. 
 
Other parameters can be defined freely. 
 
Mandatory test cases 
It is mandatory to perform the following tests, which are the most frequent real case 
studies, before sending the confirmation of the end of the test to Customer support and then 
requesting the transition into production. 
 
Test case n°1 – Successful e-commerce transaction 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, use the following card: 
Terminal ID 
 Terminal password 
 Card Number 
 Expiry 
 CVV2 
 
89110001 
 test1234 
 4012001037141112 
 Any future date 
 Any 3-digits number 
 


 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (paymentid, tranid, trackid, msgDateTime, result, currencycode, amt, auth, udf1, udf2, udf3, udf4, udf5, cardtype, payinst, liability, responsecode). 

•
 the transaction is successful (result = "APPROVED" if you used Action = 4, or 


"CAPTURED" if you used Action = 1) 
•
 The browser has been re-directed properly to the address provided in the PaymentNotificationResponse message. 


 
 
 
Test case n°2 – Transaction not authorized 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, use the following card: 
 
Terminal ID 
 Terminal password 
 Card Number 
 Expiry 
 CVV2 
 
89110001 
 test1234 
 4539990000000020 
 Any future date 
 Any 3-digits number 
 


 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (result = NOT CAPTURED; responsecode = 51) 

•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
Test case n°3 – Transaction canceled by buyer 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, press ‘Cancel’ button. 
 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (PaymentID, errorCode, errorService, errorDesc) 

•
 the “errorCode” field shows “PY20090” and the “errorDesc” field contains the error 


description “Customer canceled transaction” 
•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
Test case n°4 – Financial operations 
 
Repeat test case n°1 and memorize Transaction ID contained in Notification message. 
 
Create Payment Request message:  
•
 insert Transaction ID memorized in previous step 

•
 specify appropriate action type (2- Credit or 3-Purchase Reversal if original transaction was 1-Purchase, or, 5-Capture or 9-Preauthorization Void if original transaction was 4-Preauthorization). 


 
Submit Payment Request message. 
 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all required fields (paymentid, tranid, trackid, msgDateTime, result, currencycode, amt, auth, udf1, udf2, udf3, udf4, udf5, cardtype, payinst, liability, responsecode). 

•
 the transaction is successful (ResultCode = "CAPTURED" if you used Action = 2 and 5, or 


"VOIDED" if you used Action = 3 and 9) 
•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
 
Note: Repeat test case for various financial operation (Credit, Purchase Reversal, Capture and Preauthorization Void). 
  HPP Customization 
The Hosted Payment Page presented by IPG to the Buyer can be customized by the Merchant. 
Without customization, the HPP is proposed with the standard graphics and layout prepared by 
the bank. 
 
The Merchant can apply customization autonomously using the specific features on the Back Office site that allow you to: 
•
 Select one of the two graphic templates available, one developed vertically ("Layout1"), and the other horizontally ("Layout2"); 

•
 Vary the number of graphics settings (background colors, text, and button colour; font, borders and backgrounds of the input fields, thickness, color and curvature of the form borders, thickness and curvature of the buttons, etc.); 

•
 Upload an image (banner, logo etc.), and specify its position (template #1 only) 

•
 Set up a line of text with business reference data or another message for users (template #1 only) 

•
 Upload a background image, specifying the position of the screen and any repetition, and set the degree of transparency of the form to see the background beneath it. 


 
Any change is displayed in real time in a sample HPP ("sample page") that is active while using the 
customization features, while it has no effect on the actual production page. 
 
A "Save" button, when clicked, makes sure that the changes are made immediately to the production HPP, unless the bank has requested an approval process. In this case: 
•
 The "Save" button only implies saving changes to the Sample Page (to resume work at a later time); 

•
 On completion of work, the "Submit for Approval" button appears to submit the customization for approval by the bank. Customization is then Pending until approved by the bank. In this status, the customization is "frozen" and cannot be modified further until the decision of the bank; 

•
 At the time of the decision: 


a. The Merchant receives a notification on the Home Page by the Back Office bearing this decision. In case of refusal, the reason shall also be given. The Merchant also receives the notification by email; 
b. If the decision is successful, the customization automatically becomes operational. No action is required by the Merchant. 
c. In any case, the customization is unlocked and can be changed again 
 
The Merchant can update their customization when appropriate without limitation. This allows the 
application of temporary customizations for specific promotional campaigns or other business 
needs. 
 
It is also possible to cancel the customization (using "Revert"). In this case, the Buyers see 
the HPP with the standard graphics as set by the bank 
 
For full details on the customization features available and how they work, see the User Manual 
for the Back Office, which is supplied upon service activation. 
 
Examples of Layout1 and Layout2 
 

Customization on Smartphones and Tablets 
The HPP is carried out using responsive technology. This means that the display is optimal even 
for users making payments using their smartphone or tablet, and the customization applied is 
accurately reflected on these devices without any additional activities. 
 
For smartphones, it is important to note that IPG will always display Layout1 (the vertical model) 
regardless of the layout chosen by the Merchant (this choice has value for users using desktop or 
tablet devices). It is recommended, therefore, to always complete the customization of both 
layouts. 
 
 
 
 
 
 
 
 
Appendix A – Response Codes 
 
 
00 
 Approved or completed successfully 
 
01 
 Refer to card issuer 
 
02 
 Refer to special conditions for card issuer 
 
03 
 Invalid merchant 
 
04 
 Pick-up card 
 
05 
 Do not honor 
 
06 
 Error 
 
07 
 Pick-up card, special condition 
 
08 
 Honor with identification 
 
09 
 Request in progress 
 
11 
 Approved (VIP) 
 
12 
 Invalid transaction 
 
13 
 Invalid amount 
 
14 
 Invalid card number (no such number) 
 
15 
 No such issuer 
 
30 
 Format error 
 
31 
 Bank not supported by switch 
 
33 
 Expired card 
 
34 
 Suspected fraud 
 
35 
 Card acceptor contact acquirer 
 
36 
 Restricted card 
 
37 
 Card acceptor call acquirer security 
 
38 
 Allowable PIN tries exceeded 
 
39 
 No credit account 
 
41 
 Lost card 
 
43 
 Stolen card, pick-up 
 
51 
 Not sufficient funds 
 
54 
 Expired card 
 
55 
 Incorrect personal identification number 
 
56 
 No card record 
 


57 
 Transaction not permitted to cardholder 
 
58 
 Transaction not permitted to terminal 
 
61 
 Exceeds withdrawal amount limit 
 
62 
 Restricted card 
 
65 
 Exceeds withdrawal frequency limit 
 
68 
 Response received too late 
 
75 
 Allowable number of PIN tries exceeded 
 
from 
76 to 
89 
 Reserved for private use 
 
90 
 Cut-off is in process, a switch is ending business for a day and 
starting the next (transaction can be sent again in a few minutes) 
 
91 
 Issuer or switch is inoperative 
 
92 
 Financial institution or intermediate network facility cannot be 
found for routing 
 
94 
 Duplicate transmission 
 
96 
 System malfunction 
 
from 
N0 
to R8 
 Reserved for private use
</file>

<file path="class-novabankaipg.php">
<?php
/**
 * Novabanka IPG33 Payment Gateway Integration
 *
 * @package    NovaBankaIPG
 * @author     Milovan Tatić
 * @copyright  Milovan Tatić
 * @license    Free for private use. Commercial use is not allowed without permission.
 *
 * @wordpress-plugin
 * Plugin Name: Novabanka IPG33 Payment Gateway
 * Description: 3D Secure payment gateway integration for WooCommerce
 * Version:     1.0.0
 * Author:      Milovan Tatić
 * Text Domain: novabankaipg
 * Domain Path: /languages
 * Requires PHP: 7.4
 * WC requires at least: 5.0
 * WC tested up to: 8.0
 */

namespace NovaBankaIPG;

use NovaBankaIPG\Core\NovaBankaIPGGateway;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\ThreeDSHandler;

defined( 'ABSPATH' ) || exit;

// Define plugin directory using WordPress constants.
define( 'NOVABANKAIPG_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
define( 'NOVABANKAIPG_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
define( 'NOVABANKAIPG_VERSION', '1.0.0' );

// Include necessary interfaces and classes.
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Exceptions/class-novabankaipgexception.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-logger.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-api-handler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Interfaces/interface-data-handler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-logger.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-datahandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-apihandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-threedshandler.php';
require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Utils/class-messagehandler.php';

/**
 * Main plugin class for NovaBanka IPG33 Payment Gateway
 *
 * Handles plugin initialization, component loading, and WooCommerce integration.
 *
 * @package NovaBankaIPG
 * @since 1.0.0
 * @var self|null $instance Singleton instance of the plugin
 * @var Core\NovaBankaIPGGateway $gateway Payment gateway instance
 * @var Utils\APIHandler $api_handler API handler instance
 * @var Utils\Logger $logger Logger instance
 * @var Utils\DataHandler $data_handler Data handler instance
 * @var Utils\ThreeDSHandler $threeds_handler ThreeDS handler instance
 */
class NovaBankaIPG {
	/**
	 * Singleton instance of the plugin
	 *
	 * @var self|null
	 */
	private static $instance = null;

	/**
	 * Payment gateway instance
	 *
	 * @var Core\NovaBankaIPGGateway
	 */
	private $gateway;

	/**
	 * API handler instance
	 *
	 * @var Utils\APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance
	 *
	 * @var Utils\Logger
	 */
	private $logger;

	/**
	 * Data handler instance
	 *
	 * @var Utils\DataHandler
	 */
	private $data_handler;

	/**
	 * ThreeDS handler instance
	 *
	 * @var Utils\ThreeDSHandler
	 */
	private $threeds_handler;

	/**
	 * Get the singleton instance of the plugin.
	 *
	 * @return self The singleton instance.
	 */
	public static function instance() {
		if ( null === self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Constructor for the NovaBankaIPG class.
	 *
	 * Initializes hooks for the plugin.
	 */
	private function __construct() {
		$this->init_hooks();
	}

	/**
	 * Initialize hooks for the plugin.
	 */
	private function init_hooks() {
		add_action( 'plugins_loaded', array( $this, 'check_woocommerce_active' ) );
		add_action( 'plugins_loaded', array( $this, 'init_plugin' ) );
		add_filter( 'woocommerce_payment_gateways', array( $this, 'add_gateway' ) );
		add_action( 'wp_enqueue_scripts', array( $this, 'enqueue_scripts' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );
		add_action( 'woocommerce_api_novabankaipg', array( $this, 'handle_wc_api' ) );
	}

	/**
	 * Check if WooCommerce is active.
	 */
	public function check_woocommerce_active() {
		if ( ! class_exists( 'WooCommerce' ) ) {
			add_action( 'admin_notices', array( $this, 'woocommerce_missing_notice' ) );
		}
	}

	/**
	 * Initialize the plugin.
	 */
	public function init_plugin() {
		// Load text domain.
		load_plugin_textdomain( 'novabankaipg', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );

		// Register the gateway class.
		require_once NOVABANKAIPG_PLUGIN_DIR . 'includes/Core/class-novabankaipggateway.php';

			// Initialize components.
			$this->init_components();
	}

	/**
	 * Initialize components.
	 */
	private function init_components() {
		// Initialize Logger first.
		$this->logger = new Logger( 'novabankaipg' );

		// Initialize Data Handler.
		$this->data_handler = new DataHandler();

		// Get gateway settings.
		$settings = $this->get_gateway_settings();

		// Initialize API Handler with settings.
		$this->api_handler = new APIHandler(
			$settings['api_endpoint'],
			$settings['terminal_id'],
			$settings['terminal_password'],
			$settings['secret_key'],
			$this->logger,
			$this->data_handler,
			$settings['test_mode'] ?? 'yes' // Add test_mode parameter with default 'yes'.
		);

		// Initialize 3DS Handler.
		$this->threeds_handler = new ThreeDSHandler(
			$this->api_handler,
			$this->logger,
			$this->data_handler
		);

		// Initialize Gateway last as it depends on other components.
		$this->gateway = new NovaBankaIPGGateway(
			$this->api_handler,
			$this->threeds_handler,
			$this->data_handler,
			$this->logger
		);
	}

	/**
	 * Add the gateway to the WooCommerce payment gateways.
	 *
	 * @param array $gateways Existing gateways.
	 * @return array Modified gateways.
	 */
	public function add_gateway( array $gateways ): array {
		$gateways[] = Core\NovaBankaIPGGateway::class;
		return $gateways;
	}

	/**
	 * Enqueue scripts for the frontend.
	 */
	public function enqueue_scripts() {
		if ( is_checkout() ) {
			wp_enqueue_style(
				'novabankaipg-styles',
				NOVABANKAIPG_PLUGIN_URL . 'assets/css/ipg-styles.css',
				array(),
				NOVABANKAIPG_VERSION
			);

			wp_enqueue_script(
				'novabankaipg-scripts',
				NOVABANKAIPG_PLUGIN_URL . 'assets/js/ipg-scripts.js',
				array( 'jquery' ),
				NOVABANKAIPG_VERSION,
				true
			);
		}
	}

	/**
	 * Enqueue admin scripts.
	 *
	 * @param string $hook The current admin page hook.
	 */
	public function enqueue_admin_scripts( $hook ) {
		if ( 'woocommerce_page_wc-settings' !== $hook ) {
			return;
		}

		wp_enqueue_style(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . 'assets/css/ipg-admin.css',
			array(),
			NOVABANKAIPG_VERSION
		);

		wp_enqueue_script(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . 'assets/js/ipg-admin.js',
			array( 'jquery' ),
			NOVABANKAIPG_VERSION,
			true
		);
	}

	/**
	 * Display a notice if WooCommerce is missing.
	 */
	public function woocommerce_missing_notice() {
		echo '<div class="error"><p>' .
			esc_html__( 'NovaBanka IPG requires WooCommerce to be installed and active.', 'novabanka-ipg-gateway' ) .
			'</p></div>';
	}

	/**
	 * Initialize plugin.
	 *
	 * @return self The singleton instance.
	 */
	public static function init() {
		return self::instance();
	}

	/**
	 * Get gateway settings.
	 *
	 * @return array
	 */
	private function get_gateway_settings(): array {
		$settings = get_option( 'woocommerce_novabankaipg_settings', array() );

		return array(
			'api_endpoint'      => $settings['api_endpoint'] ?? '',
			'terminal_id'       => $settings['terminal_id'] ?? '',
			'terminal_password' => $settings['terminal_password'] ?? '',
			'secret_key'        => $settings['secret_key'] ?? '',
			'test_mode'         => $settings['test_mode'] ?? 'yes',
		);
	}
}

// Initialize plugin.
NovaBankaIPG::init();
</file>

<file path="developer-documentation.md">
```markdown
# NovaBanka IPG Gateway Documentation

## Overview
The NovaBanka IPG Gateway plugin provides 3D Secure payment integration for WooCommerce. This documentation covers installation, configuration, and implementation details for developers.

## Table of Contents
1. [Installation](#installation)
2. [Configuration](#configuration)
3. [Integration Flow](#integration-flow)
4. [Testing](#testing)
5. [Common Issues](#common-issues)
6. [API Reference](#api-reference)

## Installation

### Requirements
- WordPress 5.8+
- WooCommerce 5.0+
- PHP 7.4+
- SSL Certificate (required for production)

### Setup Steps
1. Upload plugin to `/wp-content/plugins/`
2. Activate through WordPress admin
3. Configure through WooCommerce → Settings → Payments

```php
// Example plugin activation check
add_action('plugins_loaded', function() {
    if (!class_exists('WooCommerce')) {
        add_action('admin_notices', function() {
            echo '<div class="error"><p>NovaBanka IPG requires WooCommerce to be installed and active.</p></div>';
        });
        return;
    }
    // Initialize gateway
});
```

## Configuration

### Gateway Settings
```php
// Example configuration
$settings = [
    'enabled' => 'yes',
    'title' => 'Credit Card (3D Secure)',
    'description' => 'Pay securely using your credit card',
    'testmode' => 'yes',  // For testing
    'terminal_id' => 'YOUR_TERMINAL_ID',
    'terminal_password' => 'YOUR_TERMINAL_PASSWORD',
    'secret_key' => 'YOUR_SECRET_KEY'
];
```

### Environment URLs
- Test: `https://test-gateway.example.com/api`
- Production: `https://gateway.example.com/api`

## Integration Flow

### 1. Payment Initialization
```php
// Example payment initialization
try {
    $payment_data = [
        'amount' => $order->get_total(),
        'currency' => $order->get_currency(),
        'trackid' => $order->get_id(),
        'responseURL' => $notification_url,
        'errorURL' => $error_url
    ];
    
    $response = $api_handler->sendPaymentInit($payment_data);
    
    // Store payment ID
    update_post_meta($order_id, '_novabankaipg_payment_id', $response['paymentid']);
    
    // Redirect to HPP
    return [
        'result' => 'success',
        'redirect' => $response['browserRedirectionURL']
    ];
} catch (NovaBankaIPGException $e) {
    // Handle error
}
```

### 2. Notification Handling
```php
// Example notification handler
public function handle_notification() {
    try {
        $notification = json_decode(file_get_contents('php://input'), true);
        
        if ($this->api_handler->verifyNotification($notification)) {
            $order = wc_get_order($notification['trackid']);
            
            if ($notification['result'] === 'CAPTURED') {
                $order->payment_complete($notification['tranid']);
            } else {
                $order->update_status('failed');
            }
            
            echo json_encode([
                'msgName' => 'PaymentNotificationResponse',
                'paymentID' => $notification['paymentid'],
                'browserRedirectionURL' => $this->get_return_url($order)
            ]);
            exit;
        }
    } catch (Exception $e) {
        // Handle error
    }
}
```

## Testing

### Test Cards
```
Success Card: 4012001037141112
Failure Card: 4539990000000020
```

### Test Cases
1. Successful Payment
```php
// Test successful payment
$test_data = [
    'card_number' => '4012001037141112',
    'expiry' => '12/25',
    'cvv' => '123'
];
```

2. Failed Payment
```php
// Test failed payment
$test_data = [
    'card_number' => '4539990000000020',
    'expiry' => '12/25',
    'cvv' => '123'
];
```

3. Cancelled Payment
```php
// Test cancel scenario
// User clicks cancel on HPP
// Check notification handling
```

### Response Codes
```php
const RESPONSE_CODES = [
    '00' => 'Approved',
    '51' => 'Insufficient funds',
    '05' => 'Do not honor'
];
```

## Common Issues

### Message Verifier Mismatch
```php
// Correct message verifier generation
$message = implode('', [
    $request['msgName'],
    $request['version'],
    $request['id'],
    $request['password'],
    $request['amt'],
    $request['trackid']
]);
$message = preg_replace('/\s+/', '', $message);
return base64_encode(hash('sha256', $message, true));
```

### Order Status Updates
```php
// Proper order status handling
public function update_order_status($order, $notification) {
    if ($notification['result'] === 'CAPTURED') {
        $order->payment_complete($notification['tranid']);
        $order->add_order_note('Payment completed via 3DS');
    } else {
        $order->update_status('failed', 'Payment failed: ' . $notification['result']);
    }
}
```

## API Reference

### APIHandler Interface
```php
interface APIHandler {
    public function sendPaymentInit(array $data): array;
    public function verifyNotification(array $notification): bool;
    public function generateNotificationResponse(string $payment_id, string $redirect_url): array;
}
```

### DataHandler Interface
```php
interface DataHandler {
    public function formatAmount($amount): string;
    public function getCurrencyCode(string $currency): string;
    public function validateRequiredFields(array $data, array $required): bool;
}
```

### Logger Interface
```php
interface Logger {
    public function debug(string $message, array $context = []): void;
    public function error(string $message, array $context = []): void;
    public function info(string $message, array $context = []): void;
}
```

### Hooks Reference

#### Actions
```php
// Before payment initialization
do_action('novabankaipg_before_payment_init', $order);

// After successful payment
do_action('novabankaipg_payment_complete', $order, $notification);

// After failed payment
do_action('novabankaipg_payment_failed', $order, $notification);
```

#### Filters
```php
// Modify payment data before sending
add_filter('novabankaipg_payment_data', function($data, $order) {
    // Modify data
    return $data;
}, 10, 2);

// Customize return URL
add_filter('novabankaipg_return_url', function($url, $order) {
    // Modify URL
    return $url;
}, 10, 2);
```

### Error Handling
```php
try {
    // Payment processing
} catch (NovaBankaIPGException $e) {
    // Handle specific gateway errors
    $error_type = $e->getErrorType();
    $error_data = $e->getErrorData();
    
    // Log error
    $logger->error($e->getMessage(), [
        'error_type' => $error_type,
        'error_data' => $error_data
    ]);
    
    // Display user-friendly message
    wc_add_notice('Payment error: ' . $e->getMessage(), 'error');
}
```

### Customization Examples

#### Custom Payment Fields
```php
add_filter('novabankaipg_payment_fields', function($fields) {
    $fields['custom_field'] = [
        'label' => 'Custom Field',
        'required' => true
    ];
    return $fields;
});
```

#### Custom Order Processing
```php
add_action('novabankaipg_before_process_payment', function($order) {
    // Add custom processing
    $order->update_meta_data('_custom_data', 'value');
});
```

For additional support or queries, please refer to the [support documentation](https://claude.site/artifacts/1ad4aa8f-4462-48b0-a5e8-68cb0fc3d126)

```
</file>

<file path="developer-redirect-payment.md">
# Redirect Payment Implementation Guide

## Overview
The NovaBanka IPG Gateway implements a redirect-based payment flow where customers are directed to the bank's hosted payment page (HPP) for secure card data entry. This approach eliminates the need for direct card data handling within WordPress.

## Implementation Details

### 1. Gateway Configuration
The gateway extends WC_Payment_Gateway and implements a simplified payment form:

php
class NovaBankaIPGGateway extends WC_Payment_Gateway {
public function payment_fields() {
if ($this->description) {
echo wpautop(wptexturize($this->description));
}
echo '<button type="submit" class="button alt" id="novabankaipg-pay-button">' .
esc_html('Proceed to Payment', 'novabanka-ipg-gateway') .
'</button>';
}
}


## 2. Payment Flow
1. Customer clicks "Proceed to Payment" button
2. System initializes payment (see payment_data structure below)
3. Customer is redirected to bank's HPP
4. Bank handles 3DS authentication
5. Customer is returned to site with payment result

### 3. Payment Data Structure
Reference to implementation:

php:includes/Core/class-novabankaipggateway.php
startLine: 281
endLine: 292


### 4. Response Handling
The gateway asynchronously handles payment notifications:

php:includes/Core/class-novabankaipggateway.php
startLine: 398
endLine: 403

## Configuration Requirements

### 1. Gateway Settings
Required configuration in WooCommerce:
- Terminal ID
- Terminal Password
- Secret Key
- Response/Error URLs

### 2. SSL Requirements
- Valid SSL certificate
- Proper webhook configuration
- Secure response handling

## Testing Scenarios

### 1. Successful Payment

php
// Test successful payment flow
$test_data = [
'order_id' => 123,
'amount' => 100.00,
'currency' => 'USD'
];

### 2. Failed Payment
Reference test cards from documentation:
php:developer-documentation.md
startLine: 140
endLine: 145

### 3. Cancelled Payment
Test user cancellation on HPP as documented:
php:developer-documentation.md
startLine: 148
endLine: 153

## Error Handling
Reference error handling implementation:
php:developer-documentation.md
startLine: 254
endLine: 269

## Customization
The redirect flow can be customized using filters:
php:developer-documentation.md
startLine: 239
endLine: 250

## Security Considerations
1. Always verify payment notifications using message verification
2. Store payment IDs securely
3. Implement proper nonce checks
4. Log all payment events for audit

For message verification implementation, see:
php:developer-documentation.md
startLine: 168
endLine: 179

## Order Status Management
Reference order status handling:
php:developer-documentation.md
startLine: 183
endLine: 191

```
</file>

<file path="developer-strategy.md">
```markdown
# NovaBanka IPG Integration - Strategic Implementation Guide

## 1. Architecture Foundation 🏗️

### Core Philosophy
- Single Responsibility Principle
- Dependency Injection
- Interface-Driven Development
- Immutable Data Structures
- Event-Driven Communication

### Directory Structure
```plaintext
ipg-gateway-v3/
├── src/
│   ├── API/           # API communication
│   ├── Core/          # Business logic
│   ├── Events/        # Event handlers
│   ├── Exceptions/    # Custom exceptions
│   └── Services/      # Service layer
├── interfaces/        # Contracts
├── assets/           # Frontend resources
└── tests/            # Test suites
```

## 2. Integration Flow 🔄

### Payment Lifecycle
```
Init → Validate → Process → Verify → Complete
```

### Key Components
1. Gateway Handler
   - Payment initialization
   - State management
   - Response processing

2. API Communication
   - Message building
   - Signature verification
   - Response handling

3. 3DS Flow
   - Authentication
   - Verification
   - Redirect handling

## 3. Critical Paths 🎯

### Payment Flow
```php
PaymentRequest → APIHandler → 3DSHandler → Notification → OrderUpdate
```

### Data Flow
```php
Validation → Formatting → Encryption → Transmission → Verification
```

### Error Flow
```php
Detection → Logging → Recovery → Notification → Resolution
```

## 4. Strategic Patterns 🎨

### 1. Request Building
```php
interface RequestBuilder {
    public function prepare(): array;
    public function validate(): bool;
    public function sign(): string;
}
```

### 2. Response Handling
```php
interface ResponseProcessor {
    public function verify(): bool;
    public function process(): array;
    public function handle(): void;
}
```

### 3. State Management
```php
interface StateManager {
    public function transition(string $state): void;
    public function validate(string $transition): bool;
    public function getState(): string;
}
```

## 5. Implementation Strategy 📋

### Phase 1: Foundation
- [ ] Core interfaces
- [ ] Base classes
- [ ] Service containers
- [ ] Event system

### Phase 2: Integration
- [ ] API handlers
- [ ] 3DS implementation
- [ ] Payment processing
- [ ] Notification handling

### Phase 3: Enhancement
- [ ] Error handling
- [ ] Logging system
- [ ] Admin interface
- [ ] Testing suite

## 6. Best Practices Guide 📚

### Code Standards
1. PSR-12 compliance
2. Type declarations
3. Return type hints
4. Null safety

### Security Measures
1. Input validation
2. Output sanitization
3. Signature verification
4. SSL enforcement

### Error Handling
1. Custom exceptions
2. Error logging
3. User feedback
4. Recovery procedures

## 7. Development Workflow 🔧

### 1. Setup
```bash
composer require novabankaipg/gateway
npm install
```

### 2. Configuration
```php
define('IPG_ENV', 'development');
define('IPG_DEBUG', true);
```

### 3. Implementation
```php
// Service registration
add_action('plugins_loaded', function() {
    $container = new ServiceContainer();
    $container->register(APIHandler::class);
    $container->register(PaymentProcessor::class);
});
```

## 8. Testing Strategy 🧪

### Unit Tests
- Service tests
- Data validation
- State transitions

### Integration Tests
- API communication
- Payment flow
- Error handling

### End-to-End Tests
- Complete payment cycle
- Error scenarios
- Edge cases

## 9. Monitoring & Logging 📊

### Key Metrics
1. Transaction success rate
2. API response times
3. Error frequency
4. State transitions

### Log Levels
```php
debug();   // Development info
info();    // Status updates
warning(); // Potential issues
error();   // Critical failures
```

## 10. Performance Optimization 🚀

### Caching Strategy
1. API responses
2. Configuration
3. Session data

### Request Optimization
1. Batch processing
2. Async operations
3. Response compression

## 11. Security Checklist ✅

- [ ] Input validation
- [ ] XSS prevention
- [ ] CSRF protection
- [ ] SQL injection prevention
- [ ] Signature verification
- [ ] SSL/TLS enforcement
- [ ] Data encryption
- [ ] Session security

## 12. Deployment Strategy 🚢

### Pre-deployment
1. Code review
2. Testing completion
3. Documentation update
4. Version control

### Deployment
1. Backup
2. Version update
3. Database migrations
4. Cache clear

### Post-deployment
1. Monitoring
2. Error tracking
3. Performance analysis
4. User feedback

## Quick Reference 📌

### Key Methods
```php
initializePayment(OrderData $data): PaymentResponse
processNotification(NotificationData $data): void
validateSignature(string $signature, array $data): bool
handleError(IPGException $exception): void
```

### Common Patterns
```php
// Service resolution
$service = $container->get(ServiceInterface::class);

// Event dispatch
$dispatcher->dispatch(new PaymentEvent($data));

// Error handling
try {
    $processor->handle($payment);
} catch (IPGException $e) {
    $logger->error($e->getMessage(), $e->getContext());
}
```

### State Flow
```
Initialized → Processing → Authenticated → Completed
      ↓            ↓             ↓            ↓
   Failed      Cancelled      Rejected     Refunded
```

Follow this strategic guide for a robust, maintainable, and secure implementation of the NovaBanka IPG gateway.
```
</file>

<file path="developer-woo-ipg-logic.md">
# NovaBanka IPG Integration Logic

This document outlines the core logic and workflow for integrating the NovaBanka Internet Payment Gateway (IPG) with WooCommerce considering the Asoft IPG 3DS eCommerce Transaction flow and the AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt documentation.

Woocommerce=Merchant
IPG=IPG
Woocommerce Payment plugin / extends WP and WOO functionality

### The Buyer Perspective ​

1. Chooses products.  
2. Enters personal details for shipment and clicks "Buy". ​  
3. Is redirected to the HPP.  
4. Enters credit card data and clicks "Pay".  
5. If the card is 3-D Secure enabled, the Buyer is redirected to their bank's website to enter the password and then returns to the HPP. ​  
6. Is redirected to a specific page on the Merchant website displaying the payment result. ​  
7. Receives an email notification of payment if enabled by the Merchant. ​

### The Merchant Perspective ​

1. Receives a purchase order from the Buyer. ​  
2. Sends a PaymentInit message to IPG. ​  
3. Receives a unique PaymentID and the URL of the HPP. ​  
4. Redirects the Buyer to the HPP URL with the PaymentID. ​  
5. Receives a transaction notification from IPG. ​  
6. Responds with the URL for the Buyer to be redirected to for the transaction result. ​  
7. Presents the result to the Buyer. ​  
8. Receives an email notification of payment if enabled. 

### The IPG Perspective ​

1. Receives a PaymentInit message from the Merchant. ​  
2. Responds with the HPP URL and a PaymentID. ​  
3. Presents the HPP to the Buyer. ​  
4. Receives the Buyer's credit card data. ​  
5. If the card is 3-D Secure enabled, redirects the Buyer to the bank's site for authentication and awaits the result. ​  
6. Processes the transaction by sending the request to the credit card company and gets a response. ​  
7. Sends a result notification message to the Merchant. ​  
8. Receives the URL for Buyer redirection. ​  
9. Redirects the Buyer to the specified URL.


Woo Checkout -> Pay Now -> IPG <-> Woo <-> IPG -> Woo Succesful payment / Unsuccesful payment ?

Communication flow:

1. Buyer chooses Woocommerce Virtual Product with SKU 
2. Merchant prepares and returns the checkout page. 
3. Buyer fills out required fields (email and Phone No) and clicks "Pay NOW".  
4. Merchant sends PaymentInit request to IPG. ​  
5. IPG verifies the request, saves transaction data, and returns the HPP URL and PaymentID. ​  
6. Merchant saves the PaymentID and redirects the browser to the HPP URL with the PaymentID. ​  
7. IPG checks the PaymentID, prepares the payment page, and returns it to the Buyer's browser. ​  
8. Buyer enters necessary data and clicks "Pay".  
9. If 3-D Secure, IPG redirects the browser to the bank's site for authentication. ​  
10. Buyer provides authentication data and is redirected back to IPG.  
11. IPG combines data and sends the request to the authorization system. ​  
12. Authorization system processes the request and returns the result to IPG. ​  
13. IPG sends a POST message to the Merchant with the transaction result. ​  
14. Merchant updates the transaction status and returns the URL for Buyer redirection. ​  
15. IPG redirects the browser to the specified URL and displays the final page with payment details. ​  
16. Buyer gets the Merchant result page - Succesful payment / Unsuccesful payment
17. Merchant stores the order data, with IPG responses in Woocommerce and change status.

Wocoomerce Order Management statuses (should be named by woo standards, utilizing standard woo functionality):
1. Init Order
2. Partial Order (not succesful due cancelation of HPP flow for any reason / stored init data + reason)
3. Complete Order (Succesful transaction + stored IPG messages)
4. Uncomplete Order (Unsuccesful transaction + stored IPG messages)


## Role Mapping

WooCommerce (Our Plugin) = Merchant Implementation
IPG = Payment Gateway Service
Plugin Components = Integration Layer

## Flow Comparison

Your Flow:                     | Documentation Flow:
-----------------------------|-----------------------------
Woo Checkout -> Pay Now      | Merchant Order Form
Plugin Handles Init          | Merchant Backend
IPG HPP                      | IPG HPP
Bank Auth                   | Bank Auth
IPG Response                | IPG Response
Plugin Handles Response     | Merchant Backend
Woo Order Status Update     | Merchant Order Update

Current Implementation:
WooCommerce Checkout -> Gateway Class -> APIHandler -> IPG

Documentation Flow:
Merchant Site -> PaymentInit -> HPP -> 3DS -> Bank -> Response

## Key Differences

We are integrating with WooCommerce's existing order system
Documentation assumes standalone merchant implementation
Our flow adds WooCommerce-specific states and hooks

## Key Integration Points

a) Order Creation (WooCommerce)
b) Payment Initialization (Our Gateway)
c) HPP Redirection (IPG)
d) 3DS Processing (Bank/IPG)
e) Response Handling (Our Gateway)
f) Order Status Updates (WooCommerce)

## Order Flow Integration

// WooCommerce States Mapping
'pending'    => 'Init Order',
'on-hold'    => 'Partial Order',
'completed'  => 'Complete Order',
'failed'     => 'Uncomplete Order'

## Communication Points

WooCommerce Checkout
↓
Plugin (PaymentInit)
↓
IPG (HPP + 3DS)
↓
Bank
↓
IPG (Process)
↓
Plugin (Notification)
↓
WooCommerce Order Update

## Data Storage Strategy

// Store in WooCommerce order meta
$order->update_meta_data('_novabankaipg_payment_id', $response['paymentid']);
$order->update_meta_data('_novabankaipg_transaction_data', $response);
$order->update_meta_data('_novabankaipg_status', $status);

## Complete Integrated Flow

1. Initial flow (WooCommerce)

// In Gateway Class
public function process_payment($order_id) {
    $order = wc_get_order($order_id);
    
    // Step 1: Create/Validate Order
    // Step 2: Prepare Payment Data
    // Step 3: Send PaymentInit
    // Step 4: Handle Redirect
}

2. Communication flow

Buyer -> WooCommerce Checkout
↓
Our Plugin (PaymentInit Request)
↓
IPG (HPP + 3DS if needed)
↓
Bank Authentication (if 3DS)
↓
IPG Processing
↓
Our Plugin (Notification)
↓
WooCommerce Order Update

3. Order States Mapping

// WooCommerce Order States
'pending'    => 'Init Order',         // After PaymentInit
'on-hold'    => 'Partial Order',      // During 3DS/HPP
'processing' => 'Processing Payment',  // After successful capture
'completed'  => 'Complete Order',      // After successful processing
'failed'     => 'Uncomplete Order'    // If payment fails

4. Data Storage Strategy

// Order Meta Storage
$order->update_meta_data('_novabankaipg_payment_id', $paymentid);
$order->update_meta_data('_novabankaipg_transaction_id', $tranid);
$order->update_meta_data('_novabankaipg_auth_code', $auth);
$order->update_meta_data('_novabankaipg_status', $status);

5. Message Verification

// In MessageHandler
private function generate_message_verifier($fields) {
    $message = implode('', array_filter($fields));
    $message = preg_replace('/\s+/', '', $message);
    return base64_encode(hash('sha256', $message, true));
}

## Detailed Flow Requirements

1. Transaction Type
- One-time payment (not recurring)
- Need to set RecurAction="" for normal e-commerce

2. Data Flow Requirements:

Send to IPG:
- Order ID (trackid)
- Virtual Product SKU (udf1)
- Customer Email (buyerEmailAddress)
- Customer Phone (udf2)
- Payment Amount (amt)
- Currency (currencycode)

Store from IPG:
- PaymentID
- TransactionID
- Auth Code
- Card Type
- Card Last 4 Digits
- Response Codes
- All IPG Messages

3. Flow States

WooCommerce Order:
pending -> on-hold (during HPP/3DS) -> processing/failed -> completed

## Updated Implementation Logic

1. Payment Data Structure
// In Gateway Class
$payment_data = [
    'action'       => '1',            // Purchase
    'amount'       => $order->get_total(),
    'currency'     => $order->get_currency(),
    'trackid'      => $order->get_id(),
    'response_url' => $this->get_return_url($order),
    'error_url'    => $order->get_checkout_payment_url(),
    'langid'       => $this->get_language_code(),
    // Customer Data
    'buyerEmailAddress' => $order->get_billing_email(),
    // UDF Fields
    'udf1'         => $this->get_product_sku($order),    // Product SKU
    'udf2'         => $order->get_billing_phone(),       // Phone Number
    'udf3'         => wp_create_nonce('novabankaipg_payment_' . $order_id), // Security
    // One-time payment
    'RecurAction'  => '',             // Normal e-commerce
    'payinst'      => 'VPAS',         // 3DS
];

2. Order Meta Storage

// After successful payment
$order->update_meta_data('_novabankaipg_payment_id', $notification['paymentid']);
$order->update_meta_data('_novabankaipg_transaction_id', $notification['tranid']);
$order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
$order->update_meta_data('_novabankaipg_card_type', $notification['cardtype']);
$order->update_meta_data('_novabankaipg_card_last4', $notification['cardLastFourDigits']);
$order->update_meta_data('_novabankaipg_response_code', $notification['responsecode']);
$order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));

3. Status Management

// In notification handler
public function process_notification($notification) {
    $order = wc_get_order($notification['trackid']);
    
    if ('CAPTURED' === $notification['result']) {
        $order->update_status('processing', __('Payment successful via IPG.', 'novabanka-ipg-gateway'));
        $this->store_transaction_data($order, $notification);
    } else {
        $order->update_status('failed', sprintf(
            __('Payment failed. Result: %s, Code: %s', 'novabanka-ipg-gateway'),
            $notification['result'],
            $notification['responsecode'] ?? 'N/A'
        ));
    }
    
    return [
        'msgName' => 'PaymentNotificationResponse',
        'browserRedirectionURL' => $this->get_return_url($order)
    ];
}

4. Helper Methods

private function get_product_sku($order) {
    $items = $order->get_items();
    $item = reset($items);  // Get first item
    $product = $item->get_product();
    return $product ? $product->get_sku() : '';
}

private function store_transaction_data($order, $notification) {
    // Store all transaction data
    foreach ($notification as $key => $value) {
        $order->update_meta_data("_novabankaipg_{$key}", $value);
    }
    
    // Store raw response for debugging
    $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
    
    $order->save();
}

## Conclusion

This implementation:
1. Properly handles one-time payments
2. Passes all required data to IPG
3. Stores complete transaction history
4. Maintains proper order status flow
5. Follows WooCommerce standards
6. Preserves all IPG response data
</file>

<file path="developer-woocommerce-payment-async-two-processes.md">
# WooCommerce Asynchronous Payment Flow - NovaBanka IPG

## Overview
The payment flow involves multiple steps across different domains with asynchronous communication between IPG and WooCommerce. This guide provides a step-by-step explanation of the payment processes involved, helping developers understand how to handle payments reliably and efficiently.

## Process Overview

```plaintext
Process A (Customer Journey):
WooCheckout -> Init Payment -> HPP Redirect -> Customer at IPG -> Customer Return to Success/Failure URL

Process B (Server Communication):
IPG Server -> Notification Callback -> Order Status Update -> Response to IPG

These processes are independent and can happen in any order!
```

## Flow Diagram
The overall flow of the payment process can be visualized as follows:

| Customer  | Our Site       | IPG              | Bank         |
|-----------|----------------|------------------|--------------|
| (1) Place Order       |                    |              |
|                   | (2) PaymentInit      |              |
|                   | <--- (3) HPP URL ---- |              |
| <--- (4) Redirect to HPP |                  |              |
|                   |                    | (5) Enter Card Details   |
|                   |                    | --- (6) 3DS Auth ------> |
|                   |                    | <--- (7) Auth Response --|
|                   | <--- (8) Payment Notification |              |
|                   | (9) Process Order   |              |
| <--- (10) Redirect to Result |              |

## Communication Steps
### 1. Initial Order Creation
- Customer places an order on WooCommerce site.
- Order status: **pending**.

### 2. Payment Initialization
- Prepare data for payment initialization with IPG.
  ```php
  // Send to IPG
  $payment_data = [
      // URL to receive asynchronous payment notifications from IPG
      'response_url' => WC()->api_request_url('novabankaipg'),
      
      // URL to redirect the customer upon successful payment
      'success_url' => $success_url,
      
      // URL to redirect the customer upon payment failure
      'failure_url' => $failure_url
  ];
  ```
- Order status: **on-hold**.- Order status: **on-hold**.

### 3. HPP Redirection
- IPG returns HPP URL, and customer is redirected to IPG domain.
- Order status remains **on-hold**.

### 4. Payment Processing
- Customer completes the payment process on the IPG.
- IPG processes the payment with the bank.
- Order status remains unchanged.

### 5. Asynchronous Notification Handling
- IPG sends a notification to WooCommerce using a dedicated endpoint.
  ```php
  // IPG calls our notification URL
  add_action('woocommerce_api_novabankaipg', array($this, 'handle_gateway_response'));
  ```

### 6. Order Update
- The notification from IPG triggers order updates and stores the transaction data.

### 7. Customer Return Handling
- After payment, handle customer redirection based on success or failure:
  - **Success Case**: Redirect the customer to the thank you page, confirming successful payment.
  - **Failure Case**: Redirect the customer to the payment page, displaying an error message and allowing them to retry the payment.
  ```php
  add_action('woocommerce_api_novabankaipg_success', array($this, 'handle_success_return'));
  add_action('woocommerce_api_novabankaipg_failure', array($this, 'handle_failure_return'));
  ```

## API Endpoints
### 1. Notification Endpoint
- **Notification Processing**: Updates the WooCommerce order with details received from IPG.
  ```php
  // /wc-api/novabankaipg
  public function handle_gateway_response() {
      // Process IPG notification
      // Update order status
      // Return response to IPG
  }
  ```

### 2. Success Return Endpoint
- **Success Handling**: Redirects to a thank you page upon payment success.
  ```php
  // /wc-api/novabankaipg_success
  public function handle_success_return() {
      // Verify order
      // Redirect to thank you page
  }
  ```

### 3. Failure Return Endpoint
- **Failure Handling**: Redirects to the payment page with an error message upon failure.
  ```php
  // /wc-api/novabankaipg_failure
  public function handle_failure_return() {
      // Verify order
      // Show error message
      // Redirect to payment page
  }
  ```

## Implementation
```php
class WC_Gateway_NovaBanka_IPG extends WC_Payment_Gateway {
    /**
     * Initial payment setup - starts the customer journey
     */
    public function process_payment($order_id) {
        $order = wc_get_order($order_id);
        
        try {
            // 1. Prepare callback URLs for later use
            $urls = [
                'responseURL' => WC()->api_request_url('novabankaipg'),
                'successURL' => add_query_arg([
                    'wc-api' => 'novabankaipg_success',
                    'order-key' => $order->get_order_key()
                ], home_url('/')),
                'errorURL' => add_query_arg([
                    'wc-api' => 'novabankaipg_failure',
                    'order-key' => $order->get_order_key()
                ], home_url('/'))
            ];

            // 2. Initialize payment with IPG
            $payment_data = array_merge($urls, [
                'trackid' => $order->get_id(),
                'amount' => $order->get_total(),
                'currency' => $order->get_currency(),
                // ... other payment data ...
            ]);

            $response = $this->api_handler->initialize_payment($payment_data);

            // 3. Store payment ID and mark order as pending HPP
            $order->update_meta_data('_novabankaipg_payment_id', $response['paymentid']);
            $order->update_status('pending', __('Awaiting HPP redirect', 'novabanka-ipg-gateway'));
            $order->save();

            // 4. Send customer to HPP
            return [
                'result' => 'success',
                'redirect' => $response['browserRedirectionURL']
            ];

        } catch (Exception $e) {
            wc_add_notice($e->getMessage(), 'error');
            return;
        }
    }

    /**
     * IPG Notification Handler - Process B
     * This is completely independent of customer's browser session
     */
    public function handle_ipg_notification() {
        try {
            // 1. Get and validate notification
            $notification = json_decode(file_get_contents('php://input'), true);
            
            if (!$this->api_handler->verify_signature($notification)) {
                throw new Exception('Invalid signature');
            }

            // 2. Get and validate order
            $order = wc_get_order($notification['trackid']);
            if (!$order) {
                throw new Exception('Order not found');
            }

            // 3. Store transaction data regardless of outcome
            $this->store_transaction_data($order, $notification);

            // 4. Process payment result
            if ($notification['result'] === 'CAPTURED') {
                $order->payment_complete($notification['tranid']);
                $order->add_order_note(__('Payment successful - IPG notification received', 'novabanka-ipg-gateway'));
            } else {
                $order->update_status('failed', sprintf(
                    __('Payment failed - IPG notification. Result: %s', 'novabanka-ipg-gateway'),
                    $notification['result']
                ));
            }

            // 5. Acknowledge to IPG
            wp_send_json(['status' => 'OK'], 200);

        } catch (Exception $e) {
            // Log error but don't expose details to IPG
            $this->logger->error('IPG notification failed', [
                'error' => $e->getMessage(),
                'notification' => $notification ?? null
            ]);
            wp_send_json(['status' => 'ERROR'], 500);
        }
    }

    /**
     * Customer Return Handler - Process A
     * Customer returns here after HPP, but order might already be updated by Process B
     */
    public function handle_customer_return_success() {
        $order_key = wc_clean($_GET['order-key'] ?? '');
        $order = wc_get_orders(['order_key' => $order_key, 'limit' => 1])[0] ?? null;

        if (!$order) {
            wc_add_notice(__('Invalid order.', 'novabanka-ipg-gateway'), 'error');
            wp_redirect(wc_get_checkout_url());
            exit;
        }

        // Check if IPG notification was already processed (Process B)
        $transaction_id = $order->get_meta('_novabankaipg_transaction_id');
        
        if ($transaction_id) {
            // Order already updated by IPG notification
            if ($order->is_paid()) {
                wp_redirect($this->get_return_url($order));
            } else {
                wc_add_notice(
                    __('Payment was not successful. Please try again.', 'novabanka-ipg-gateway'),
                    'error'
                );
                wp_redirect($order->get_checkout_payment_url());
            }
        } else {
            // IPG notification hasn't arrived yet
            wc_add_notice(
                __('Your payment is being processed. Please wait a moment.', 'novabanka-ipg-gateway'),
                'notice'
            );
            wp_redirect($this->get_return_url($order));
        }
        exit;
    }

    /**
     * Store transaction data from IPG notification
     */
    private function store_transaction_data($order, $notification) {
        // Store all relevant fields
        $fields_to_store = [
            'paymentid', 'tranid', 'auth', 'result', 'track_id', 
            'cardtype', 'cardLastFourDigits'
        ];

        foreach ($fields_to_store as $field) {
            if (isset($notification[$field])) {
                $order->update_meta_data("_novabankaipg_{$field}", $notification[$field]);
            }
        }

        // Store full response for debugging
        $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
        
        // Store processing timestamp
        $order->update_meta_data('_novabankaipg_processed_at', time());
        
        $order->save();
    }
}
```

## Order Status Flow
The order status flow is crucial in tracking the progression of a payment through the different stages.

```
pending -> on-hold -> processing/failed -> completed
```

- **pending**: Initial order creation.
- **on-hold**: During HPP/3DS process.
- **processing**: Successful payment.
- **failed**: Failed payment.
- **completed**: Order fulfilled.

## Security Considerations
1. **URL Validation**
   ```php
   // Verify order key
   $order_key = wc_clean($_GET['order-key'] ?? '');
   $order = wc_get_orders(['order_key' => $order_key, 'limit' => 1])[0] ?? null;
   ```

2. **Notification Verification**
   - Since the IPG notification always comes from the domain `novabanka.com`, we can simply validate the source domain. Redirects from the HPP should not be verified as they may vary and could use different URLs.
   ```php
   // Verify the source of the request
   if (strpos($_SERVER['HTTP_REFERER'], 'novabanka.com') === false) {
       throw new Exception('Invalid notification source');
   }
   ```

3. **Order State Validation**
   - Ensure that the current order state is validated before processing to avoid duplicate payments and errors.

## Implementation Notes
1. **URL Generation**
   ```php
   private function get_gateway_urls($order) {
       return [
           'notification_url' => WC()->api_request_url('novabankaipg'),
           'success_url' => add_query_arg([
               'wc-api' => 'novabankaipg_success',
               'order-key' => $order->get_order_key()
           ], home_url('/')),
           'failure_url' => add_query_arg([
               'wc-api' => 'novabankaipg_failure',
               'order-key' => $order->get_order_key()
           ], home_url('/'))
       ];
   }
   ```

2. **Data Storage**
   ```php
   // Store transaction data
   $order->update_meta_data('_novabankaipg_payment_id', $payment_id);
   $order->update_meta_data('_novabankaipg_transaction_id', $transaction_id);
   ```

3. **Error Handling**
   ```php
   try {
       // Process notification
   } catch (Exception $e) {
       $this->logger->error('Payment notification error: ' . $e->getMessage());
       wp_die($e->getMessage(), 'Payment Error', array('response' => 500));
   }
   ```

## Testing Considerations
1. **Notification Testing**
   - Test with the IPG test environment to verify all notification scenarios and transitions in order status.

2. **Customer Return Testing**
   - Verify redirection logic for both success and failure returns.
   - Check for consistent order status displays and ensure proper messages are shown to users.
   - Test scenarios where the customer returns before or after the notification is received.

3. **Security Testing**
   - Test invalid signatures and incorrect order keys to ensure notifications are not accepted if they come from unauthorized sources.
   - Ensure that the system handles duplicate notifications gracefully without causing repeated processing.

4. **Performance Testing**
   - Simulate high transaction volumes to test the system’s performance and the IPG's ability to handle multiple callbacks concurrently.
   - Monitor server resource utilization and response times during these simulations to identify potential bottlenecks.

## Debugging
1. **Enable Extensive Logging During Development**
   - During the development phase, enable detailed debugging logs for every method, function, callback, and key process. This will help track the entire flow and identify issues at any stage.
   
   ```php
   // Log entry into the process_payment function
   $this->logger->debug('Entering process_payment method', [
       'order_id' => $order_id
   ]);

   // Log payment data preparation
   $this->logger->debug('Payment data prepared for IPG initialization', [
       'payment_data' => $payment_data
   ]);

   // Log notification receipt
   $this->logger->debug('IPG Notification received', [
       'notification' => $notification
   ]);

   // Log order status updates
   $this->logger->debug('Updating order status', [
       'order_id' => $order->get_id(),
       'new_status' => $notification['result'] === 'CAPTURED' ? 'processing' : 'failed'
   ]);
   ```

   - Ensure logs are added to every entry and exit point of key methods and when significant state changes occur (e.g., order status updates, data storage).

2. **Monitor Endpoints**
   - Regularly check WooCommerce logs and monitor callbacks to ensure notifications are being received and processed as expected.
   - Log any unexpected errors or anomalies, especially during high transaction periods.

3. **Verify Data Consistency**
   - Validate order metadata, transaction IDs, and amounts to ensure data accuracy.
   - Check for data integrity issues, especially when multiple notifications are received or when race conditions occur.

4. **Error Recovery**
   - Implement retry logic for failed notifications where possible.
   - Ensure that error messages are logged with sufficient detail to aid in troubleshooting while avoiding exposing sensitive information.

## Data Storage Strategy

WooCommerce provides a variety of out-of-the-box (OoTB) functionalities for data management, including order metadata storage and transaction handling. To make the most of these features while keeping the implementation clean and efficient, consider the following suggestions:

1. **Use Built-in WooCommerce Meta Methods Efficiently**
   - Instead of manually storing every piece of data in custom meta fields, use WooCommerce's built-in methods such as `$order->set_transaction_id()` for storing transaction-specific information. This keeps the data standardized and makes it more accessible for other WooCommerce features.
   
   ```php
   // Example: Setting transaction ID
   $order->set_transaction_id($notification['tranid']);
   $order->save();
   ```

2. **Avoid Redundant Metadata**
   - Instead of creating custom meta fields for commonly used data (like `paymentid` or `transaction_id`), consider if that information can be stored using standard WooCommerce methods. This approach simplifies data management and ensures better compatibility with other WooCommerce plugins and extensions.

3. **Utilize Order Notes for Tracking**
   - To track the flow of notifications and payment stages, consider adding WooCommerce order notes instead of custom metadata for logs. Order notes are visible in the order’s history and can be helpful for both customers and administrators.
   
   ```php
   $order->add_order_note(__('Payment successful - IPG notification received', 'novabanka-ipg-gateway'));
   ```

4. **Standardize Data Storage**
   - When storing custom transaction data that doesn't fit into existing WooCommerce fields, ensure that field names are standardized and clear. Consider grouping fields logically (e.g., all IPG-related fields start with `_novabankaipg_`) to avoid conflicts and maintain data consistency.

   ```php
   $order->update_meta_data('_novabankaipg_payment_status', $notification['result']);
   $order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
   $order->save();
   ```

5. **Minimize Custom Data Storage**
   - Wherever possible, avoid adding too many custom fields to the order. Instead, leverage WooCommerce’s core methods and structures for tracking payment states and results. This practice keeps the database optimized and prevents performance degradation, especially for stores with large volumes of transactions.

6. **Data Privacy and Compliance**
   - Avoid storing sensitive information such as full card details in order metadata. Only store the last four digits if needed for customer reference. Ensure compliance with PCI-DSS standards by storing minimal cardholder information.
   
   ```php
   // Store only the last four digits for reference
   $order->update_meta_data('_novabankaipg_card_last_four', $notification['cardLastFourDigits']);
   $order->save();
   ```

These strategies will help ensure that the implementation remains maintainable, scalable, and compatible with future WooCommerce updates, while also optimizing performance and data security.
</file>

<file path="developer-woocommerce-payment-async.md">
# WooCommerce Asynchronous Payment Flow - NovaBanka IPG

## Overview

The payment flow involves server-to-server communication between IPG and WooCommerce through a notification callback system.

## Flow Diagram

Customer         Our Site              IPG                Bank
   |                |                   |                   |
   |---(1)Checkout->|                   |                   |
   |                |---(2)PaymentInit->|                   |
   |                |<-(3)HPP URL-------|                   |
   |<-(4)Redirect---|                   |                   |
   |                |                   |                   |
   |---(5)Enter Card Details---------->|                   |
   |                |                   |---(6)3DS Auth---->|
   |                |                   |<-(7)Auth Response-|
   |                |<-(8)POST Notification-|               |
   |                |---(9)Return URL-->|                   |
   |<-(10)Final Redirect---------------|                   |

## Communication Steps

1. **Initial Order Creation**
   - Customer places order on WooCommerce site
   - Order status: 'pending'

2. **Payment Initialization**
   ```php
   // Send to IPG
   $payment_data = [
       'responseURL' => WC()->api_request_url('novabankaipg'),  // Notification callback URL
       'errorURL'    => $order->get_checkout_payment_url(true)  // Error return URL
   ];
   ```

3. **HPP Redirection**
   - IPG returns HPP URL
   - Customer redirected to IPG domain
   - Order status: 'on-hold'

4. **Payment Processing**
   - Customer completes payment on IPG
   - IPG processes with bank
   - Order status unchanged

5. **Payment Notification**
   ```php
   // IPG POSTs to our notification URL
   add_action('woocommerce_api_novabankaipg', array($this, 'handle_notification_callback'));
   ```

6. **Order Update & Response**
   - Process notification
   - Update order status
   - Return browserRedirectionURL to IPG

## API Endpoints

### 1. Notification Callback Endpoint
```php
// /wc-api/novabankaipg
public function handle_notification_callback() {
    try {
        // Get POST data from IPG
        $notification = $this->get_post_data();
        
        // Verify notification signature
        if (!$this->api_handler->verify_signature($notification)) {
            throw new Exception('Invalid signature');
        }
        
        // Process payment result
        $order = $this->process_payment_result($notification);
        
        // Prepare response for IPG
        $response = [
            'msgName' => 'PaymentNotificationResponse',
            'version' => '1',
            'paymentID' => $notification['paymentid'],
            'browserRedirectionURL' => $this->get_return_url($order)
        ];
        
        // Add message verifier
        $response['msgVerifier'] = $this->api_handler->generate_message_verifier([
            $response['msgName'],
            $response['version'],
            $response['paymentID'],
            $this->get_secret_key(),
            $response['browserRedirectionURL']
        ]);
        
        // Return JSON response to IPG
        wp_send_json($response);
        
    } catch (Exception $e) {
        wp_send_json_error($e->getMessage(), 500);
    }
}
```

## Order Status Flow
```
pending -> on-hold -> processing/failed -> completed
```

- **pending**: Initial order creation
- **on-hold**: During HPP/3DS process
- **processing**: Successful payment
- **failed**: Failed payment
- **completed**: Order fulfilled

## Security Considerations

1. **Notification Verification**
   ```php
   // Verify IPG signature
   if (!$this->api_handler->verify_signature($notification)) {
       throw new Exception('Invalid signature');
   }
   ```

2. **Order State Validation**
   - Check current order status
   - Prevent duplicate processing
   - Validate payment amounts

3. **Response Signing**
   ```php
   // Generate response signature
   $msgVerifier = $this->api_handler->generate_message_verifier([
       'PaymentNotificationResponse',
       '1',
       $payment_id,
       $secret_key,
       $redirect_url
   ]);
   ```

## Implementation Notes

1. **Notification Handling**
   ```php
   private function process_payment_result($notification) {
       $order = wc_get_order($notification['trackid']);
       
       if (!$order) {
           throw new Exception('Order not found');
       }
       
       // Store transaction data
       $this->store_transaction_data($order, $notification);
       
       // Update order status based on result
       if ($notification['result'] === 'CAPTURED') {
           $order->payment_complete($notification['tranid']);
       } else {
           $order->update_status('failed', 'Payment failed: ' . $notification['result']);
       }
       
       return $order;
   }
   ```

2. **Data Storage**
   ```php
   private function store_transaction_data($order, $notification) {
       $order->update_meta_data('_novabankaipg_payment_id', $notification['paymentid']);
       $order->update_meta_data('_novabankaipg_transaction_id', $notification['tranid']);
       $order->update_meta_data('_novabankaipg_result', $notification['result']);
       $order->update_meta_data('_novabankaipg_auth_code', $notification['auth']);
       $order->save();
   }
   ```

## Testing Considerations

1. **Notification Testing**
   - Test with IPG test environment
   - Verify signature validation
   - Test all payment result scenarios

2. **Error Handling**
   - Test invalid signatures
   - Test missing order IDs
   - Test duplicate notifications

3. **Response Validation**
   - Verify response format
   - Test signature generation
   - Validate redirect URLs

## Debugging

1. **Enable Logging**
   ```php
   $this->logger->debug('Payment notification received', [
       'notification' => $notification,
       'order_id' => $order_id
   ]);
   ```

2. **Monitor Endpoints**
   - Check WooCommerce logs
   - Monitor notification callbacks
   - Track customer returns

3. **Verify Data**
   - Check order meta data
   - Verify transaction IDs
   - Validate amounts and currencies

## Role and Flow Mapping

### Component Roles
- WooCommerce (Our Plugin) = Merchant Implementation
- IPG = Payment Gateway Service
- Plugin Components = Integration Layer

### Flow Comparison
Your Flow:                     | Documentation Flow:
-----------------------------|-----------------------------
Woo Checkout -> Pay Now      | Merchant Order Form
Plugin Handles Init          | Merchant Backend
IPG HPP                      | IPG HPP
Bank Auth                    | Bank Auth
IPG Response                | IPG Response
Plugin Handles Response     | Merchant Backend
Woo Order Status Update     | Merchant Order Update

### Integration Points


## Data Storage Strategy

### Transaction Data Storage
```php
private function store_transaction_data($order, $notification) {
    // Store all transaction data
    foreach ($notification as $key => $value) {
        $order->update_meta_data("_novabankaipg_{$key}", $value);
    }
    
    // Store raw response for debugging
    $order->update_meta_data('_novabankaipg_raw_response', wp_json_encode($notification));
    
    $order->save();
}
```

### Required Data Fields
1. From IPG to Store:
   - PaymentID
   - TransactionID
   - Auth Code
   - Card Type
   - Card Last 4 Digits
   - Response Codes
   - All IPG Messages

2. Send to IPG:
   - Order ID (trackid)
   - Virtual Product SKU (udf1)
   - Customer Email (buyerEmailAddress)
   - Customer Phone (udf2)
   - Payment Amount (amt)
   - Currency (currencycode)

## Message Verification
```php
private function generate_message_verifier($fields) {
    $message = implode('', array_filter($fields));
    $message = preg_replace('/\s+/', '', $message);
    return base64_encode(hash('sha256', $message, true));
}
```
</file>

<file path="ipg-gateway-example-php.md">
<?php
/*
 * Plugin Name: WooCommerce IPG Payment Gateway
 * Plugin URI: https://www.tasgroup.rs/
 * Description: Extends WooCommerce with the IPG Payment Gateway.
 * Author: TAS EE
 * Author URI: https://www.tasgroup.rs/
 * Version: 1.0.4
 *
 * History: 
 *  1.0.1
 *      - Basic purchase functionality
 *  1.0.2
 *  - Added purchaseInstallData
 *  - Added action_woocommerce_order_refunded
 *  1.0.3
 *  - Fixed action woocommerce_api_callback
 *  1.0.4
 *  - Increased Response Title size and fixed default value of response URL 
 *  1.0.5
 *  - Improved NOT CAPTURED error message presentation
 *
 */

add_action( 'woocommerce_thankyou', 'ipg_order_received_title', 1 );
function ipg_order_received_title( ) {
    
    $title = '';
    if (isset($_GET['result']) &&  ($_GET['result'] == 'CAPTURED' || $_GET['result'] == 'APPROVED')) {
        $title.='<div style="color:Green;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment successful.</label><br>';
        $title.='<label>Result: ' . $_GET['result'] . '</label><br>';
        $title.='<label>Reference:'.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else if (isset($_GET['result']) && $_GET['result'] == 'NOT_CAPTURED') {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment Declined</label><br>';
        $title.='<label>Result: NOT CAPTURED</label><br>';
        $title.='<label>Response Code: '.$_GET['responseCode'].'</label><br>';
        if (isset($_GET['responseDescription'])) {
            $title.='<label>Response Description: '.$_GET['responseDescription'].'</label><br>';
        }
        $title.='<label>Reference: '.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else  if (isset($_GET['errorCode'])) {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Error :'.$_GET['errorCode'];
        if (isset($_GET['errorDesc'])) {
            $title.='-'.$_GET['errorDesc'].'';
        }
        $title.='</label>';
        $title.='</div>';
    } else {
        $title.='<div style="color:Red;font-size: 1.4em;padding-bottom: 0.9em;">';
        $title.='<label>Notification Error - Check RESPONSE URL</label><br>';
        $title.='<label>Please contact support</label><br>';
        $title.='</div>';
    }
    $title .= '<B>';
    
    echo $title;
}

add_filter('woocommerce_payment_gateways', 'ipg_gateway_class');
function ipg_gateway_class($gateways)
{
    $gateways[] = 'WC_IPG_POST_Gateway';
    return $gateways;
}

// Setup the responseURL interface
add_filter('query_vars', 'ipg_add_query_vars');

/**
 * Add the 'ipg_response_interface' query variable so WordPress
 * won't remove it.
 */
function ipg_add_query_vars($vars)
{
    $vars[] = "ipg_response_interface";
    return $vars;
}

add_action('woocommerce_before_thankyou', 'ipg_before_thankyou');

function ipg_before_thankyou($order_id)
{
    $has_order_id = isset($order_id);
    error_log('has_order_id ');
    error_log($has_order_id);
    if ($has_order_id != 1)
        return $order_id;
    
    error_log('Could perform something with Order ID: ');
    error_log($order_id);
    
    $order = new WC_Order($order_id);
    $order->set_payment_method_title('TUSAM');
    
}

/*
 * The class itself, please note that it is inside plugins_loaded action hook
 */
add_action('plugins_loaded', 'ipg_init_gateway_class');

function ipg_init_gateway_class()
{
    
    /**
     * check for 'ipg_response_interface' query variable and do what you want if its there
     */
    add_action('woocommerce_api_callback', 'ipg_response_interface');

    function ipg_response_interface($template)
    {
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
        // Load basics
        require_once ('wp-load.php');
        
        $request_body = file_get_contents("php://input");
        error_log('Received JSON request:');
        error_log($request_body);
        
        if (! isset($request_body) || empty($request_body)) {
            error_log('Received Empty JSON:');
            error_log($request_body);
            return $template;
        }
        
        $request_json = json_decode($request_body);
        
        // json request, reply with json response
        header('Content-Type: application/json');
        
        // Process the order
        if (isset($request_json->type) && $request_json->type == 'valid') {
            error_log('IPG JSON Valid Message:');
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            
            $order->set_transaction_id($request_json->paymentid);
            
            $result_url = $order->get_checkout_order_received_url();
            if (isset($request_json->result) && ($request_json->result == 'CAPTURED' || $request_json->result == 'APPROVED')) {
                $result_url .=  '&result='.$request_json->result.'&ref='.$request_json->ref;
                // Mark order as 'processing'
                $order->payment_complete();
                $order->add_order_note('Received Successful payment from IPG gateway, result: ' . $request_json->result . ', ref: ' . $request_json->ref, 'woocommerce_gateway_ipg');
                // log
                error_log('Received Payment successful from IPG gateway');
                // Order successful URL
            } else {
                $result_url .=  '&result=NOT_CAPTURED&responseCode='.$request_json->responsecode.'&ref='.$request_json->ref.'&responseDescription='.$request_json->responsedescription;
                // Mark order as 'failed'
                $order->update_status('failed', __('Received Payment Declined from IPG gateway , result: ' . $request_json->result . ', responseCode: ' . $request_json->responsecode . ', ref: ' . $request_json->ref.', responseDescription='.$request_json->responsedescription, 'woocommerce_gateway_ipg'));
                // log
                error_log('Received Payment Declined from IPG gateway ');
                // Order successful URL
            }
            // Command the redirection to the ThankYou page
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            $successful_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($successful_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        } else {
            error_log('IPG JSON Error Message:');
            error_log($request_json->errorCode);
            error_log($request_json->errorDesc);
            error_log($request_json->paymentid);
            error_log($request_json->trackid);
            
            wc_add_notice('IPG Response Error', 'error');
            wc_add_notice($request_json->errorDesc, 'error');
            
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            // Mark as 'Processing'
            $order->update_status('failed', __('Received Error from IPG gateway payment, paymentid: ' . $request_json->paymentid . ', errorCode: ' . $request_json->errorCode . ', errorDesc: ' . $request_json->errorDesc, 'woocommerce_gateway_ipg'));
            
            $result_url = $order->get_checkout_order_received_url() . '&errorCode=' . $request_json->errorCode . '&errorDesc=' . $request_json->errorDesc;
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                // 'YXKZPOQ9RRLGPDED5D3PC5BJ',
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            
            $error_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($error_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        }
        exit();

        return $template;
    }

    function getMessageVerifier($messageVerifierFields)
    {
        $messageVerifierBase = '';
        foreach ($messageVerifierFields as &$messageVerifierField) {
            $messageVerifierBase .= $messageVerifierField;
        }
        error_log('Message Verifier Base loaded: ');
        error_log($messageVerifierBase);
        
        $messageVerifierBase_hash = hash('sha256', $messageVerifierBase);
        error_log('Message Verifier Hash Hex loaded: ');
        error_log($messageVerifierBase_hash);
        
        $messageVerifierBase_hash_bytes = hex2bin($messageVerifierBase_hash);
        
        // Convert binary to base64
        $msgVerifier = base64_encode($messageVerifierBase_hash_bytes);
        error_log('Message Verifier Hash Base64 loaded: ');
        error_log($msgVerifier);
        return $msgVerifier;
    }

    class WC_IPG_POST_Gateway extends WC_Payment_Gateway
    {

        /**
         * Class constructor
         */
        public function __construct()
        {
            $this->id = 'asoftipg'; // payment gateway plugin ID

            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            if (empty($this->CheckoutIconUrl)) {
                // Set a default value
                $this->icon = plugin_dir_url(__FILE__) . '../ipg-gateway/assets/img/TASEE.png';
            } else {
                $this->icon = $this->CheckoutIconUrl;
            }
            
            $this->has_fields = false; // true in case you need a custom credit card form
            $this->method_title = 'IPG Gateway';
            $this->method_description = 'Description of IPG payment gateway'; // will be displayed on the options page
                                                                              
            // gateways can support subscriptions, refunds, saved payment methods,
                                                                              // but in this plugin we begin with simple payments
            $this->supports = array(
                'products'
            );
            
            // Method with all the options fields
            $this->init_form_fields();
            
            // Load the settings.
            $this->init_settings();
            $this->title = $this->get_option('title');
            $this->description = $this->get_option('description');
            $this->enabled = $this->get_option('enabled');
            
            $this->MessageType = $this->get_option('MessageType');
            $this->MessageVersion = $this->get_option('MessageVersion');
            $this->TerminalID = $this->get_option('TerminalID');
            $this->Password = $this->get_option('Password');
            $this->IPGURL = $this->get_option('IPGURL');
            $this->IPGSelect = $this->get_option('IPGSelect');
            $this->SecretKey = $this->get_option('SecretKey');
            $this->Action = $this->get_option('Action');
            $this->ResponseURL = $this->get_option('ResponseURL');
            $this->ErrorURL = $this->get_option('ErrorURL');
            $this->NotificationFormat = $this->get_option('NotificationFormat');
            $this->PaymentPageMode = $this->get_option('PaymentPageMode');
            $this->PaymentInstrument = $this->get_option('PaymentInstrument');
            $this->CardSHA2 = $this->get_option('CardSHA2');
            $this->PaymentTimeout = $this->get_option('PaymentTimeout');
            $this->Language = $this->get_option('Language');
            $this->PurchaseInstalData = $this->get_option('PurchaseInstalData');
            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            
            
            // This action hook saves the settings
            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array(
                $this,
                'process_admin_options'
            ));
            
            // We need custom JavaScript to obtain a token
            // add_action( 'wp_enqueue_scripts', array( $this, 'payment_scripts' ) );
            
            // You can also register a webhook here
            // add_action( 'woocommerce_api_IPG_webhook', array( $this, 'webhook' ) );
        }

        /**
         * Plugin options
         */
        public function init_form_fields()
        {
            $this->form_fields = array(
                'title' => array(
                    'title' => 'Title',
                    'type' => 'text',
                    'description' => 'This controls the title which the user sees during checkout.',
                    'default' => 'Credit Card',
                    'desc_tip' => true
                ),
                'description' => array(
                    'title' => 'Description',
                    'type' => 'textarea',
                    'description' => 'This controls the description which the user sees during checkout.',
                    'default' => 'Pay with your credit card via our IPG payment gateway.'
                ),
                'enabled' => array(
                    'title' => 'Enable/Disable',
                    'label' => 'Enable IPG Gateway',
                    'type' => 'checkbox',
                    'description' => '',
                    'default' => 'no'
                ),
                'MessageType' => array(
                    'title' => 'Message Type',
                    'type' => 'select',
                    'default' => 'VISEC / VIREC first transaction',
                    'class' => 'MessageType wc-enhanced-select',
                    'options' => array(
                        'MessageType' => 'VISEC / VIREC first transaction'
                    )
                ),
                'MessageVersion' => array(
                    'title' => 'Message Version',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'MessageVersion wc-enhanced-select',
                    'options' => array(
                        '1' => '1'
                    )),
                'TerminalID' => array(
                    'title' => 'Terminal ID:',
                    'type' => 'text',
                    'default' => '89110001'
                ),
                'Password' => array(
                    'title' => 'Password:',
                    'type' => 'password',
                    'default' => 'test1234'
                ),
                'IPGURL' => array(
                    'title' => 'IPG:',
                    'type' => 'text',
                    'default' => 'http://ipg-test:9080/IPGWeb/servlet/PaymentInitRequest'
                ),
                'SecretKey' => array(
                    'title' => 'Secret Key:',
                    'type' => 'text',
                    'default' => 'YXKZPOQ9RRLGPDED5D3PC5BJ'
                ),
                'Action' => array(
                    'title' => 'Action:',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'Action wc-enhanced-select',
                    'options' => array(
                        '1' => 'PURCHASE',
                        '4' => 'AUTHORIZATION'
                    )
                ),
                'ResponseURL' => array(
                    'title' => 'RESPONSE URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'ErrorURL' => array(
                    'title' => 'ERROR URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'NotificationFormat' => array(
                    'title' => 'Notiication Format:',
                    'type' => 'select',
                    'default' => 'json',
                    'class' => 'NotificationFormat wc-enhanced-select',
                    'options' => array(
                        'json' => 'JSON'
                    )
                ),
                'PaymentPageMode' => array(
                    'title' => 'Payment Page Mode:',
                    'type' => 'select',
                    'default' => '0',
                    'class' => 'PaymentPageMode wc-enhanced-select',
                    'options' => array(
                        '0' => 'STANDARD'
                    )
                ),
                'PaymentInstrument' => array(
                    'title' => 'Payment Instrument:',
                    'type' => 'text',
                    'default' => ''
                ),
                'CardSHA2' => array(
                    'title' => 'CARD SHA2:',
                    'type' => 'select',
                    'default' => 'Y',
                    'class' => 'CardSHA2 wc-enhanced-select',
                    'options' => array(
                        'Y' => 'Yes',
                        'N' => 'No'
                    )
                ),
                'PaymentTimeout' => array(
                    'title' => 'Payment Timeout:',
                    'type' => 'text',
                    'default' => '30'
                ),
                'Language' => array(
                    'title' => 'Language:',
                    'type' => 'text',
                    'default' => 'USA'
                ),
                'PurchaseInstalData' => array(
                    'title' => 'Installment Number: ',
                    'type' => 'text',
                    'default' => ''
                ),
                
                'CheckoutIconUrl' => array(
                    'title' => 'Checkout Icon URL: ',
                    'type' => 'text',
                    'description' => 'Insert URL of your Checkout Icon, or leave empty to use the default one.',
                    'default' => ''
                )
            );
        }

        public function process_payment($order_id)
        {
            global $woocommerce;
            
            // we need it to get any order detailes
            $order = new WC_Order($order_id);
            
            $args = array(
                "msgName" => "PaymentInitRequest",
                'version' => $this->MessageVersion,
                'id' => $this->TerminalID,
                'password' => $this->Password,
                
                'msgVerifier' => "",
                'langId' => $this->Language,
                
                'CartContent' => $this->CartContent, // JSON [complex]
                                                     
                // 'buyerFirstName' => $this->FirstName,
                                                     // 'buyerFirstName' => "",
                                                     // 'buyerLastName' => "",
                                                     // 'buyerUserId' => "",
                                                     // 'buyerPhoneNumber' => "",
                                                     // 'buyeremailaddress' => "",
                                                     // 'clientIpAddress' => "",
                                                     // 'clientUserAgent' => "",
                                                     // 'clientHttpHeaders' => "",
                                                     
                // 'shippingInfo' => "", // JSON
                                                     // 'billingInfo' => "", // JSON
                                                     
                // 'acctType' => "",
                                                     // 'accountInfo' => "", // JSON
                                                     // 'authenticationInfo' => "", // JSON
                                                     // 'priorAuthenticationInfo'=> "", // JSON
                
                'action' => $this->Action,
                'recurAction' => "",
                'recurContractId' => "",
                'responseURL' => $this->ResponseURL, // responseURL
                'errorURL' => $this->ErrorURL, // errorURL
                'currencycode' => $order->get_currency(),
                'amt' => $order->get_total(),
                'trackid' => $order_id,
                'cardSHA2' => $this->CardSHA2,
                'paymentTimeout' => $this->PaymentTimeout,
                //'pymnDscr' => $this->PaymentDescription,
                'notificationFormat' => $this->NotificationFormat,
                'paymentPageMode' => $this->PaymentPageMode,
                'payinst' => $this->PaymentInstrument,
                'purchaseInstalData' => $this->PurchaseInstalData,
            );
            
            if (! function_exists('write_log')) {

                function write_log($log)
                {
                    if (true === WP_DEBUG) {
                        if (is_array($log) || is_object($log)) {
                            error_log(print_r($log, true));
                        } else {
                            error_log($log);
                        }
                    }
                }
            }
            
            $message_verifier_fields_array = array(
                $args['msgName'],
                $args['version'],
                $args['id'],
                $args['password'],
                $args['amt'],
                $args['trackid'],
                '',
                $this->SecretKey,
                ''
            );
            
            // load message verifier
            $args['msgVerifier'] = getMessageVerifier($message_verifier_fields_array);
            
            $args['errorURL'] = $order->get_checkout_order_received_url();
            /*
             * Your API interaction could be built with wp_remote_post()
             */
            // $response = wp_remote_post( '{payment processor endpoint}', $args );
            
            $ipg_url = $this->IPGURL;
            write_log('Sending request, url: ');
            write_log($ipg_url);
            
            $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
            write_log('request_preety_json: ');
            write_log($request_preety_json);
            
            $request_json = json_encode($args);
            write_log('request_json: ');
            write_log($request_json);
            
            // $url = 'localhost:9082/IPGWeb/servlet/PaymentInitRequest';
            $response = wp_remote_post($ipg_url, array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'Content-Type' => 'application/json; charset=utf-8'
                ),
                'body' => $request_json,
                'method' => 'POST',
                'data_format' => 'body'
            ));
            
            if (is_wp_error($response) && ! empty($response->errors)) {
                wc_add_notice('HTTP Response Error', 'error');
                wc_add_notice($response->get_error_message(), 'error');
                return;
            }
            
            $response_code = wp_remote_retrieve_response_code($response);
            write_log('Loaded response code, response_code: ');
            write_log($response_code);
            if (! in_array($response_code, array(
                200,
                201
            ))) {
                wc_add_notice('HTTP Status Error', 'error');
                wc_add_notice($response_code, 'error');
                return;
            }
            
            $response_body = wp_remote_retrieve_body($response);
            write_log('Loaded response body, response_body: ');
            write_log($response_body);
            
            $response_json = json_decode($response_body);
            if (json_last_error() > JSON_ERROR_NONE) {
                wc_add_notice('Response JSON Error:', 'error');
                wc_add_notice(json_last_error_msg(), 'error');
                return;
            }
            
            write_log('Loadded JSON response, response_preety_json: ');
            $response_preety_json = json_encode($response_json, JSON_PRETTY_PRINT);
            write_log($response_preety_json);
            
            // it could be different depending on your payment processor
            if ($response_json->type == 'valid') {
                
                $response_url = $response_json->browserRedirectionURL;
                $response_url .= "?PaymentID=";
                $response_url .= $response_json->paymentid;
                
                if (! filter_var($response_url, FILTER_VALIDATE_URL)) {
                    wc_add_notice('Invalid IPG Response Url:', 'error');
                    wc_add_notice($response_url, 'error');
                    return;
                }
                
                // Mark as on-hold (we're awaiting the cheque)
                $order->update_status('on-hold', __('Awaiting IPG payment', 'ipg_plugin'));
                
                // // Reduce stock levels
                // $order->reduce_order_stock();
                
                // // Remove cart
                // $woocommerce->cart->empty_cart();
                
                // Redirect to the thank you page
                return array(
                    'result' => 'success',
                    'redirect' => $response_url
                );
            } else {
                wc_add_notice('IPG Response Error:', 'error');
                wc_add_notice($response_json->errorCode, 'error');
                wc_add_notice($response_json->errorDesc, 'error');
                return;
            }
                        
        }
        
         
    }
    
    
    // REFOUND CALL 1!
    
    // add the action
    add_action( 'woocommerce_order_refunded', 'action_woocommerce_order_refunded', 10, 2 );
    
    // Do the magic line 659
    function action_woocommerce_order_refunded( $order_id, $refund_id )
    {
        // Your code here
        error_log('REFOUND CALL >>> POST');

        error_log('Order ID: ');
        error_log($order_id);
        
        error_log('$refund_id: ');
        error_log($refund_id);        
        
        // we need it to get any order detailes
        $order = new WC_Order($order_id);
        
        $ipg_url =  'http://ipg-test:33666/IPGWeb/servlet/PaymentInitRequest';
        
        //  Sta treba da posaljem, i kako to da dohvatim i spakujem            <<<<<
        
        global $woocommerce;
        $order = new WC_Order($order_id);
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
       
        $a = array ($WC_IPG_POST_Gateway->get_form_fields());
        $b = $a['SecretKey'][0]->SecretKey;
        $b = 'YXKZPOQ9RRLGPDED5D3PC5BJ';
        
        error_log(' SecretKey == ');
        error_log( $b );
        
        //init_form_fields();

        $args = array(
            'msgName'           => 'FinancialRequest',               
            'version'           => '1',                              
            'id'                => '89110001',     
            'password'          => 'test1234',                       
            'action'            => '2',                             
            'amt'               => '0,01',                           
            'currencycode'      => '840',                            
            'trackid'           => 'CTV-TEST-PureBuy-1',              
            'tranid'            => '980026872121022345', 
            'udf1'               => 'AA',
            'udf2'               => 'BB',
            'udf3'               => 'CC',
            'udf4'               => 'DD',
            'udf5'               => 'EE',
        );
        
        $refund_parameters_message_verifier_fields_array = array(
            $args['msgName'],
            $args['version'],
            $args['id'],
            $args['password'],
            $args['amt'],
            $args['trackid'],
            '',
            $b,
            ''
        );
        
        // Just print to LOG
        $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($request_preety_json);
        
        $refund_parameters_message_verifier_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($refund_parameters_message_verifier_preety_json);
        
        // load message verifier
        $msgVerifier = getMessageVerifier($refund_parameters_message_verifier_fields_array);
        $args['msgVerifier'] = $msgVerifier;

        error_log(' msgVerifier== ');
        error_log( $msgVerifier );
                
        $json_to_go = json_encode($args);
        error_log($json_to_go);
        
        $response = wp_remote_post($ipg_url, array(
            'headers'     => array('Content-Type' => 'application/json; charset=utf-8'),
            'body'        => json_encode($args),
            'method'      => 'POST',
            'data_format' => 'body',
        ));
        
        error_log('DUMMY TEST NOVAK, received data: ');
        
        error_log(' transactionId== ');
        error_log($response->transactionId);
        
        error_log(' order_number== ');
        error_log($response->order_number);
        

    }
    

    
}
</file>

<file path="Simplified Plan for Seperation of Concerns SOC.md">
### Simplified Plan for Separation of Concerns (SoC)

#### Refactor the Core Payment Gateway Class (`NovaBankaIPGGateway`)

**Responsibility**: The `NovaBankaIPGGateway` should only handle WooCommerce integration, gateway setup, and initial flow control.

**Actions**:
- Keep WooCommerce hooks (`add_gateway`, `handle_callback`, etc.) in this class.
- Move business logic related to payments and refunds to dedicated service classes.

#### Create a `PaymentService` Class

**Responsibility**: Handle the actual payment processing logic, including payment initialization and refunds.

**Actions**:
- Move methods related to processing payments and generating API requests, like `process_payment()` and `sendPaymentInit()`, to `PaymentService`.
- This service should interact with the IPG API and should not be directly aware of WooCommerce.

```php
class PaymentService {
    private $api_handler;
    private $logger;

    /**
     * Constructor for PaymentService.
     *
     * @param APIHandler $api_handler Handles HTTP communication.
     * @param Logger $logger Manages logging.
     */
    public function __construct($api_handler, $logger) {
        $this->api_handler = $api_handler;
        $this->logger = $logger;
    }

    /**
     * Initializes a payment for an order.
     *
     * @param WC_Order $order The WooCommerce order object to initialize payment for.
     * @return array Response from the API containing payment initiation details.
     */
    public function initializePayment($order) {
        // Extract payment logic here to handle interactions with the IPG API.
        return $this->api_handler->sendPaymentInit($order);
    }

    /**
     * Refunds a payment for an order.
     *
     * @param WC_Order $order The WooCommerce order object to refund.
     * @param float $amount The amount to be refunded.
     */
    public function refundPayment($order, $amount) {
        // Handle refund logic here, including communication with the IPG API.
    }
}
```

#### Simplify `APIHandler` for API Requests Only

**Responsibility**: Handle HTTP communication with the NovaBanka IPG API.

**Actions**:
- Ensure that `APIHandler` contains only methods to send API requests and receive responses.
- Avoid embedding business rules, such as checking WooCommerce order statuses, in `APIHandler`.

#### Centralize Configuration Handling with `Config` Utility

**Gateway Settings Management**:
- Use the WooCommerce settings API (`init_form_fields`) to keep all configuration in one place.
- Move configuration fetching logic from the main plugin class to a new `Config` utility class.
- The `Config` class should provide a central point for managing default values and retrieving settings safely.

```php
class Config {
    /**
     * Retrieves a setting value by its key.
     *
     * @param string $key The key of the setting to retrieve.
     * @return mixed The setting value, or null if it does not exist.
     */
    public static function getSetting($key) {
        $settings = get_option('woocommerce_novabankaipg_settings', []);
        return $settings[$key] ?? null;
    }
}
```

#### Extract Logging Logic to a `Logger` Utility

**Responsibility**: Handle all log-related actions.

**Actions**:
- Move all logging to a dedicated `Logger` class, using WordPress’s built-in `WC_Logger` where appropriate.
- This ensures that logging can be easily modified (e.g., switching to a different logging mechanism).

#### Centralized Error Handling Using Custom Exceptions

**Custom Exceptions**:
- Introduce `NovaBankaIPGException` for specific error scenarios, such as `InvalidOrderException` or `PaymentFailureException`.
- This makes error management clearer and allows different parts of the system to respond appropriately.

**Error Management**:
- Ensure that exception handling is centralized within the payment service and is properly logged.

#### Refactor Payment Initialization and Notification Handlers

**Payment Initialization (`process_payment()`)**:
- Remain in `NovaBankaIPGGateway` but delegate to `PaymentService` for the actual initialization.

**Notification Handler (`handle_notification_callback()`)**:
- Extract the notification callback to `NotificationService` to manage incoming callbacks from IPG.

#### Simplify Front-End JavaScript Handling

**Split Functionality**:
- Move form handling and validation logic to a dedicated JavaScript module (e.g., `validation.js`).
- Keep different concerns, such as event listeners and API requests, in separate files.

### Revised Folder Structure for SoC

```
/includes
    /Core
        NovaBankaIPGGateway.php        // Handles WooCommerce integration only
    /Services
        PaymentService.php             // Handles payment-related business logic
        NotificationService.php        // Manages IPG notifications
    /Utils
        APIHandler.php                 // Handles HTTP communication
        Logger.php                     // Centralized logging utility
        Config.php                     // Manages plugin configuration
/assets
    /js
        validation.js                  // Front-end form validation logic
        api-handler.js                 // AJAX handling for payments
```

### Benefits of This Simplified Refactor

- **Easier Maintenance**: Each class has a specific responsibility, making the codebase easier to read and maintain.
- **Reduced Coupling**: By extracting services (`PaymentService`, `NotificationService`), changes in payment logic do not affect the WooCommerce-specific integration logic.
- **Improved Testability**: Moving business logic into services allows unit tests to be implemented more effectively without requiring WooCommerce context.
- **Alignment with WooCommerce Standards**: Keeping WooCommerce-specific concerns inside the `NovaBankaIPGGateway` class ensures better alignment with WooCommerce coding guidelines.

### Step-by-Step Refactor Implementation

1. **Extract Payment Logic to `PaymentService`**:
   - Move methods from `NovaBankaIPGGateway` that deal with initiating and validating payments.

2. **Refactor `APIHandler`**:
   - Simplify to focus solely on handling HTTP requests and responses.

3. **Migrate Logging to `Logger` Utility**:
   - Replace in-line logging throughout the codebase with calls to `Logger` for consistency.

4. **Notification Management**:
   - Extract the notification handling logic to `NotificationService` to streamline incoming payment notifications.

5. **Frontend Improvements**:
   - Ensure JavaScript for handling payment buttons and forms is organized into distinct responsibilities, such as validation and API communication.

This refactor plan keeps changes manageable, aligns with WooCommerce standards, and significantly improves the separation of concerns across the plugin for better maintainability and extensibility.
</file>

<file path="Simplified Plan for SOC To Do List.md">
### To-Do List for Completing SoC Refactor Based on Code Comparison

After comparing the provided old and refactored codebases, here are the steps required to ensure all components from the old implementation are fully transitioned into the new structure and aligned with the documented Separation of Concerns (SoC).

Complete OLD codebase: /home/financhssh/webprojects/financ/wp-content/plugins/gateway-33/repopack-output-main-branch.xml
Complete NEW codebase: /home/financhssh/webprojects/financ/wp-content/plugins/gateway-33/repopack-output.xml


#### 1. **Reintroduce Data Handling Utility (`DataHandler`)**
- **Issue**: The `DataHandler` class from the old code is not present in the refactored codebase.
- **Action**: Add the `DataHandler` class to the `/Utils` folder. This class should be responsible for formatting payment amounts, phone numbers, item amounts, and validating language codes, as in the old implementation.
- **Details**:
  - Ensure methods like `format_amount()`, `format_phone()`, and `validate_language_code()` are included.
  - This class should be used within the `PaymentService` and potentially within other utilities for consistent data formatting.

#### 2. **Reintegrate 3D Secure Handling (`ThreeDSHandler`)**
- **Issue**: The `ThreeDSHandler` utility is missing in the new codebase, but it was previously managing the 3D Secure (3DS) authentication process.
- **Action**: Add `ThreeDSHandler` to `/Utils`.
  - Ensure it handles the interaction with the 3D Secure mechanism, as part of the payment flow.
  - Reconnect `ThreeDSHandler` to the `PaymentService` so that 3D Secure verifications are executed appropriately.

#### 3. **Revise the Notification Handling Logic**
- **Issue**: While the `NotificationService` has been created, some of the finer aspects of handling notifications, such as specific error responses or signature verification, might be missing.
- **Action**: Double-check the `NotificationService` against the original notification handling code to ensure all logic has been carried over, particularly signature verification and response management.
- **Details**:
  - Make sure the notification verification (`verify_signature`) logic is implemented consistently.
  - Properly manage different notification types, including success, failure, and error scenarios.

#### 4. **Add Test Mode and Debug Logging Settings**
- **Issue**: The previous version had detailed settings for managing test and debug modes, which appear to be partially simplified or omitted in the refactor.
- **Action**: Reinstate `test_mode` and `debug` settings within `Config`.
  - Ensure the `Logger` utility can be set to different levels of verbosity based on the `debug` flag.
  - Test mode should control which API endpoint is used (live vs. test) and other related settings, like dummy credentials.

#### 5. **Enhance Logger Utility (`Logger`)**
- **Issue**: Logging is centralized, but the previous code included different log levels (`debug`, `info`, `warning`, `error`, `critical`).
- **Action**: Expand the `Logger` class to fully support different log levels.
  - Reintroduce log level configuration to provide more granular control over what gets logged.
  - Ensure all classes (`PaymentService`, `NotificationService`, `APIHandler`) use the appropriate log levels.

#### 6. **Update JavaScript for Enhanced User Interaction**
- **Issue**: Front-end JavaScript (`ipg-admin.js`, `ipg-scripts.js`) needs to be properly separated by concern.
- **Action**:
  - Split form validation logic into a separate module (e.g., `validation.js`) from the initialization and event handling logic.
  - Ensure each JavaScript module has a specific focus, such as form validation, API communication, or UI event handling.

#### 7. **Integrate Missing API Methods in `APIHandler`**
- **Issue**: Some methods from the old `APIHandler` may not have been transferred, such as those dealing with refund processing or notification verification.
- **Action**: Add missing methods to the `APIHandler` class for a complete set of API interactions.
  - Ensure methods like `process_refund()`, `verify_notification()`, and `send_payment_init()` are properly included.
  - `APIHandler` should focus solely on handling the HTTP requests and responses with the external IPG.

#### 8. **Revise Refund Handling in `PaymentService`**
- **Issue**: The refund logic (`process_refund()`) in the refactored `PaymentService` appears simplified compared to the original.
- **Action**: Update `PaymentService` to include more comprehensive refund handling logic.
  - Reintroduce validation checks, logging, and API call management as seen in the old codebase.
  - Ensure refunds are processed using the `APIHandler` and are consistent with the original flow.

#### 9. **Add Consistent Exception Handling**
- **Issue**: Custom exception handling (`NovaBankaIPGException`) is present, but it is not consistently applied across all classes.
- **Action**: Ensure `NovaBankaIPGException` is used uniformly across the codebase.
  - Replace generic PHP exceptions with `NovaBankaIPGException` where applicable.
  - Make sure each exception includes meaningful messages and additional context for easier debugging.

#### 10. **Adjust WooCommerce Hooks and Settings Initialization**
- **Issue**: Some WooCommerce-specific hooks and settings (e.g., for receipt pages or order processing) might not have been transferred.
- **Action**:
  - Review WooCommerce hook initialization in `NovaBankaIPGGateway` to make sure all previously supported hooks are in place.
  - Reintroduce receipt page and order status hooks as necessary.

class-novabankaipg.php *main plugin file*
  /assets/
    /js
      ipg-admin.js
      ipg-scripts.js
    /css
    ipg-admin.css
      ipg-styles.css
  /includes
    /Core
      class-novabankaipggateway.php        // Only handles WooCommerce integration.
    /Services
      class-paymentservice.php             // Payment business logic.
      class-notificationservice.php        // Manages incoming callbacks and notifications.
  /Utils
    class-apihandler.php                 // HTTP communication.
    class-logger.php                     // Logging utility, includes log levels.
    class-config.php                     // Configuration handling.
    class-datahandler.php                // Data formatting and validation.
    class-threedshandler.php             // Handles 3DS processing.
  /Exceptions
    class-novabankaipgexception.php      // Custom exception handling.

Various other developer notes and ASoft notes are in the codebase. This SOC To Do List is based on the code comparison and the notes.

### Summary
This to-do list is designed to fully integrate the key elements from the old codebase into the new refactored structure, ensuring alignment with the SoC principles. The steps focus on improving utility handling, ensuring comprehensive error management, reinstating key functional parts (e.g., data and 3D Secure handlers), and enhancing consistency across the codebase, all while following WooCommerce and WordPress best practices.
</file>

</repository_files>
