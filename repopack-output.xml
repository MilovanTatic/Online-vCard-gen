This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-28T20:15:02.478Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
assets/
  css/
    ipg-admin.css
    ipg-styles.css
  js/
    ipg-admin.js
    ipg-scripts.js
includes/
  Core/
    class-novabankaipggateway.php
  Exceptions/
    class-novabankaipgexception.php
  Services/
    class-notificationservice.php
    class-paymentservice.php
  Utils/
    class-apihandler.php
    class-config.php
    class-datahandler.php
    class-logger.php
    class-messagehandler.php
    class-sharedutilities.php
    class-threedshandler.php
.cursorignore
.cursorrules
.gitignore
Asoft IPG 3DS eCommerce Transaction flow.md
AsoftIPG-integration-guide.xml
class-novabankaipg.php
developer-log.json
ipg-gateway-example-php.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="assets/css/ipg-admin.css">
/* assets/css/ipg-admin.css */

.ipg-admin-section {
    padding: 20px;
    background: #fff;
    border: 1px solid #ddd;
    margin: 10px 0;
}

.ipg-field-row {
    margin: 15px 0;
}

.ipg-field-row label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
}

.ipg-field-row input[type="text"],
.ipg-field-row input[type="password"] {
    width: 400px;
    max-width: 100%;
}

.ipg-field-description {
    color: #666;
    font-style: italic;
    margin-top: 5px;
}

.ipg-test-mode-notice {
    background: #fff8e5;
    border-left: 4px solid #ffb900;
    padding: 10px;
    margin: 10px 0;
}

/* Transaction details table */
.ipg-transaction-details {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
}

.ipg-transaction-details th,
.ipg-transaction-details td {
    padding: 8px;
    text-align: left;
    border: 1px solid #ddd;
}

.ipg-transaction-details th {
    background: #f8f8f8;
}
</file>

<file path="assets/css/ipg-styles.css">
/* assets/css/ipg-styles.css */

/* Payment form styling */
.ipg-payment-form {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
}

/* Loading overlay for redirect */
.ipg-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.ipg-loading-overlay.active {
    display: flex;
}

.ipg-loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

/* Payment status messages */
.ipg-status-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
}

.ipg-status-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.ipg-status-error {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Animation keyframes */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</file>

<file path="assets/js/ipg-admin.js">
// assets/js/ipg-admin.js

(function($) {
    'use strict';

    const NovaBankaIPGAdmin = {
        init: function() {
            this.initializeTooltips();
            this.handleTestMode();
            this.initializeValidation();
        },

        initializeTooltips: function() {
            $('.ipg-help-tip').tipTip({
                'attribute': 'data-tip',
                'fadeIn': 50,
                'fadeOut': 50,
                'delay': 200
            });
        },

        handleTestMode: function() {
            const testModeCheckbox = $('#woocommerce_novabankaipg_testmode');
            const credentialsSection = $('.ipg-credentials-section');

            testModeCheckbox.on('change', function() {
                if ($(this).is(':checked')) {
                    credentialsSection.before(
                        '<div class="ipg-test-mode-notice">' +
                        'Test mode is enabled - test credentials will be used.' +
                        '</div>'
                    );
                } else {
                    $('.ipg-test-mode-notice').remove();
                }
            });

            // Trigger on page load
            testModeCheckbox.trigger('change');
        },

        initializeValidation: function() {
            const form = $('form#mainform');

            form.on('submit', function(e) {
                const terminal_id = $('#woocommerce_novabankaipg_terminal_id').val();
                const terminal_password = $('#woocommerce_novabankaipg_terminal_password').val();
                const secret_key = $('#woocommerce_novabankaipg_secret_key').val();

                if ($('#woocommerce_novabankaipg_enabled').is(':checked')) {
                    if (!terminal_id || !terminal_password || !secret_key) {
                        e.preventDefault();
                        alert('Please provide all required credentials for the payment gateway.');
                        return false;
                    }
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPGAdmin.init();
    });

})(jQuery);
</file>

<file path="assets/js/ipg-scripts.js">
(function($) {
    'use strict';

    const NovaBankaIPG = {
        init: function() {
            this.form = $('form.checkout');
            this.submitButton = $('button#place_order');
            this.loadingOverlay = $('.ipg-loading-overlay');
            this.initializeEvents();
        },

        initializeEvents: function() {
            // Handle form submission
            this.form.on('checkout_place_order_novabankaipg', this.handleSubmit.bind(this));

            // Handle HPP return
            if (window.location.href.indexOf('novabankaipg-return') > -1) {
                this.handleReturn();
            }
        },

        handleSubmit: function() {
            this.showLoading();
            return true; // Allow form submission
        },

        showLoading: function() {
            this.loadingOverlay.addClass('active');
            this.submitButton.prop('disabled', true);
        },

        hideLoading: function() {
            this.loadingOverlay.removeClass('active');
            this.submitButton.prop('disabled', false);
        },

        handleReturn: function() {
            // Handle return from HPP
            const urlParams = new URLSearchParams(window.location.search);
            const status = urlParams.get('payment_status');

            if (status === 'success') {
                this.showMessage('Payment completed successfully.', 'success');
            } else if (status === 'cancel') {
                this.showMessage('Payment was cancelled.', 'error');
            } else if (status === 'error') {
                this.showMessage('Payment failed. Please try again.', 'error');
            }
        },

        showMessage: function(message, type) {
            // Remove existing messages
            $('.woocommerce-error, .woocommerce-message, .ipg-status-message').remove();

            // Create message element using WooCommerce classes for consistency
            const messageHtml = type === 'success' 
                ? `<div class="woocommerce-message">${message}</div>`
                : `<div class="woocommerce-error">${message}</div>`;
            
            // Add message to WooCommerce notices wrapper
            $('.woocommerce-notices-wrapper').first().html(messageHtml);

            // Scroll to message
            $('html, body').animate({
                scrollTop: $('.woocommerce-notices-wrapper').first().offset().top - 100
            }, 500);
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        NovaBankaIPG.init();
    });

})(jQuery);
</file>

<file path="includes/Core/class-novabankaipggateway.php">
<?php
/**
 * NovaBanka IPG Gateway Class
 *
 * This class integrates the NovaBanka IPG into WooCommerce.
 * Handles payment settings, order processing, and general WooCommerce compatibility.
 *
 * @package NovaBankaIPG\Core
 * @since 1.0.1
 */

namespace NovaBankaIPG\Core;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

use WC_Payment_Gateway;
use WC_Order;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\ThreeDSHandler;
use NovaBankaIPG\Services\PaymentService;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;

/**
 * Main gateway class for NovaBanka IPG integration.
 */
class NovaBankaIPGGateway extends WC_Payment_Gateway {
	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	protected $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	protected $logger;

	/**
	 * Data Handler instance.
	 *
	 * @var DataHandler
	 */
	protected $data_handler;

	/**
	 * ThreeDS Handler instance.
	 *
	 * @var ThreeDSHandler
	 */
	protected $threeds_handler;

	/**
	 * Payment Service instance.
	 *
	 * @var PaymentService
	 */
	protected $payment_service;

	/**
	 * Constructor.
	 */
	public function __construct() {
		$this->id                 = 'novabankaipg';
		$this->method_title       = __( 'NovaBanka IPG', 'novabanka-ipg-gateway' );
		$this->method_description = __( 'NovaBanka IPG payment gateway integration', 'novabanka-ipg-gateway' );

		// Initialize basic gateway settings.
		$this->init_form_fields();
		$this->init_settings();

		// Initialize dependencies.
		$this->init_dependencies();

		// Set basic gateway properties.
		$this->title       = $this->get_option( 'title' );
		$this->description = $this->get_option( 'description' );
		$this->enabled     = $this->get_option( 'enabled' );

		// Add actions.
		add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) );
	}

	/**
	 * Initialize dependencies.
	 */
	private function init_dependencies(): void {
		// Initialize logger first.
		$this->logger       = new Logger();
		$this->data_handler = new DataHandler();

		// Get settings.
		$settings = Config::get_all_settings();

		// Initialize API handler.
		$this->api_handler = new APIHandler(
			$settings['api_endpoint'] ?? '',
			$settings['terminal_id'] ?? '',
			$settings['terminal_password'] ?? '',
			$settings['secret_key'] ?? '',
			$this->logger,
			$this->data_handler,
			$settings['test_mode'] ?? 'yes'
		);

		// Initialize 3DS handler.
		$this->threeds_handler = new ThreeDSHandler(
			$this->api_handler,
			$this->logger
		);

		// Initialize payment service.
		$this->payment_service = new PaymentService(
			$this->api_handler,
			$this->logger,
			$this->data_handler
		);
	}

	/**
	 * Initialize gateway settings form fields.
	 */
	public function init_form_fields(): void {
		$this->form_fields = Config::get_form_fields();
	}

	/**
	 * Process the payment for an order.
	 *
	 * @param int $order_id Order ID.
	 * @return array Payment result data.
	 */
	public function process_payment( $order_id ): array {
		try {
			$order = wc_get_order( $order_id );

			$this->logger->info( 'Payment process initialized.', array( 'order_id' => $order_id ) );

			// Check if the gateway is in test mode and log accordingly.
			if ( Config::is_test_mode() ) {
				$this->logger->info( 'Processing payment in test mode.', array( 'order_id' => $order_id ) );
			}

			// Prepare payment data
			$payment_data = array(
				'order_id' => $order_id,
				'amount'   => $order->get_total(),
				'currency' => $order->get_currency(),
				'trackid'  => $order->get_order_key(),
			);

			// Use PaymentService to initialize the payment.
			$response = $this->payment_service->initialize_payment( $order, $payment_data );

			// Store payment ID and redirect user to the payment gateway.
			$order->update_status(
				'on-hold',
				esc_html__( 'Awaiting payment gateway response.', 'novabanka-ipg-gateway' )
			);

			return array(
				'result'   => 'success',
				'redirect' => $response['browserRedirectionURL'],
			);

		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'Payment process failed.',
				array(
					'order_id' => $order_id,
					'error'    => $e->getMessage(),
				)
			);

			wc_add_notice(
				esc_html__( 'Payment error: ', 'novabanka-ipg-gateway' ) . esc_html( $e->getMessage() ),
				'error'
			);

			return array(
				'result' => 'failure',
			);
		}
	}

	/**
	 * Safe logging method.
	 *
	 * @param string $message Message to log.
	 * @param array  $context Context data.
	 * @param string $level   Log level (default: 'info').
	 */
	protected function log( string $message, array $context = array(), string $level = 'info' ): void {
		if ( $this->logger ) {
			$this->logger->{$level}( $message, $context );
		}
	}
}
</file>

<file path="includes/Exceptions/class-novabankaipgexception.php">
<?php
/**
 * Custom Exception Handler
 *
 * Handles custom exceptions for the NovaBanka IPG plugin with proper error codes,
 * messages, and data handling.
 *
 * @package NovaBankaIPG\Exceptions
 * @since 1.0.1
 */

namespace NovaBankaIPG\Exceptions;

use Exception;

/**
 * NovaBankaIPGException Class
 *
 * Custom exception class for handling IPG specific errors.
 */
class NovaBankaIPGException extends Exception {
	/**
	 * Error codes and their messages.
	 *
	 * @var array
	 */
	private const ERROR_CODES = array(
		// API Errors (1000-1999).
		'API_ERROR'             => array(
			'code'    => 1000,
			'message' => 'API communication error.',
		),
		'INVALID_RESPONSE'      => array(
			'code'    => 1001,
			'message' => 'Invalid response from gateway.',
		),
		'INVALID_SIGNATURE'     => array(
			'code'    => 1002,
			'message' => 'Invalid message signature.',
		),

		// Validation Errors (2000-2999).
		'INVALID_AMOUNT'        => array(
			'code'    => 2000,
			'message' => 'Invalid amount format or value.',
		),
		'INVALID_CURRENCY'      => array(
			'code'    => 2001,
			'message' => 'Unsupported currency.',
		),
		'MISSING_FIELD'         => array(
			'code'    => 2002,
			'message' => 'Required field missing.',
		),

		// Payment Errors (3000-3999).
		'PAYMENT_FAILED'        => array(
			'code'    => 3000,
			'message' => 'Payment failed.',
		),
		'PAYMENT_CANCELLED'     => array(
			'code'    => 3001,
			'message' => 'Payment cancelled by user.',
		),
		'3DS_ERROR'             => array(
			'code'    => 3002,
			'message' => '3D Secure authentication failed.',
		),

		// Order Errors (4000-4999).
		'ORDER_NOT_FOUND'       => array(
			'code'    => 4000,
			'message' => 'Order not found.',
		),
		'INVALID_ORDER_STATE'   => array(
			'code'    => 4001,
			'message' => 'Invalid order state.',
		),

		// Configuration Errors (5000-5999).
		'INVALID_CONFIGURATION' => array(
			'code'    => 5000,
			'message' => 'Invalid gateway configuration.',
		),
	);

	/**
	 * Additional error data.
	 *
	 * @var mixed
	 */
	private $error_data;

	/**
	 * Error type.
	 *
	 * @var string
	 */
	private $error_type;

	/**
	 * Constructor.
	 *
	 * @param string    $message    Error message.
	 * @param string    $error_type Error type from ERROR_CODES.
	 * @param mixed     $error_data Additional error data.
	 * @param Exception $previous   Previous exception.
	 */
	public function __construct(
		string $message = '',
		string $error_type = 'API_ERROR',
		mixed $error_data = null,
		Exception $previous = null
	) {
		$error_code      = self::ERROR_CODES[ $error_type ]['code'] ?? 1000;
		$default_message = self::ERROR_CODES[ $error_type ]['message'] ?? 'Unknown error.';

		parent::__construct(
			$message ? esc_html( $message ) : esc_html( $default_message ),
			$error_code,
			$previous
		);

		$this->error_type = $error_type;
		$this->error_data = $error_data;
	}

	/**
	 * Get error data.
	 *
	 * @return mixed Error data.
	 */
	public function get_error_data() {
		return $this->error_data;
	}

	/**
	 * Get error type.
	 *
	 * @return string Error type.
	 */
	public function get_error_type(): string {
		return $this->error_type;
	}

	/**
	 * Create API error exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function api_error( string $message = '', $data = null ): self {
		return new self( $message, 'API_ERROR', $data );
	}

	/**
	 * Create validation error exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function validation_error( string $message = '', $data = null ): self {
		return new self( $message, 'MISSING_FIELD', $data );
	}

	/**
	 * Create payment error exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Error data.
	 * @return self
	 */
	public static function payment_error( string $message = '', $data = null ): self {
		return new self( $message, 'PAYMENT_FAILED', $data );
	}

	/**
	 * Create invalid signature exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function invalid_signature( string $message = '', $data = null ): self {
		return new self( $message, 'INVALID_SIGNATURE', $data );
	}

	/**
	 * Create order not found exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function order_not_found( string $message = '', $data = null ): self {
		return new self( $message, 'ORDER_NOT_FOUND', $data );
	}

	/**
	 * Create invalid configuration exception.
	 *
	 * @param string $message Error message.
	 * @param mixed  $data    Additional error data.
	 * @return self
	 */
	public static function invalid_configuration( string $message = '', $data = null ): self {
		return new self( $message, 'INVALID_CONFIGURATION', $data );
	}

	/**
	 * Get error details as array.
	 *
	 * @return array Error details.
	 */
	public function get_error_details(): array {
		return array(
			'type'    => $this->error_type,
			'code'    => $this->getCode(),
			'message' => $this->getMessage(),
			'data'    => $this->error_data,
		);
	}

	/**
	 * Get error message with code.
	 *
	 * @return string Formatted error message.
	 */
	public function get_error_message(): string {
		return sprintf(
			/* translators: 1: Error code, 2: Error message */
			esc_html__( '[Error %1$d] %2$s', 'novabanka-ipg-gateway' ),
			$this->getCode(),
			$this->getMessage()
		);
	}
}
</file>

<file path="includes/Services/class-notificationservice.php">
<?php
/**
 * NotificationService Class
 *
 * This class is responsible for managing notification-related logic for NovaBanka IPG.
 * It handles notifications received from IPG and processes them accordingly.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use WC_Order;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use Exception;

/**
 * Class NotificationService
 *
 * Handles IPG payment notifications and processes order status updates.
 */
class NotificationService {
	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Data handler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Constructor.
	 *
	 * @param Logger      $logger       Logger instance.
	 * @param DataHandler $data_handler Data handler instance.
	 */
	public function __construct(
		Logger $logger,
		DataHandler $data_handler
	) {
		$this->logger       = $logger;
		$this->data_handler = $data_handler;
	}

	/**
	 * Handle incoming notification from IPG.
	 *
	 * @param array $notification_data The notification data received from IPG.
	 * @return void
	 * @throws NovaBankaIPGException When the notification handling fails.
	 */
	public function handle_notification( array $notification_data ): void {
		try {
			// 1. Verify signature
			$this->verify_notification_signature( $notification_data );
			
			// 2. Get and validate order
			$order = $this->get_order_from_notification( $notification_data );
			
			// 3. Process notification based on result
			switch ( $notification_data['result'] ) {
				case 'CAPTURED':
					$this->process_successful_payment( $order, $notification_data );
					break;
				case 'FAILED':
					$this->process_failed_payment( $order, $notification_data );
					break;
				case 'CANCELLED':
					$this->process_cancelled_payment( $order, $notification_data );
					break;
			}

			// 4. Store transaction data
			$this->store_transaction_data( $order, $notification_data );

		} catch ( Exception $e ) {
			$this->logger->error(
				'Notification handling failed.',
				array(
					'error'             => esc_html( $e->getMessage() ),
					'notification_data' => $notification_data,
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Process successful payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_successful_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->payment_complete( $notification_data['tranid'] );
		$order->add_order_note(
			sprintf(
				/* translators: %1$s: Transaction ID, %2$s: Auth Code, %3$s: Amount */
				esc_html__( 'Payment completed successfully. Transaction ID: %1$s, Auth Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['tranid'],
				$notification_data['auth'],
				$formatted_amount
			)
		);

		$this->store_transaction_data( $order, $notification_data );

		/**
		 * Action after successful payment processing.
		 *
		 * @since 1.0.1
		 * @param WC_Order $order            The order being processed.
		 * @param array    $notification_data The notification data.
		 */
		do_action( 'novabankaipg_after_successful_payment', $order, $notification_data );
	}

	/**
	 * Process declined payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_declined_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'on-hold',
			sprintf(
				/* translators: %1$s: Result, %2$s: Code, %3$s: Amount */
				esc_html__( 'Payment was declined. Result: %1$s, Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A',
				$formatted_amount
			)
		);

		/**
		 * Action after declined payment processing.
		 *
		 * @since 1.0.1
		 * @param WC_Order $order            The order being processed.
		 * @param array    $notification_data The notification data.
		 */
		do_action( 'novabankaipg_after_declined_payment', $order, $notification_data );
	}

	/**
	 * Process failed payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_failed_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'failed',
			sprintf(
				/* translators: %1$s: Result, %2$s: Code, %3$s: Amount */
				esc_html__( 'Payment failed. Result: %1$s, Code: %2$s, Amount: %3$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$notification_data['responsecode'] ?? 'N/A',
				$formatted_amount
			)
		);

		/**
		 * Action after failed payment processing.
		 *
		 * @since 1.0.1
		 * @param WC_Order $order            The order being processed.
		 * @param array    $notification_data The notification data.
		 */
		do_action( 'novabankaipg_after_failed_payment', $order, $notification_data );
	}

	/**
	 * Process cancelled payment.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function process_cancelled_payment( WC_Order $order, array $notification_data ): void {
		$formatted_amount = SharedUtilities::format_amount( $order->get_total() );
		$order->update_status(
			'cancelled',
			sprintf(
				/* translators: %1$s: Result, %2$s: Amount */
				esc_html__( 'Payment was cancelled. Result: %1$s, Amount: %2$s', 'novabanka-ipg-gateway' ),
				$notification_data['result'],
				$formatted_amount
			)
		);

		/**
		 * Action after cancelled payment processing.
		 *
		 * @since 1.0.1
		 * @param WC_Order $order            The order being processed.
		 * @param array    $notification_data The notification data.
		 */
		do_action( 'novabankaipg_after_cancelled_payment', $order, $notification_data );
	}

	/**
	 * Store transaction data in order meta.
	 *
	 * @param WC_Order $order Order object.
	 * @param array    $notification_data Payment notification data.
	 * @return void
	 */
	private function store_transaction_data( WC_Order $order, array $notification_data ): void {
		$order->update_meta_data( '_novabankaipg_auth_code', $notification_data['auth'] );
		$order->update_meta_data( '_novabankaipg_card_type', $notification_data['cardtype'] ?? 'unknown' );
		$order->update_meta_data( '_novabankaipg_card_last4', $notification_data['cardLastFourDigits'] );
		$order->update_meta_data( '_novabankaipg_payment_reference', $notification_data['paymentReference'] ?? 'N/A' );
		$order->save();
	}

	/**
	 * Verify notification signature.
	 *
	 * @param array $notification_data Notification data to verify.
	 * @return void
	 * @throws NovaBankaIPGException If signature verification fails.
	 */
	private function verify_notification_signature( array $notification_data ): void {
		$verifier_fields = array(
			$notification_data['msgName'],
			$notification_data['version'],
			$notification_data['paymentid'],
			$notification_data['amt'],
			$notification_data['status'],
			$notification_data['result'],
		);

		$calculated_verifier = SharedUtilities::generate_message_verifier( ...$verifier_fields );

		if ( ! hash_equals( $calculated_verifier, $notification_data['msgVerifier'] ) ) {
			throw new NovaBankaIPGException( 'Invalid notification message signature.' );
		}
	}
}
</file>

<file path="includes/Services/class-paymentservice.php">
<?php
/**
 * Payment Service Class
 *
 * Handles payment processing operations for the NovaBanka IPG plugin.
 * Implements payment flow according to IPG integration guide.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Services;

use WC_Order;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use Exception;

/**
 * Handles payment processing operations.
 */
class PaymentService {
	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Data Handler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Constructor.
	 *
	 * @param Logger      $logger       Logger instance.
	 * @param DataHandler $data_handler Data handler instance.
	 */
	public function __construct(
		Logger $logger,
		DataHandler $data_handler
	) {
		$this->logger       = $logger;
		$this->data_handler = $data_handler;
	}

	/**
	 * Process a payment for an order.
	 *
	 * @param int $order_id WooCommerce order ID.
	 * @return array Payment result data.
	 * @throws NovaBankaIPGException When payment processing fails.
	 */
	public function process_order_payment( int $order_id ): array {
		$order = wc_get_order( $order_id );
		if ( ! $order ) {
			throw new NovaBankaIPGException( esc_html__( 'Invalid order ID.', 'novabanka-ipg-gateway' ) );
		}

		try {
			$this->logger->info( 'Payment process initialized.', array( 'order_id' => $order_id ) );

			// 1. Prepare payment data
			$payment_data = $this->prepare_payment_data( $order );

			// 2. Generate message verifier
			$payment_data['msgVerifier'] = SharedUtilities::generate_message_verifier(
				$payment_data['msgName'],
				$payment_data['version'],
				$payment_data['id'],
				$payment_data['password'],
				$payment_data['amt'],
				$payment_data['trackid']
			);

			// 3. Make API request
			$response = wp_remote_post(
				SharedUtilities::get_api_endpoint( '/PaymentInitRequest' ),
				array(
					'headers' => array( 'Content-Type' => 'application/json' ),
					'body'    => wp_json_encode( $payment_data ),
					'timeout' => 30,
				)
			);

			if ( is_wp_error( $response ) ) {
				throw new NovaBankaIPGException( $response->get_error_message() );
			}

			// 4. Process response
			$result = $this->process_api_response( $response, $order );

			return array(
				'result'   => 'success',
				'redirect' => $result['browserRedirectionURL'],
			);

		} catch ( Exception $e ) {
			$this->logger->error(
				'Payment process failed.',
				array(
					'order_id' => $order_id,
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( $e->getMessage() );
		}
	}

	/**
	 * Process a refund for an order.
	 *
	 * @param WC_Order $order  The order to refund.
	 * @param float    $amount The amount to refund.
	 * @param string   $reason The reason for the refund.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the refund fails.
	 */
	public function process_refund( WC_Order $order, float $amount, string $reason = '' ): array {
		try {
			// Prepare refund data.
			$refund_data = array(
				'order_id'   => $order->get_id(),
				'amount'     => $amount,
				'reason'     => $reason,
				'payment_id' => $order->get_meta( '_novabankaipg_payment_id' ),
			);

			// Allow plugins to modify refund data.
			$refund_data = apply_filters( 'novabankaipg_before_refund_process', $refund_data, $order );

			// Validate required fields.
			SharedUtilities::validate_required_fields(
				$refund_data,
				array( 'order_id', 'amount', 'payment_id' )
			);

			// Send refund request.
			$response = $this->api_handler->send_refund_request( $refund_data );

			/**
			 * Action after refund processing.
			 *
			 * @since 1.0.1
			 * @param array    $response    The API response.
			 * @param WC_Order $order       The order being refunded.
			 * @param float    $amount      The refund amount.
			 * @param string   $reason      The refund reason.
			 */
			do_action( 'novabankaipg_after_refund_process', $response, $order, $amount, $reason );

			// Update order notes.
			$order->add_order_note(
				sprintf(
					/* translators: %1$s: amount, %2$s: reason */
					esc_html__( 'Refund processed successfully. Amount: %1$s, Reason: %2$s', 'novabanka-ipg-gateway' ),
					wc_price( $amount ),
					$reason
				)
			);

			return $response;

		} catch ( Exception $e ) {
			$this->logger->error(
				'Refund failed: ' . esc_html( $e->getMessage() ),
				array(
					'order_id' => $order->get_id(),
					'amount'   => $amount,
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Initialize payment for an order.
	 *
	 * @param WC_Order $order        The order to process payment for.
	 * @param array    $payment_data Additional payment data.
	 * @return array Payment initialization response.
	 * @throws NovaBankaIPGException When payment initialization fails.
	 */
	public function initialize_payment( WC_Order $order, array $payment_data ): array {
		try {
			// Merge payment data with prepared data.
			$init_data = array_merge(
				$this->prepare_payment_init_data( $order ),
				$payment_data
			);

			/**
			 * Filter payment data before processing.
			 *
			 * @since 1.0.1
			 * @param array    $init_data The payment initialization data.
			 * @param WC_Order $order     The order being processed.
			 */
			$init_data = apply_filters( 'novabankaipg_payment_init_data', $init_data, $order );

			/**
			 * Action before payment initialization.
			 *
			 * @since 1.0.1
			 * @param array    $init_data The payment initialization data.
			 * @param WC_Order $order     The order being processed.
			 */
			do_action( 'novabankaipg_before_payment_init', $init_data, $order );

			// Use the existing send_payment_init_request method.
			return $this->api_handler->send_payment_init_request( $init_data );

		} catch ( Exception $e ) {
			throw new NovaBankaIPGException( $e->getMessage() );
		}
	}

	/**
	 * Prepare payment initialization data.
	 *
	 * @param WC_Order $order The order being processed.
	 * @return array Prepared payment data.
	 */
	private function prepare_payment_init_data( WC_Order $order ): array {
		// Get the numeric currency code and convert it to ISO 4217 alpha code.
		$currency = $this->convert_currency_to_iso( $order->get_currency() );

		$init_data = array(
			'msgName'     => 'PaymentInitRequest',
			'version'     => '1',
			'amount'      => number_format( $order->get_total(), 2, '.', '' ),
			'currency'    => $currency,
			'trackid'     => $order->get_order_key(),
			'order_id'    => $order->get_id(),
			'responseURL' => $this->get_response_url( $order ),
			'errorURL'    => $this->get_error_url( $order ),
			'langid'      => $this->get_language_code(),
			'email'       => $order->get_billing_email(),
			'udf1'        => $order->get_id(),
			'udf2'        => 'novabankaipg',
			'udf3'        => wp_json_encode( $this->get_order_items( $order ) ),
		);

		return $init_data;
	}

	/**
	 * Convert numeric currency code to ISO 4217 alpha code.
	 *
	 * @param string $currency Currency code.
	 * @return string ISO 4217 alpha code.
	 * @throws NovaBankaIPGException If currency is not supported.
	 */
	private function convert_currency_to_iso( string $currency ): string {
		$currency_map = array(
			'977' => 'BAM',  // Bosnia and Herzegovina Convertible Mark.
			'978' => 'EUR',  // Euro.
			'840' => 'USD',  // US Dollar.
			// Add other currencies as needed.
		);

		if ( isset( $currency_map[ $currency ] ) ) {
			return $currency_map[ $currency ];
		}

		// If we received an ISO code already, verify it's supported.
		$supported_currencies = array_values( $currency_map );
		if ( in_array( $currency, $supported_currencies, true ) ) {
			return $currency;
		}

		throw new NovaBankaIPGException(
			sprintf( 'Unsupported currency: %s', $currency )
		);
	}

	/**
	 * Get response URL for successful payments.
	 *
	 * @param WC_Order $order The order being processed.
	 * @return string Response URL.
	 */
	private function get_response_url( WC_Order $order ): string {
		return add_query_arg(
			array(
				'wc-api' => 'novabankaipg',
				'order'  => $order->get_id(),
			),
			home_url( '/' )
		);
	}

	/**
	 * Get error URL for failed payments.
	 *
	 * @param WC_Order $order The order being processed.
	 * @return string Error URL.
	 */
	private function get_error_url( WC_Order $order ): string {
		return add_query_arg(
			array(
				'wc-api' => 'novabankaipg-error',
				'order'  => $order->get_id(),
			),
			home_url( '/' )
		);
	}

	/**
	 * Get language code for IPG interface.
	 *
	 * @return string Language code.
	 */
	private function get_language_code(): string {
		$locale = get_locale();
		$lang   = substr( $locale, 0, 2 );
		return strtoupper( $lang );
	}

	/**
	 * Get order items for transaction reference.
	 *
	 * @param WC_Order $order The order being processed.
	 * @return array Order items data.
	 */
	private function get_order_items( WC_Order $order ): array {
		$items = array();
		foreach ( $order->get_items() as $item ) {
			$items[] = array(
				'name'     => $item->get_name(),
				'quantity' => $item->get_quantity(),
				'total'    => $item->get_total(),
			);
		}
		return $items;
	}
}
</file>

<file path="includes/Utils/class-apihandler.php">
<?php
/**
 * APIHandler Utility Class
 *
 * Handles HTTP communication with the NovaBanka IPG API according to integration guide.
 * Manages request/response formatting, message verification, and error handling.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WP_Error;

/**
 * Handles raw HTTP communication with the IPG API.
 */
class APIHandler {
	/**
	 * API endpoint URL.
	 *
	 * @var string
	 */
	private $api_endpoint;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor.
	 *
	 * @param string $api_endpoint      API endpoint URL.
	 * @param Logger $logger            Logger instance.
	 */
	public function __construct(
		string $api_endpoint,
		Logger $logger
	) {
		$this->api_endpoint = $api_endpoint;
		$this->logger       = $logger;
	}

	/**
	 * Send a POST request to the IPG API.
	 *
	 * @param string $endpoint API endpoint path
	 * @param array  $data Request data
	 * @return array Response data
	 * @throws NovaBankaIPGException
	 */
	public function post( string $endpoint, array $data ): array {
		$url = rtrim( $this->api_endpoint, '/' ) . '/' . ltrim( $endpoint, '/' );

		$this->logger->debug(
			'Sending API request',
			array(
				'url'  => $url,
				'data' => $this->redact_sensitive_data( $data ),
			)
		);

		$response = wp_remote_post(
			$url,
			array(
				'headers'   => array(
					'Content-Type' => 'application/json',
					'Accept'       => 'application/json',
				),
				'body'      => wp_json_encode( $data ),
				'timeout'   => 30,
				'sslverify' => true,
			)
		);

		if ( is_wp_error( $response ) ) {
			throw new NovaBankaIPGException( $response->get_error_message() );
		}

		return $this->handle_response( $response );
	}

	/**
	 * Process API response.
	 *
	 * @param array $response WordPress HTTP API response
	 * @return array Decoded response data
	 * @throws NovaBankaIPGException
	 */
	private function handle_response( array $response ): array {
		$response_code = wp_remote_retrieve_response_code( $response );
		$response_body = wp_remote_retrieve_body( $response );

		$this->logger->debug(
			'API response received',
			array(
				'code' => $response_code,
				'body' => $response_body,
			)
		);

		$decoded_body = json_decode( $response_body, true );
		if ( json_last_error() !== JSON_ERROR_NONE ) {
			throw new NovaBankaIPGException(
				sprintf(
					'Invalid JSON response (code %d): %s',
					$response_code,
					wp_strip_all_tags( $response_body )
				)
			);
		}

		if ( $response_code < 200 || $response_code >= 300 || ! is_array( $decoded_body ) ) {
			throw new NovaBankaIPGException(
				sprintf(
					'API request failed with code %d: %s',
					$response_code,
					wp_json_encode( $decoded_body ) ?: $response_body
				)
			);
		}

		return $decoded_body;
	}

	/**
	 * Redact sensitive data for logging.
	 *
	 * @param array $data Data to redact
	 * @return array Redacted data
	 */
	private function redact_sensitive_data( array $data ): array {
		$sensitive_fields = array( 'password', 'terminal_password', 'secret_key' );
		foreach ( $sensitive_fields as $field ) {
			if ( isset( $data[ $field ] ) ) {
				$data[ $field ] = '***REDACTED***';
			}
		}
		return $data;
	}
}
</file>

<file path="includes/Utils/class-config.php">
<?php
/**
 * Config Class
 *
 * Manages configuration settings for the NovaBanka IPG plugin.
 * Provides methods for retrieving and updating plugin settings.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

if (!defined('ABSPATH')) {
    exit;
}

/**
 * Class Config
 *
 * Handles configuration management for the NovaBanka IPG plugin.
 */
class Config {
	/**
	 * Option prefix for all plugin settings.
	 *
	 * @var string
	 */
	private const OPTION_PREFIX = 'wc_novabankaipg_';

	/**
	 * Default settings.
	 *
	 * @var array
	 */
	private const DEFAULT_SETTINGS = array(
		'enabled'             => 'no',
		'test_mode'          => 'yes',
		'debug'              => 'no',
		'title'              => 'NovaBanka IPG',
		'description'        => 'Pay securely using NovaBanka IPG.',
		
		// Test mode settings
		'test_api_endpoint'  => 'https://ipgtest.novabanka.com/IPGWeb/servlet/PaymentInitRequest',
		'test_terminal_id'   => '',
		'test_terminal_password' => '',
		'test_secret_key'    => '',
		
		// Production mode settings
		'live_api_endpoint'  => 'https://ipg.novabanka.com/IPGWeb/servlet/PaymentInitRequest',
		'live_terminal_id'   => '',
		'live_terminal_password' => '',
		'live_secret_key'    => '',
		
		// Action settings
		'action'             => '1', // 1 = PURCHASE, 4 = AUTHORIZATION
		
		// Response URLs
		'response_url'       => '',  // Will be dynamically set
		'error_url'         => '',   // Will be dynamically set
		
		// Language settings
		'langid'            => 'EN',
		
		// 3DS settings
		'threeds_enabled'    => 'yes',
		'threeds_auth_method' => '02',
		'threeds_prior_auth' => '01',
	);

	/**
	 * Retrieve a setting value by key.
	 *
	 * @param string $key     The setting key to retrieve.
	 * @param mixed  $default Default value if setting not found.
	 * @return mixed The setting value or default if not found.
	 */
	public static function get_setting( string $key, $default = null ) {
		$key   = sanitize_key( $key );
		$value = get_option( self::OPTION_PREFIX . $key, $default );

		/**
		 * Filter the retrieved setting value.
		 *
		 * @since 1.0.1
		 * @param mixed  $value   The setting value.
		 * @param string $key     The setting key.
		 * @param mixed  $default The default value.
		 */
		return apply_filters( 'novabankaipg_get_setting', $value, $key, $default );
	}

	/**
	 * Retrieve all plugin settings.
	 *
	 * @return array All settings as an associative array.
	 */
	public static function get_all_settings(): array {
		$settings = get_option( 'woocommerce_novabankaipg_settings', self::DEFAULT_SETTINGS );

		/**
		 * Filter all plugin settings.
		 *
		 * @since 1.0.1
		 * @param array $settings The settings array.
		 */
		return apply_filters( 'novabankaipg_all_settings', $settings );
	}

	/**
	 * Update a specific plugin setting.
	 *
	 * @param string $key   The setting key to update.
	 * @param mixed  $value The new value for the setting.
	 * @return bool True on success, false on failure.
	 */
	public static function update_setting( string $key, $value ): bool {
		$key      = sanitize_key( $key );
		$settings = self::get_all_settings();

		/**
		 * Filter the value before saving.
		 *
		 * @since 1.0.1
		 * @param mixed  $value    The setting value to save.
		 * @param string $key      The setting key.
		 * @param array  $settings Current settings.
		 */
		$value = apply_filters( 'novabankaipg_pre_update_setting', $value, $key, $settings );

		$settings[ $key ] = $value;
		return update_option( 'woocommerce_novabankaipg_settings', $settings );
	}

	/**
	 * Determine if the plugin is in test mode.
	 *
	 * @return bool True if test mode is enabled, false otherwise.
	 */
	public static function is_test_mode(): bool {
		$test_mode = self::get_setting( 'test_mode', 'yes' ) === 'yes';

		/**
		 * Filter test mode status.
		 *
		 * @since 1.0.1
		 * @param bool $test_mode Whether test mode is enabled.
		 */
		return apply_filters( 'novabankaipg_is_test_mode', $test_mode );
	}

	/**
	 * Determine if debug logging is enabled.
	 *
	 * @return bool True if debug logging is enabled, false otherwise.
	 */
	public static function is_debug_mode(): bool {
		$debug_mode = self::get_setting( 'debug', 'no' ) === 'yes';

		/**
		 * Filter debug mode status.
		 *
		 * @since 1.0.1
		 * @param bool $debug_mode Whether debug mode is enabled.
		 */
		return apply_filters( 'novabankaipg_is_debug_mode', $debug_mode );
	}

	/**
	 * Get API endpoint URL based on mode.
	 *
	 * @return string API endpoint URL.
	 */
	public static function get_api_endpoint(): string {
		$is_test  = self::is_test_mode();
		$endpoint = $is_test ?
			self::get_setting( 'test_api_endpoint' ) :
			self::get_setting( 'live_api_endpoint' ); // Changed from 'api_endpoint'.

		/**
		 * Filter API endpoint URL.
		 *
		 * @since 1.0.1
		 * @param string $endpoint The API endpoint URL.
		 * @param bool   $is_test  Whether test mode is enabled.
		 */
		return apply_filters( 'novabankaipg_api_endpoint', $endpoint, $is_test );
	}

	/**
	 * Get 3DS configuration.
	 *
	 * @return array 3DS configuration settings.
	 */
	public static function get_threeds_config(): array {
		$config = array(
			'enabled'     => self::get_setting( 'threeds_enabled', 'yes' ) === 'yes',
			'auth_method' => self::get_setting( 'threeds_auth_method', '02' ),
			'prior_auth'  => self::get_setting( 'threeds_prior_auth', '01' ),
		);

		/**
		 * Filter 3DS configuration.
		 *
		 * @since 1.0.1
		 * @param array $config The 3DS configuration array.
		 */
		return apply_filters( 'novabankaipg_threeds_config', $config );
	}

	/**
	 * Delete all plugin settings.
	 *
	 * @return bool True on success, false on failure.
	 */
	public static function delete_all_settings(): bool {
		/**
		 * Action before deleting all settings.
		 *
		 * @since 1.0.1
		 */
		do_action( 'novabankaipg_before_delete_settings' );

		$result = delete_option( 'woocommerce_novabankaipg_settings' );

		/**
		 * Action after deleting all settings.
		 *
		 * @since 1.0.1
		 * @param bool $result Whether the deletion was successful.
		 */
		do_action( 'novabankaipg_after_delete_settings', $result );

		return $result;
	}

	/**
	 * Validate required settings.
	 *
	 * @return bool True if all required settings are valid.
	 */
	public static function validate_settings(): bool {
		$required = array(
			'terminal_id',
			'terminal_password',
			'secret_key',
			'api_endpoint',
		);

		foreach ( $required as $key ) {
			if ( empty( self::get_setting( $key ) ) ) {
				return false;
			}
		}

		return true;
	}

	public static function get_form_fields(): array {
		return array(
			'enabled' => array(
				'title'   => __('Enable/Disable', 'novabanka-ipg-gateway'),
				'type'    => 'checkbox',
				'label'   => __('Enable NovaBanka IPG Gateway', 'novabanka-ipg-gateway'),
				'default' => self::DEFAULT_SETTINGS['enabled']
			),
			// Test Mode
			'test_mode' => array(
				'title'       => __('Test Mode', 'novabanka-ipg-gateway'),
				'type'        => 'checkbox',
				'label'       => __('Enable Test Mode', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['test_mode'],
				'description' => __('Place the payment gateway in test mode.', 'novabanka-ipg-gateway')
			),
			// Test Credentials
			'test_terminal_id' => array(
				'title'       => __('Test Terminal ID', 'novabanka-ipg-gateway'),
				'type'        => 'text',
				'description' => __('Your test terminal ID from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['test_terminal_id'],
				'desc_tip'    => true
			),
			'test_terminal_password' => array(
				'title'       => __('Test Terminal Password', 'novabanka-ipg-gateway'),
				'type'        => 'password',
				'description' => __('Your test terminal password from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['test_terminal_password'],
				'desc_tip'    => true
			),
			'test_secret_key' => array(
				'title'       => __('Test Secret Key', 'novabanka-ipg-gateway'),
				'type'        => 'password',
				'description' => __('Your test secret key from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['test_secret_key'],
				'desc_tip'    => true
			),
			// Live Credentials
			'live_terminal_id' => array(
				'title'       => __('Live Terminal ID', 'novabanka-ipg-gateway'),
				'type'        => 'text',
				'description' => __('Your live terminal ID from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['live_terminal_id'],
				'desc_tip'    => true
			),
			'live_terminal_password' => array(
				'title'       => __('Live Terminal Password', 'novabanka-ipg-gateway'),
				'type'        => 'password',
				'description' => __('Your live terminal password from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['live_terminal_password'],
				'desc_tip'    => true
			),
			'live_secret_key' => array(
				'title'       => __('Live Secret Key', 'novabanka-ipg-gateway'),
				'type'        => 'password',
				'description' => __('Your live secret key from NovaBanka.', 'novabanka-ipg-gateway'),
				'default'     => self::DEFAULT_SETTINGS['live_secret_key'],
				'desc_tip'    => true
			),
		);
	}
}
</file>

<file path="includes/Utils/class-datahandler.php">
<?php
/**
 * DataHandler Utility Class
 *
 * This class is responsible for handling various data formatting and validation processes,
 * such as formatting payment amounts, phone numbers, item quantities, and validating language codes.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;

/**
 * DataHandler Class
 *
 * Handles data formatting and validation for the NovaBanka IPG plugin.
 */
class DataHandler {
	/**
	 * Currency codes mapping as per IPG specs.
	 *
	 * @var array
	 */
	protected const CURRENCY_CODES = array(
		'EUR' => '978',
		'USD' => '840',
		'GBP' => '826',
		'BAM' => '977',
	);

	/**
	 * Maximum field lengths as per IPG specs.
	 *
	 * @var array
	 */
	protected const FIELD_LENGTHS = array(
		'phone'    => 20,
		'email'    => 255,
		'amount'   => 10,  // Plus 2 decimals.
		'name'     => 50,
		'address1' => 100,
		'address2' => 100,
		'address3' => 40,
		'city'     => 40,
		'zip'      => 20,
	);

	/**
	 * Required fields for API requests.
	 *
	 * @var array
	 */
	protected const REQUIRED_FIELDS = array(
		'amount',
		'currency',
		'order_id',
	);

	/**
	 * Format the payment amount to the required decimal places.
	 *
	 * @param float $amount Amount to format.
	 * @return string Formatted amount.
	 * @throws NovaBankaIPGException If amount is invalid or exceeds maximum.
	 */
	public function format_amount( float $amount ): string {
		// Allow plugins to modify amount before formatting.
		$amount = apply_filters( 'novabankaipg_before_format_amount', $amount );

		// Remove any existing formatting.
		$amount_str = str_replace( array( ',', ' ' ), '', (string) $amount );

		if ( ! is_numeric( $amount_str ) ) {
			throw new NovaBankaIPGException(
				esc_html__( 'Invalid amount format.', 'novabanka-ipg-gateway' )
			);
		}

		$amount_float = (float) $amount_str;

		if ( $amount_float > 9999999999.99 ) {
			throw new NovaBankaIPGException(
				esc_html__( 'Amount exceeds maximum allowed value.', 'novabanka-ipg-gateway' )
			);
		}

		$formatted_amount = number_format( $amount_float, 2, '.', '' );

		return (string) apply_filters( 'novabankaipg_formatted_amount', $formatted_amount, $amount );
	}

	/**
	 * Format a phone number to the expected format for API communication.
	 *
	 * @param string $phone The phone number to format.
	 * @return string|null Formatted phone number or null if empty.
	 */
	public function format_phone( string $phone ): ?string {
		if ( empty( $phone ) ) {
			return null;
		}

		// Allow plugins to modify phone before formatting.
		$phone = apply_filters( 'novabankaipg_before_format_phone', $phone );

		// Remove everything except numbers and +.
		$formatted = preg_replace( '/[^0-9+]/', '', $phone );

		// Ensure + is only at the start.
		$formatted = preg_replace( '/(?!^)\+/', '', $formatted );

		// Truncate to max length.
		$formatted = substr( $formatted, 0, self::FIELD_LENGTHS['phone'] );

		return apply_filters( 'novabankaipg_formatted_phone', $formatted, $phone );
	}

	/**
	 * Format email according to IPG specifications.
	 *
	 * @param string $email Email address to format.
	 * @return string|null Formatted email or null if invalid.
	 */
	public function format_email( string $email ): ?string {
		// Allow plugins to modify email before formatting.
		$email = apply_filters( 'novabankaipg_before_format_email', $email );

		$email = sanitize_email( $email );

		if ( ! is_email( $email ) ) {
			return null;
		}

		$formatted = substr( $email, 0, self::FIELD_LENGTHS['email'] );

		return apply_filters( 'novabankaipg_formatted_email', $formatted, $email );
	}

	/**
	 * Get currency code based on the currency name.
	 *
	 * @param string $currency Currency name (e.g., 'EUR', 'USD').
	 * @return string|null Currency code or null if not found.
	 * @throws NovaBankaIPGException If currency is not supported.
	 */
	public function get_currency_code( string $currency ): ?string {
		$currency = strtoupper( $currency );
		$code     = self::CURRENCY_CODES[ $currency ] ?? null;

		if ( null === $code ) {
			throw new NovaBankaIPGException(
				sprintf(
					/* translators: %s: currency code */
					esc_html__( 'Unsupported currency: %s', 'novabanka-ipg-gateway' ),
					$currency
				)
			);
		}

		return apply_filters( 'novabankaipg_currency_code', $code, $currency );
	}

	/**
	 * Format an item amount by multiplying the amount by quantity.
	 *
	 * @param float $amount   The base amount to format.
	 * @param int   $quantity The quantity to multiply by.
	 * @return string The formatted total amount.
	 */
	public function format_item_amount( float $amount, int $quantity = 1 ): string {
		$total = $amount * $quantity;
		$total = apply_filters( 'novabankaipg_before_format_item_amount', $total, $amount, $quantity );

		return $this->format_amount( $total );
	}

	/**
	 * Validates a language code to ensure it matches IPG specifications.
	 *
	 * @param string $lang_code The language code to validate.
	 * @return string The validated language code or 'EN' if invalid.
	 */
	public function validate_language_code( string $lang_code ): string {
		$lang_code = strtoupper( $lang_code );
		$lang_code = apply_filters( 'novabankaipg_before_validate_language', $lang_code );

		if ( preg_match( '/^[A-Z]{2,3}$/', $lang_code ) ) {
			return $lang_code;
		}

		return apply_filters( 'novabankaipg_default_language', 'EN' );
	}

	/**
	 * Validate and sanitize order data.
	 *
	 * @param array $data Order data to validate.
	 * @return array Sanitized order data.
	 * @throws NovaBankaIPGException If required fields are missing.
	 */
	public function validate_order_data( array $data ): array {
		$data = apply_filters( 'novabankaipg_before_validate_order', $data );

		// Check required fields.
		foreach ( self::REQUIRED_FIELDS as $field ) {
			if ( empty( $data[ $field ] ) ) {
				throw new NovaBankaIPGException(
					sprintf(
						/* translators: %s: field name */
						esc_html__( 'Required field missing: %s', 'novabanka-ipg-gateway' ),
						$field
					)
				);
			}
		}

		// Sanitize data.
		$sanitized = array_map(
			function ( $value ) {
				return sanitize_text_field( $value );
			},
			array_filter( $data )
		);

		return apply_filters( 'novabankaipg_validated_order_data', $sanitized, $data );
	}

	/**
	 * Prepare data for API request.
	 *
	 * @param array $data Request data to prepare.
	 * @return array Prepared API request data.
	 */
	public function prepare_api_request( array $data ): array {
		$data = apply_filters( 'novabankaipg_before_prepare_request', $data );

		$prepared = array_merge(
			$this->get_required_fields(),
			$this->validate_order_data( $data )
		);

		return apply_filters( 'novabankaipg_prepared_request', $prepared, $data );
	}

	/**
	 * Get required fields for API requests.
	 *
	 * @return array Required fields.
	 */
	private function get_required_fields(): array {
		$fields = array_fill_keys( self::REQUIRED_FIELDS, '' );
		return apply_filters( 'novabankaipg_required_fields', $fields );
	}
}
</file>

<file path="includes/Utils/class-logger.php">
<?php
/**
 * Logger Utility Class
 *
 * Handles logging operations for the NovaBanka IPG plugin using WooCommerce's logging system.
 * Provides methods for different log levels and handles sensitive data redaction.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use WC_Logger;

/**
 * Logger Class
 *
 * Handles logging operations for the NovaBanka IPG plugin.
 */
class Logger {
	/**
	 * WooCommerce Logger instance.
	 *
	 * @var WC_Logger
	 */
	private $wc_logger;

	/**
	 * Source identifier for log entries.
	 *
	 * @var string
	 */
	private const LOG_SOURCE = 'novabanka-ipg';

	/**
	 * Keys that should be redacted in logs for security.
	 *
	 * @var array
	 */
	private const SENSITIVE_KEYS = array(
		'password',
		'terminal_password',
		'secret_key',
		'card_number',
		'cvv',
		'pan',
		'token',
		'auth_code',
		'msgVerifier',
	);

	/**
	 * Constructor.
	 */
	public function __construct() {
		$this->wc_logger = wc_get_logger();
	}

	/**
	 * Log debug message.
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context data.
	 */
	public function debug( string $message, array $context = array() ): void {
		if ( ! Config::is_debug_mode() ) {
			return;
		}

		/**
		 * Filter debug message before logging.
		 *
		 * @since 1.0.1
		 * @param string $message The message to log.
		 * @param array  $context The context data.
		 */
		$message = apply_filters( 'novabankaipg_debug_message', $message, $context );

		$this->log( 'debug', $message, $context );
	}

	/**
	 * Log info message.
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context data.
	 */
	public function info( string $message, array $context = array() ): void {
		/**
		 * Filter info message before logging.
		 *
		 * @since 1.0.1
		 * @param string $message The message to log.
		 * @param array  $context The context data.
		 */
		$message = apply_filters( 'novabankaipg_info_message', $message, $context );

		$this->log( 'info', $message, $context );
	}

	/**
	 * Log error message.
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context data.
	 */
	public function error( string $message, array $context = array() ): void {
		/**
		 * Filter error message before logging.
		 *
		 * @since 1.0.1
		 * @param string $message The message to log.
		 * @param array  $context The context data.
		 */
		$message = apply_filters( 'novabankaipg_error_message', $message, $context );

		$this->log( 'error', $message, $context );

		/**
		 * Action after logging an error.
		 *
		 * @since 1.0.1
		 * @param string $message The logged message.
		 * @param array  $context The context data.
		 */
		do_action( 'novabankaipg_after_error_log', $message, $context );
	}

	/**
	 * Log warning message.
	 *
	 * @param string $message Message to log.
	 * @param array  $context Additional context data.
	 */
	public function warning( string $message, array $context = array() ): void {
		/**
		 * Filter warning message before logging.
		 *
		 * @since 1.0.1
		 * @param string $message The message to log.
		 * @param array  $context The context data.
		 */
		$message = apply_filters( 'novabankaipg_warning_message', $message, $context );

		$this->log( 'warning', $message, $context );
	}

	/**
	 * Internal logging method.
	 *
	 * @param string $level   Log level.
	 * @param string $message Message to log.
	 * @param array  $context Additional context data.
	 */
	private function log( string $level, string $message, array $context = array() ): void {
		if ( ! $this->wc_logger ) {
			return;
		}

		// Sanitize and validate data.
		$message = sanitize_text_field( $message );
		$context = $this->sanitize_context( $context );

		// Format the log entry.
		$log_entry = $this->format_message( $message, $context );

		/**
		 * Filter log entry before writing.
		 *
		 * @since 1.0.1
		 * @param string $log_entry The formatted log entry.
		 * @param string $level     The log level.
		 * @param string $message   The original message.
		 * @param array  $context   The context data.
		 */
		$log_entry = apply_filters( 'novabankaipg_log_entry', $log_entry, $level, $message, $context );

		// Write to log.
		$this->wc_logger->{$level}(
			$log_entry,
			array(
				'source' => self::LOG_SOURCE,
			)
		);

		/**
		 * Action after writing to log.
		 *
		 * @since 1.0.1
		 * @param string $level     The log level.
		 * @param string $message   The original message.
		 * @param array  $context   The context data.
		 * @param string $log_entry The formatted log entry.
		 */
		do_action( 'novabankaipg_after_log', $level, $message, $context, $log_entry );
	}

	/**
	 * Format log message with context.
	 *
	 * @param string $message Message to format.
	 * @param array  $context Context data.
	 * @return string Formatted message.
	 */
	private function format_message( string $message, array $context ): string {
		$context_string = empty( $context ) ? '' : ' | Context: ' . wp_json_encode( $context );

		return sprintf(
			'[%s] %s%s',
			wp_date( 'Y-m-d H:i:s' ),
			$message,
			$context_string
		);
	}

	/**
	 * Sanitize context data by redacting sensitive information.
	 *
	 * @param array $context Context data to sanitize.
	 * @return array Sanitized context data.
	 */
	private function sanitize_context( array $context ): array {
		array_walk_recursive(
			$context,
			function ( &$value, $key ) {
				if ( $this->should_redact_key( $key ) ) {
					$value = str_repeat( '*', 8 );
				} elseif ( is_string( $value ) ) {
					$value = sanitize_text_field( $value );
				}
			}
		);

		return $context;
	}

	/**
	 * Check if a key should be redacted.
	 *
	 * @param string $key Key to check.
	 * @return bool True if key should be redacted.
	 */
	private function should_redact_key( string $key ): bool {
		$key = strtolower( $key );
		foreach ( self::SENSITIVE_KEYS as $sensitive_key ) {
			if ( false !== strpos( $key, $sensitive_key ) ) {
				return true;
			}
		}
		return false;
	}
}
</file>

<file path="includes/Utils/class-messagehandler.php">
<?php
/**
 * Message Handler Class
 *
 * Handles message construction, verification, and processing for IPG integration.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use Exception;

/**
 * Class MessageHandler
 *
 * Handles message construction, verification, and processing for IPG integration.
 */
class MessageHandler {
	/**
	 * Secret key for message verification.
	 *
	 * @var string
	 */
	private $secret_key;

	/**
	 * Data handler instance.
	 *
	 * @var DataHandler
	 */
	private $data_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Terminal ID.
	 *
	 * @var string
	 */
	private $terminal_id;

	/**
	 * Terminal password.
	 *
	 * @var string
	 */
	private $terminal_password;

	/**
	 * Constructor.
	 *
	 * @param string      $terminal_id       Terminal ID.
	 * @param string      $terminal_password Terminal password.
	 * @param string      $secret_key        Secret key for message verification.
	 * @param DataHandler $data_handler      Data handler instance.
	 * @param Logger      $logger            Logger instance.
	 */
	public function __construct(
		string $terminal_id,
		string $terminal_password,
		string $secret_key,
		DataHandler $data_handler,
		Logger $logger
	) {
		$this->terminal_id       = $terminal_id;
		$this->terminal_password = $terminal_password;
		$this->secret_key        = $secret_key;
		$this->data_handler      = $data_handler;
		$this->logger            = $logger;
	}

	/**
	 * Generate PaymentInit request message.
	 *
	 * @param array $data Payment data.
	 * @return array Prepared request message.
	 * @throws NovaBankaIPGException When message generation fails.
	 */
	public function generate_payment_init_request( array $data ): array {
		try {
			// Allow plugins to modify request data.
			$data = apply_filters( 'novabankaipg_payment_init_data', $data );

			// Validate required fields.
			$required_fields = array(
				'id',
				'password',
				'amount',
				'currency',
				'trackid',
				'responseURL',
				'errorURL',
				'langid',
			);

			foreach ( $required_fields as $field ) {
				if ( empty( $data[ $field ] ) ) {
					throw new NovaBankaIPGException(
						sprintf(
							/* translators: %s: field name */
							esc_html__( 'Required field missing: %s', 'novabanka-ipg-gateway' ),
							$field
						)
					);
				}
			}

			$request = $this->prepare_payment_init_request( $data );

			$this->logger->debug( 'Generated PaymentInit request.', array( 'request' => $request ) );

			return $request;

		} catch ( Exception $e ) {
			$this->logger->error(
				'Failed to generate PaymentInit request.',
				array(
					'error' => esc_html( $e->getMessage() ),
					'data'  => wp_json_encode( $data ),
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Generate notification response.
	 *
	 * @param array  $notification Notification data from IPG.
	 * @param string $redirect_url URL for browser redirection.
	 * @return array Response data.
	 * @throws NovaBankaIPGException When response generation fails.
	 */
	public function generate_notification_response( array $notification, string $redirect_url ): array {
		try {
			if ( empty( $notification['paymentid'] ) ) {
				throw new NovaBankaIPGException( esc_html__( 'Payment ID missing in notification.', 'novabanka-ipg-gateway' ) );
			}

			$response = array(
				'msgName'               => 'PaymentNotificationResponse',
				'version'               => '1',
				'paymentID'             => $notification['paymentid'],
				'browserRedirectionURL' => $redirect_url,
			);

			// Generate message verifier.
			$verifier_fields = array(
				$response['msgName'],
				$response['version'],
				$response['paymentID'],
				$this->secret_key,
				$response['browserRedirectionURL'],
			);

			$response['msgVerifier'] = SharedUtilities::generate_message_verifier( ...$verifier_fields );

			// Allow plugins to modify response.
			return apply_filters( 'novabankaipg_notification_response', $response, $notification );

		} catch ( Exception $e ) {
			$this->logger->error(
				'Failed to generate notification response.',
				array(
					'error'        => esc_html( $e->getMessage() ),
					'notification' => wp_json_encode( $notification ),
				)
			);
			throw new NovaBankaIPGException( esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Prepare PaymentInit request data.
	 *
	 * @param array $data Payment initialization data.
	 * @return array Prepared request data.
	 * @throws NovaBankaIPGException When data preparation fails.
	 */
	private function prepare_payment_init_request( array $data ): array {
		try {
			$this->logger->debug( 'Preparing payment init request.', array( 'raw_data' => $data ) );

			// Prepare base request.
			$request = array(
				'msgName'            => 'PaymentInitRequest',
				'version'            => '1',
				'id'                 => $data['id'],
				'password'           => $data['password'],
				'action'             => '1',
				'currencycode'       => $this->data_handler->get_currency_code( $data['currency'] ),
				'amt'                => $this->data_handler->format_amount( $data['amount'] ),
				'trackid'            => (string) $data['trackid'],
				'responseURL'        => $data['responseURL'],
				'errorURL'           => $data['errorURL'],
				'langid'             => $data['langid'],
				'notificationFormat' => 'json',
				'payinst'            => 'VPAS',
				'recurAction'        => '',
			);

			// Add optional fields.
			$optional_fields = array( 'email', 'udf1', 'udf2', 'udf3' );
			foreach ( $optional_fields as $field ) {
				if ( ! empty( $data[ $field ] ) ) {
					$request[ $field ] = $data[ $field ];
				}
			}

			// Generate message verifier.
			$verifier_fields = array(
				$request['msgName'],
				$request['version'],
				$request['id'],
				$request['password'],
				$request['amt'],
				$request['trackid'],
				$data['udf1'] ?? '',
				$this->secret_key,
				$data['udf5'] ?? '',
			);

			$request['msgVerifier'] = SharedUtilities::generate_message_verifier( ...$verifier_fields );

			return $request;

		} catch ( Exception $e ) {
			throw new NovaBankaIPGException(
				sprintf(
					/* translators: %s: error message */
					esc_html__( 'Failed to prepare payment request: %s', 'novabanka-ipg-gateway' ),
					$e->getMessage()
				)
			);
		}
	}
}
</file>

<file path="includes/Utils/class-sharedutilities.php">
<?php
/**
 * Utility Class for Shared Functions
 *
 * This class is responsible for housing shared utility functions used across various components.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Config\Config;

/**
 * SharedUtilities Class
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */
class SharedUtilities {

	/**
	 * Get the API endpoint URL based on test mode setting.
	 *
	 * @param string $path Path to append to the API endpoint URL.
	 * @return string The API endpoint URL with the appended path.
	 */
	public static function get_api_endpoint( string $path ): string {
		$base_url = Config::is_test_mode()
			? Config::get_setting( 'test_api_endpoint' )
			: Config::get_setting( 'live_api_endpoint' );

		return rtrim( $base_url, '/' ) . '/' . ltrim( $path, '/' );
	}

	/**
	 * Format amount according to IPG requirements.
	 *
	 * @param float|string $amount Amount to format.
	 * @return string Formatted amount.
	 * @throws NovaBankaIPGException If amount is invalid.
	 */
	public static function format_amount( $amount ): string {
		if ( ! is_numeric( $amount ) ) {
			throw new NovaBankaIPGException( 'Invalid amount format' );
		}
		return number_format( (float) $amount, 2, '.', '' );
	}

	/**
	 * Generate message verifier for IPG requests.
	 *
	 * Example from logs:
	 * Input: PaymentInitRequest189110001test12341.00113YXKZPOQ9RRLGPDED5D3PC5BJ.
	 * Output: Base64(SHA-256()).
	 *
	 * @param string $msg_name Message name (e.g., 'PaymentInitRequest').
	 * @param string $version Version number.
	 * @param string $terminal_id Terminal ID.
	 * @param string $password Terminal password.
	 * @param string $amount Transaction amount.
	 * @param string $trackid Order tracking ID.
	 * @param string $udf1 User defined field 1.
	 * @param string $secret_key Secret key.
	 * @param string $udf5 User defined field 5.
	 * @return string
	 */
	public static function generate_message_verifier(
		string $msg_name,
		string $version,
		string $terminal_id,
		string $password,
		string $amount,
		string $trackid,
		string $udf1 = '',
		string $secret_key = '',
		string $udf5 = ''
	): string {
		// Create message string exactly as IPG expects.
		$message = $msg_name .
					$version .
					$terminal_id .
					$password .
					self::format_amount( $amount ) . // Use our format_amount method.
					$trackid .
					$udf1 .
					$secret_key .
					$udf5;

		// Remove any whitespace.
		$message = preg_replace( '/\s+/', '', $message );

		// Debug logging matching the example format.
		Logger::debug(
			'Message Verifier Base loaded',
			array(
				'messageVerifierBase'        => $message,
				'messageVerifierBase.length' => strlen( $message ),
			)
		);

		// Generate SHA-256 hash and encode in base64.
		$hash   = hash( 'sha256', $message, true );
		$base64 = base64_encode( $hash );

		// Debug logging matching example format.
		Logger::debug(
			'REST client message verifier',
			array(
				'SHA256(messageVerifierBase)' => strtoupper( bin2hex( $hash ) ),
				'msgVerifier'                 => $base64,
			)
		);

		return $base64;
	}

	/**
	 * Validate required fields.
	 *
	 * @param array $data Data to validate.
	 * @param array $fields Required field names.
	 * @throws NovaBankaIPGException If a required field is missing.
	 */
	public static function validate_required_fields( array $data, array $fields ): void {
		foreach ( $fields as $field ) {
			if ( empty( $data[ $field ] ) ) {
				throw new NovaBankaIPGException( esc_html( "Missing required field: {$field}" ) );
			}
		}
	}

	/**
	 * Add buyer information to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data Source data.
	 */
	public static function add_buyer_information( array &$request, array $data ): void {
		$buyer_fields = array(
			'buyerFirstName'    => 50,
			'buyerLastName'     => 50,
			'buyerPhoneNumber'  => 20,
			'buyerEmailAddress' => 255,
			'buyerUserId'       => 50,
		);

		foreach ( $buyer_fields as $field => $max_length ) {
			if ( ! empty( $data[ $field ] ) ) {
				$request[ $field ] = substr( sanitize_text_field( $data[ $field ] ), 0, $max_length );
			}
		}
	}

	/**
	 * Add UDF fields to request.
	 *
	 * @param array $request Request array to modify.
	 * @param array $data Source data.
	 */
	public static function add_udf_fields( array &$request, array $data ): void {
		for ( $i = 1; $i <= 5; $i++ ) {
			$field = "udf{$i}";
			if ( isset( $data[ $field ] ) ) {
				$request[ $field ] = DataHandler::format_udf( $data[ $field ] );
			}
		}
	}

	/**
	 * Parse transaction rows from response.
	 *
	 * @param array $rows Transaction rows.
	 * @return array Processed transaction data.
	 */
	public static function parse_transaction_rows( array $rows ): array {
		$transactions = array();

		foreach ( $rows as $row ) {
			$transaction = array(
				'action'         => $row['action'],
				'transaction_id' => $row['tranid'],
				'timestamp'      => $row['msgDateTime'],
				'amount'         => $row['amt'],
				'result'         => $row['result'],
				'auth_code'      => $row['auth'] ?? null,
				'card_type'      => $row['cardtype'] ?? null,
				'response_code'  => $row['responsecode'] ?? null,
				'reference'      => $row['ref'] ?? null,
			);

			// Add UDF fields if present.
			for ( $i = 1; $i <= 5; $i++ ) {
				$udf = "udf{$i}";
				if ( ! empty( $row[ $udf ] ) ) {
					$transaction['udf'][ $udf ] = $row[ $udf ];
				}
			}

			$transactions[] = $transaction;
		}

		return $transactions;
	}

	/**
	 * Get human-readable status description.
	 *
	 * @param string $status Status code from response.
	 * @return string
	 */
	public static function get_status_description( string $status ): string {
		$statuses = array(
			'INITIALIZED' => 'Payment initialized but not yet displayed to customer',
			'PRESENTED'   => 'Payment page presented but process not completed',
			'PROCESSED'   => 'Payment has been processed completely',
			'TIMEOUT'     => 'Payment expired due to timeout',
		);

		return $statuses[ $status ] ?? $status;
	}
}
</file>

<file path="includes/Utils/class-threedshandler.php">
<?php
/**
 * ThreeDSHandler Class
 *
 * This class is responsible for handling 3D Secure (3DS) authentication for NovaBanka IPG.
 * It manages the process of initiating and verifying 3D Secure authentication during payments.
 *
 * @package NovaBankaIPG\Services
 * @since 1.0.1
 */

namespace NovaBankaIPG\Utils;

use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Exceptions\NovaBankaIPGException;
use WC_Order;
use Exception;

/**
 * Class ThreeDSHandler
 *
 * Handles 3D Secure (3DS) authentication flow for NovaBanka IPG payments.
 * Manages initiation and verification of 3DS authentication process.
 *
 * @package NovaBankaIPG\Utils
 * @since 1.0.1
 */
class ThreeDSHandler {

	/**
	 * API Handler instance.
	 *
	 * @var APIHandler
	 */
	private $api_handler;

	/**
	 * Logger instance.
	 *
	 * @var Logger
	 */
	private $logger;

	/**
	 * Constructor for the ThreeDSHandler class.
	 *
	 * @param APIHandler $api_handler API handler instance.
	 * @param Logger     $logger      Logger instance.
	 */
	public function __construct( APIHandler $api_handler, Logger $logger ) {
		$this->api_handler = $api_handler;
		$this->logger      = $logger;
	}

	/**
	 * Initiate 3D Secure authentication.
	 *
	 * @param WC_Order $order The order to initiate 3D Secure for.
	 * @param array    $auth_data The authentication data to be sent to IPG.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the 3D Secure initiation fails.
	 */
	public function initiate_3ds( WC_Order $order, array $auth_data ): array {
		try {
			// Prepare the 3DS request data.
			$auth_data = $this->prepare_auth_data( $order, $auth_data );

			// Log the initiation request if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Initiating 3D Secure authentication', array( 'auth_data' => $auth_data ) );
			}

			// Send the 3DS initiation request to the IPG.
			$response = $this->api_handler->send_3ds_initiation( $auth_data );

			// Handle the response from IPG.
			if ( 'PENDING_AUTH' !== $response['status'] ) {
				throw NovaBankaIPGException::threeDSInitiationFailed( '3D Secure initiation failed.', $response );
			}
			$this->logger->info(
				'3D Secure initiation successful.',
				array(
					'order_id' => $order->get_id(),
					'response' => $response,
				)
			);
			return $response;
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'3D Secure initiation failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'3D Secure initiation failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( '3D Secure initiation failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Verify 3D Secure authentication.
	 *
	 * @param WC_Order $order The order to verify 3D Secure for.
	 * @param array    $verification_data The verification data returned from IPG.
	 * @return array The response from the IPG.
	 * @throws NovaBankaIPGException When the 3D Secure verification fails.
	 */
	public function verify_3ds( WC_Order $order, array $verification_data ): array {
		try {
			// Prepare verification data.
			$verification_data = $this->prepare_verification_data( $order, $verification_data );

			// Log verification data if in debug mode.
			if ( Config::get_setting( 'debug', false ) ) {
				$this->logger->debug( 'Verifying 3D Secure authentication', array( 'verification_data' => $verification_data ) );
			}

			// Send the verification request to the IPG.
			$response = $this->api_handler->verify_3ds_authentication( $verification_data );

			// Handle the response from IPG.
			if ( 'AUTHENTICATED' === $response['status'] ) {
				$this->logger->info(
					'3D Secure authentication verified successfully.',
					array(
						'order_id' => $order->get_id(),
						'response' => $response,
					)
				);
				return $response;
			} else {
				throw NovaBankaIPGException::paymentError( '3D Secure verification failed.', $response );
			}
		} catch ( NovaBankaIPGException $e ) {
			$this->logger->error(
				'3D Secure verification failed.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw $e;
		} catch ( Exception $e ) {
			$this->logger->error(
				'3D Secure verification failed due to an unexpected error.',
				array(
					'order_id' => $order->get_id(),
					'error'    => $e->getMessage(),
				)
			);
			throw new NovaBankaIPGException( '3D Secure verification failed: ' . esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Check if 3D Secure is required for the transaction.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return bool True if 3D Secure is required, false otherwise.
	 */
	public static function is_3ds_required( array $transaction_data ): bool {
		return isset( $transaction_data['threeDSRequired'] ) &&
				true === $transaction_data['threeDSRequired'];
	}

	/**
	 * Generate the URL for 3D Secure authentication.
	 *
	 * @param array $transaction_data The data associated with the current transaction.
	 * @return string The URL for 3D Secure authentication.
	 * @throws NovaBankaIPGException If 3DS URL is missing or invalid.
	 */
	public static function generate_3ds_url( array $transaction_data ): string {
		if ( empty( $transaction_data['threeDSURL'] ) ) {
			throw new NovaBankaIPGException( '3D Secure URL is missing from the transaction data.' );
		}
		return $transaction_data['threeDSURL'];
	}

	/**
	 * Handle the response from the 3D Secure process.
	 *
	 * @param array $response_data The response data from the 3D Secure authentication process.
	 * @return bool True if the 3DS authentication was successful, false otherwise.
	 * @throws NovaBankaIPGException If the response data is invalid or indicates a failure.
	 */
	public static function handle_3ds_response( array $response_data ): bool {
		if ( empty( $response_data['status'] ) || 'AUTHENTICATED' !== $response_data['status'] ) {
			throw new NovaBankaIPGException( '3D Secure authentication failed or returned an invalid status.' );
		}
		return true;
	}

	/**
	 * Verify the authentication response signature for added security.
	 *
	 * @param array  $response_data The response data from the 3DS.
	 * @param string $signature The expected signature for validation.
	 * @return bool True if the signature is valid, false otherwise.
	 */
	public static function verify_3ds_signature( array $response_data, string $signature ): bool {
		$calculated_signature = hash( 'sha256', json_encode( $response_data ) . Config::get_setting( 'secret_key' ) );
		return hash_equals( $calculated_signature, $signature );
	}

	/**
	 * Prepare authentication data for 3D Secure initiation.
	 *
	 * @param WC_Order $order The order to prepare authentication data for.
	 * @param array    $auth_data The initial authentication data.
	 * @return array The prepared authentication data.
	 */
	private function prepare_auth_data( WC_Order $order, array $auth_data ): array {
		$auth_data['order_id'] = $order->get_id();
		$auth_data['amount']   = $order->get_total();
		$auth_data['currency'] = $order->get_currency();
		return $auth_data;
	}

	/**
	 * Prepare verification data for 3D Secure verification.
	 *
	 * @param WC_Order $order The order to prepare verification data for.
	 * @param array    $verification_data The initial verification data.
	 * @return array The prepared verification data.
	 */
	private function prepare_verification_data( WC_Order $order, array $verification_data ): array {
		$verification_data['order_id'] = $order->get_id();
		return $verification_data;
	}

	/**
	 * Prepare 3DS data for PaymentInit request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prepared 3DS data.
	 */
	public function prepare_3ds_data( array $order_data ): array {
		$threeds_data = array(
			'payinst'                                 => 'VPAS',
			'acctInfo'                                => $this->prepare_account_info( $order_data ),
			'threeDSRequestorAuthenticationInfo'      => $this->prepare_authentication_info( $order_data ),
			'threeDSRequestorPriorAuthenticationInfo' => $this->prepare_prior_auth_info( $order_data ),
		);

		$this->logger->debug( 'Prepared 3DS data', array( 'data' => $threeds_data ) );
		return $threeds_data;
	}

	/**
	 * Prepare account information for 3DS.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Account information.
	 */
	private function prepare_account_info( array $order_data ): array {
		$user_id      = $order_data['user_id'] ?? 0;
		$account_data = array();

		if ( $user_id ) {
			$user                    = get_userdata( $user_id );
			$registration_date       = $user->user_registered;
			$days_since_registration = ( time() - strtotime( $registration_date ) ) / DAY_IN_SECONDS;

			$account_data['chAccAgeInd'] = $days_since_registration > 365 ? '05' : '02';
			$account_data['chAccDate']   = gmdate( 'Ymd', strtotime( $registration_date ) );
		}

		return $account_data;
	}

	/**
	 * Prepare authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Authentication information.
	 */
	private function prepare_authentication_info( array $order_data ): array {
		$auth_info = array(
			'threeDSReqAuthMethod' => '02', // Example: 02 means two-factor authentication.
		);
		return $auth_info;
	}

	/**
	 * Prepare prior authentication information for 3DS request.
	 *
	 * @param array $order_data Order and customer data.
	 * @return array Prior authentication information.
	 */
	private function prepare_prior_auth_info( array $order_data ): array {
		$prior_auth_info = array(
			'threeDSReqPriorAuthData'   => 'ABC123', // Example data, this would come from prior transactions.
			'threeDSReqPriorAuthMethod' => '01',  // 01 indicates Frictionless flow.
		);
		return $prior_auth_info;
	}
}
</file>

<file path=".cursorignore">
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
</file>

<file path=".cursorrules">
You are an expert in WordPress, WooCommerce, PHP, and related web development technologies. You always try to keep things simple, following SoC and other programing principles which prefer less overhead, better PHPDoc and human readibility of the code.

You try to keep all the existing code, but also like to propose new code to refractor existing code following this guide.

You always keep a developer-log.json as a 'captain's log' for our codebase. It tells the story of what we did and why, so others (including our future selves) can understand the evolution of the code. The goal is to create a document that: Records what we changed, explains why we changed it, shows how to use the new code, help future developers understand our decision and provide migration guidance.

Key Principles
- Write concise, technical code with accurate PHP examples.
- Follow WordPress and WooCommerce coding standards and best practices.
- Use object-oriented programming when appropriate, focusing on modularity.
- Prefer iteration and modularization over duplication.
- Use descriptive function, variable, and file names.
- Use lowercase with hyphens for directories (e.g., wp-content/themes/my-theme) (e.g., wp-content/plugins/my-plugin).
- Favor hooks (actions and filters) for extending functionality.

PHP/WordPress/WooCommerce
- Use PHP 7.4+ features when appropriate (e.g., typed properties, arrow functions).
- Follow WordPress PHP Coding Standards.
- Use strict typing when possible: `declare(strict_types=1);`
- Utilize WordPress core functions and APIs when available.
- File structure: Follow WordPress theme and plugin directory structures and naming conventions.
- Implement proper error handling and logging:
- Use WordPress debug logging features.
- Create custom error handlers when necessary.
- Use try-catch blocks for expected exceptions.
- Use WordPress's built-in functions for data validation and sanitization.
- Implement proper nonce verification for form submissions.
- Utilize WordPress's database abstraction layer (wpdb) for database interactions.
- Use `prepare()` statements for secure database queries.
- Implement proper database schema changes using `dbDelta()` function.

Dependencies
- WordPress (latest stable version)
- WooCommerce (latest stable version)
- Composer for dependency management (when building advanced plugins or themes)

WordPress and WooCommerce Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions using functions.php.
- Use WordPress's built-in user roles and capabilities system.
- Utilize WordPress's transients API for caching.
- Implement background processing for long-running tasks using `wp_cron()`.
- Use WordPress's built-in testing tools (WP_UnitTestCase) for unit tests.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement proper security measures (nonces, data escaping, input sanitization).
- Use `wp_enqueue_script()` and `wp_enqueue_style()` for proper asset management.
- Implement custom post types and taxonomies when appropriate.
- Use WordPress's built-in options API for storing configuration data.
- Implement proper pagination using functions like `paginate_links()`.
- Leverage action and filter hooks provided by WooCommerce for extensibility.
- Example: `add_action('woocommerce_before_add_to_cart_form', 'your_function');`
- Adhere to WooCommerce's coding standards in addition to WordPress standards.
- Use WooCommerce's naming conventions for functions and variables.
- Use built-in WooCommerce functions instead of reinventing the wheel.
- Example: `wc_get_product()` instead of `get_post()` for retrieving products.
- Use WooCommerce's Settings API for plugin configuration pages.
- Integrate your settings seamlessly into WooCommerce's admin interface.
- Override WooCommerce templates in your plugin for custom layouts.
- Place overridden templates in `your-plugin/woocommerce/` directory.
- Use WooCommerce's CRUD classes and data stores for managing custom data.
- Extend existing data stores for custom functionality.
- Use WooCommerce session handling for storing temporary data.
- Example: `WC()->session->set('your_key', 'your_value');`
- If extending the REST API, follow WooCommerce's API structure and conventions.
- Use proper authentication and permission checks.
- Use WooCommerce's notice system for user-facing messages.
- Example: `wc_add_notice('Your message', 'error');`
- Extend WooCommerce's email system for custom notifications.
- Use `WC_Email` class for creating new email types.
- Check for WooCommerce activation and version compatibility.
- Gracefully disable functionality if requirements aren't met.
- Use WooCommerce's translation functions for text strings.
- Support RTL languages in your plugin's CSS.
- Utilize WooCommerce's logging system for debugging.
- Example: `wc_get_logger()->debug('Your debug message', array('source' => 'your-plugin'));`

Key Conventions
1. Follow WordPress's plugin API for extending functionality.
2. Use WordPress's template hierarchy for theme development.
3. Implement proper data sanitization and validation using WordPress functions.
4. Use WordPress's template tags and conditional tags in themes.
5. Implement proper database queries using $wpdb or WP_Query.
6. Use WordPress's authentication and authorization functions.
7. Implement proper AJAX handling using admin-ajax.php or REST API.
8. Use WordPress's hook system for modular and extensible code.
9. Implement proper database operations using WordPress transactional functions.
10. Use WordPress's WP_Cron API for scheduling tasks.

You always use . at the end of a inline comment.
</file>

<file path=".gitignore">
repopack-output-main-branch.xml
</file>

<file path="Asoft IPG 3DS eCommerce Transaction flow.md">
# 3DS E-commerce Transactions ​

## Introduction

This section describes the stages of an e-commerce transaction using the IPG platform and HPP web interface, focusing on the actions carried out by each party involved. ​

### The Buyer Perspective ​

1. Chooses products.  
2. Enters personal details for shipment and clicks "Buy". ​  
3. Is redirected to the HPP.  
4. Enters credit card data and clicks "Pay".  
5. If the card is 3-D Secure enabled, the Buyer is redirected to their bank's website to enter the password and then returns to the HPP. ​  
6. Is redirected to a specific page on the Merchant website displaying the payment result. ​  
7. Receives an email notification of payment if enabled by the Merchant. ​

### The Merchant Perspective ​

1. Receives a purchase order from the Buyer. ​  
2. Sends a PaymentInit message to IPG. ​  
3. Receives a unique PaymentID and the URL of the HPP. ​  
4. Redirects the Buyer to the HPP URL with the PaymentID. ​  
5. Receives a transaction notification from IPG. ​  
6. Responds with the URL for the Buyer to be redirected to for the transaction result. ​  
7. Presents the result to the Buyer. ​  
8. Receives an email notification of payment if enabled. ​

### The IPG Perspective ​

1. Receives a PaymentInit message from the Merchant. ​  
2. Responds with the HPP URL and a PaymentID. ​  
3. Presents the HPP to the Buyer. ​  
4. Receives the Buyer's credit card data. ​  
5. If the card is 3-D Secure enabled, redirects the Buyer to the bank's site for authentication and awaits the result. ​  
6. Processes the transaction by sending the request to the credit card company and gets a response. ​  
7. Sends a result notification message to the Merchant. ​  
8. Receives the URL for Buyer redirection. ​  
9. Redirects the Buyer to the specified URL. ​  
10. Sends an email notification of payment to the Buyer and/or Merchant if enabled. ​

### Diagram of Information Flow ​

The following pattern of actions/communications occurs during a transaction:

1. Buyer completes the shopping cart. ​  
2. Merchant prepares and returns the checkout page. ​  
3. Buyer fills out required fields and clicks "Buy".  
4. Merchant sends PaymentInit request to IPG. ​  
5. IPG verifies the request, saves transaction data, and returns the HPP URL and PaymentID. ​  
6. Merchant saves the PaymentID and redirects the browser to the HPP URL with the PaymentID. ​  
7. IPG checks the PaymentID, prepares the payment page, and returns it to the Buyer's browser. ​  
8. Buyer enters necessary data and clicks "Pay".  
9. If 3-D Secure, IPG redirects the browser to the bank's site for authentication. ​  
10. Buyer provides authentication data and is redirected back to IPG.  
11. IPG combines data and sends the request to the authorization system. ​  
12. Authorization system processes the request and returns the result to IPG. ​  
13. IPG sends a POST message to the Merchant with the transaction result. ​  
14. Merchant updates the transaction status and returns the URL for Buyer redirection. ​  
15. IPG redirects the browser to the specified URL and displays the final page with payment details. ​  
16. Buyer reviews the Merchant result page. ​

### Description of the Steps ​

The table below presents the full flow of activities in a payment transaction:

| Buyer | Merchant | Website IPG | Authorization Centre |
| ----- | ----- | ----- | ----- |
| 1\. Completes Shopping Cart. ​ | 2\. Prepares and returns the Check Out page. ​ |  |  |
| 3\. Fills out the required fields and clicks the "Buy” button. ​ | 4\. Prepares the HTTP PaymentInit request with all transaction data and sends it via POST to IPG. ​ | 5\. After verifying the validity of the request received, IPG saves the transaction data, associates a PaymentID to it and returns to the Merchant the URL where the Cardholder browser must be redirected and the PaymentID to use in redirection. ​ |  |
|  | 6\. Saves the PaymentID among other transaction data, then redirects the browser to the URL of the HPP specifying the PaymentID as the GET parameter. ​ | 7\. After checking the PaymentID received, IPG prepares the payment page and returns it to the buyer‘s browser. ​ |  |
| 8\. Enters the necessary data, and clicks the "Pay" button. Note: If the Buyer clicks the "Cancel" button, the transaction is not processed, and the flow proceeds to step 13\. ​ |  | 9\. (if the card is enabled for 3-D Secure) Redirects the browser to an external site to authenticate the Cardholder. ​ |  |
| 10\. (if the card is enabled for 3-D Secure) Provides their authentication data to the external site (the site of the bank that issued the credit card) and, at the end, is redirected to IPG. ​ |  | 11\. Receives data, combines it with data from the Merchant and the transaction and sends the request to the Authorisation System. ​ | 12\. Receives and processes the request and returns the result to IPG. ​ |
|  |  | 13\. Sends a POST message to the Merchant communicating the result of the transaction. ​ |  |
|  | 14\. Receives the message and updates the transaction status with the result received. ​ It then returns the URL where the buyer browser is to be redirected to for the presentation of the response page. ​ |  |  |
|  |  | 15\. Redirects the buyer browser to the URL specified by the merchant in previous step and displays the final page, with details of the payment result. ​ |  |
| 16\. Receives and reviews Merchant result page. ​ |  |  |  |

## Merchant Integration

### Introduction

IPG includes direct communications with the Merchant server to complete transactions. ​ This can be implemented via:

* A special plug-in. ​  
* Creating a custom communication interface. ​

### Messages Between the Merchant Site and IPG ​

Server-to-server messages are divided into:

* Online messages: Occur during the transaction and are mandatory.  
* Offline messages: Occur after the transaction and are optional. ​

### Online Messages

* PaymentInit Request: Sent by the Merchant to IPG to initialize the transaction. ​  
* PaymentInit Response: Sent by IPG to the Merchant containing the HPP URL and PaymentID. ​  
* Notification: Sent by IPG to the Merchant with transaction results. ​  
* Notification Response: Sent by the Merchant to IPG with the final redirection URL. ​

### Offline Messages

* Payment Request: Used for various accounting transactions post-payment. ​  
* PaymentQuery: Allows the Merchant to check the status and details of a transaction in real-time. ​

### Message Verifier

All messages are signed using a Message Verifier (msgVerifier) generated by:

1. Concatenating specified message data. ​  
2. Removing spaces.  
3. Hashing the string using SHA256. ​  
4. Base64 encoding the hash bytes. ​

Example for PaymentInit request:

* Concatenate: msgName \+ version \+ id \+ password \+ amt \+ trackid \+ udf1 \+ SECRET KEY \+ udf5 ​  
* Remove spaces.  
* Hash using SHA256. ​  
* Base64
</file>

<file path="AsoftIPG-integration-guide.xml">
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-28T08:12:41.151Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="AsoftIPG_Merchant_Integration.Guide_Payment3DS_v12.txt">
Asoft IPG 

Merchant Integration Guide 
Payment 3DS 
Version 1.12 

Table of Contents 
History of revisions................................................................................................................. 5 
Introduction ..................................................................................................................................... 6 
Hosted Payment Page (HPP) ................................................................................................ 6 
3DS e-commerce transactions ........................................................................................................ 7 
Introduction ............................................................................................................................ 7 
The Buyer perspective .................................................................................................. 7 
The Merchant perspective ............................................................................................ 7 
The IPG perspective ..................................................................................................... 7 
Diagram of information flow .......................................................................................... 8 
Description of the steps ................................................................................................ 9 
Merchant Integration ............................................................................................................ 10 
Introduction ................................................................................................................. 10 
Messages between the merchant site and IPG ........................................................... 10 
Online messages ........................................................................................................ 11 
Offline messages ........................................................................................................ 11 
Message Verifier ......................................................................................................... 12 
PaymentInit request .................................................................................................... 14 
PaymentInit response ................................................................................................. 20 
Notification message .................................................................................................. 20 
Notification response .................................................................................................. 23 
Financial Request message ........................................................................................ 23 
Financial Response message ..................................................................................... 24 
Payment Query Request message ............................................................................. 25 
Payment Query Response message ........................................................................... 26 
MOTO transactions ....................................................................................................................... 28 
Introduction .......................................................................................................................... 28 
The Buyer perspective ................................................................................................ 28 
The Merchant perspective .......................................................................................... 28 
The IPG perspective ................................................................................................... 28 
Merchant Integration ............................................................................................................ 28 
Introduction ................................................................................................................. 28 
Messages between the merchant site and IPG ........................................................... 29 
Message Verifier ......................................................................................................... 29 
Payment Request ....................................................................................................... 30 
Payment response ...................................................................................................... 32 
Plug-in interface specifications ...................................................................................................... 34 
Java plugin .......................................................................................................................... 34 
Java IPG Demo Plugin Simulator ................................................................................ 34 
IPG Payment Service Factory ..................................................................................... 35 
IPG Logger Interface .................................................................................................. 35 
IPG Payment Service Interface ................................................................................... 36 
DLL plugin ............................................................................................................................ 37 
Direct interface specifications ....................................................................................................... 38 
Communication protocol specifications ................................................................................ 38 
Data transmission format ..................................................................................................... 38 
Data reception format .......................................................................................................... 39 
IPG Demo Plugin .......................................................................................................................... 41 
Test environment........................................................................................................................... 42 
Variables to be set for the creation of PaymentInit message ................................................ 42 
Mandatory test cases ........................................................................................................... 42 
HPP Customization ....................................................................................................................... 44 
Examples of Layout1 and Layout2 ....................................................................................... 45 
Customization on Smartphones and Tablets ........................................................................ 45 
Appendix A – Response Codes ..................................................................................................... 46 
 
  Introduction 
The Electronic Commerce service aims at brokering the cash flow from Internet sales. Merchants, who already have their own website on the Internet, are provided with a unique platform for the complete management of E-commerce transactions by credit card: 
•
 Online: manage all phases of the economic transaction in a secure way. 

•
 Offline: provides the Merchant with an account to access the web via the administrative interface, in which he is able to check the status of transactions, generate operational reports and proceed to the necessary accounting operations. 


 
Hosted Payment Page (HPP) 
During the payment of an e-commerce transaction with a credit card, the Merchant redirects the 
browser of the Buyer to the Internet Payment Gateway site 
(hereafter IPG) to enter credit card data. In this way, the Merchant reaches many significant goals: 
•
 The Merchant is unaware of the credit card data used by the Buyer, thus eliminating the burden of having to implement all the safety requirements, physical and logical, required by the management and storage of this type of data. 

•
 IPG is delegated the E-Commerce protocol management intended to be used and for which the service has been obtained from the bank. 

•
 The Merchant can customise the payment page presented to the Buyer, so to maintain the same look and feel of the Merchant’s site and thus creating a transparent redirection for the Buyer, without affecting their shopping experience. 


 
The payment page presented by IPG to the Buyer is called Hosted Payment Page (HPP). It 
handles all payment protocols (also known as Payment Instruments) supported by the Merchant. 
A further benefit of this solution is the fact that should any evolutions of these protocols occur in 
the future, or the introduction of new ones, IPG will implement them on HPP, without the Merchant needing to make any changes to his site. 
 
 
  3DS e-commerce transactions 
Introduction 
This chapter aims to describe all the stages of an e-commerce transaction using the IPG platform 
and HPP web interface on it, initially focusing on the actions carried out by each of the parties involved and then integrating them into a smooth, continuous flow of successive stages. 
The Buyer perspective 
To make a purchase on the Merchant site, Buyer: 
•
 Chooses products 

•
 Enters their personal details to allow the shipment of goods and clicks on "Buy" button. 

•
 Is redirected to the HPP. 

•
 Enters their credit card data and clicks on the "Pay" button 

•
 If the card is 3-D Secure enabled, the Buyer is redirected to their bank website to enter the password associated with the credit card, and returns to the HPP upon completion 

•
 Is redirected to a specific page on the Merchant website which displays the result of the payment 

•
 Receives an e-mail message notification of payment if the setting is enabled by the Merchant, to be used as virtual receipt 


The Merchant perspective 
The Merchant receives a purchase order from the Buyer and: 
•
 Sends a payment initialization message (PaymentInit) to IPG 

•
 Receives a unique payment code (PaymentID) in response and the URL of the HPP 

•
 Redirects the Buyer to the URL of the HPP and attaches the PaymentID information 

•
 Receives the notification of the transaction from IPG 

•
 Responds with the URL to which the Buyer should be redirected for the presentation of the transaction result 

•
 Presents the result to the Buyer 

•
 Receives an e-mail message notification of payment if the setting is enabled by the Merchant, to be used as virtual receipt 


 
The IPG perspective 
IPG receives an initialization message (PaymentInit) from the Merchant and: 
•
 Responds with the URL of the HPP and a transaction identification code (PaymentID) 

•
 Presents the HPP to the Buyer 

•
 Receives Credit Card data of the Buyer 

•
 If the card is 3-D Secure enabled, it redirects the Buyer to his bank’s site to enter the password associated with the credit card, and awaits the reverse redirection with the authentication result provided by the bank 

•
 Processes the transaction by sending the request to the credit card company authorisation systems and gets a response 

•
 Sends a result notification message to the Merchant 

•
 Receives the URL to redirect the Buyer in return 

•
 Redirects the Buyer to the URL received 

•
 Sends an e-mail message notification of payment to the Buyer and / or the Merchant (if the setting is enabled by the Merchant) to be used as virtual receipt. 


Diagram of information flow 
By integrating all the previously described activities, the result is the following pattern of actions / 
communications that occur during a transaction between the parties involved: 
 
 
 

Description of the steps 
The table below presents the full flow of activities in a payment transaction: 
 
Buyer  
 Merchant 
 Website IPG 
 Authorisation 
centre 
 
1. Completes Shopping 
Cart. 
 2. Prepares and returns the Check Out page. 
  
  
 
3. Fills out the required 
fields and clicks the 
"Buy” button. 
 4. Prepares the HTTP 
PaymentInit request 
with all transaction 
data and sends it via 
POST to IPG. 
 5. After verifying the 
validity of the request 
received, IPG saves the transaction data, 
associates a PaymentID to it and returns to the 
Merchant the URL 
where the Cardholder 
browser must be 
redirected and the 
PaymentID to use in 
redirection. 
  
 
 
 6. Saves the PaymentID among other transaction data, then redirects the browser to the URL of the HPP specifying the 
PaymentID as the GET 
parameter. 
 7. After checking the 
PaymentID received, 
IPG prepares the 
payment page and 
returns it to the buyer‘s 
browser. 
  
 
8. Enters the necessary data, and clicks the "Pay" button. 
Note: If the Buyer 
clicks the "Cancel" 
button, the transaction 
is not processed, and 
the flow proceeds to 
step 13. 
  
 9. (if the card is enabled for 3-D Secure) Redirects the browser to an external site to authenticate the 
Cardholder. 
  
 
10. (if the card is 
enabled for 3-D 
Secure) Provides their 
authentication data to 
the external site (the 
site of the bank that 
issued the credit card) 
and, at the end, is 
redirected to IPG. 
  
 11. Receives data, 
combines it with data 
from the Merchant and 
the transaction and 
sends the request to 
the Authorisation 
System. 
 12. Receives and 
processes the request 
and returns the result 
to IPG. 
 
 
  
 13. Sends a POST 
  
 


message to the 
Merchant 
communicating the 
result of the 
transaction. 
 
 
 14. Receives the 
message and updates 
the transaction status 
with the result received. It then returns the URL where 
the buyer browser is to be redirected to for the 
presentation of the 
response page. 
  
  
 
 
  
 15. Redirects the buyer 
browser to the URL specified by the merchant in previous step and displays the final page, with details of the payment result. 
  
 
16. Receives and reviews Merchant result page. 
  
  
  
 


 
Merchant Integration 
Introduction 
IPG includes the presence of some direct communications with the Merchant server to complete 
the transactions. This exchange of messages can be implemented in two ways: 
•
 through the installation of a special plug-in 

•
 by creating their own communication interface 


 
The plug-in is easy to integrate and is compatible with all sites developed in Java, C/C++, ColdFusion, ActiveX/COM, VB, ASP, .NET. 
 
If it is not possible or desirable to use the plug-in (e.g. because it is not compatible with the 
technological platform, or the site is published via an external provider in shared hosting) it is 
always possible, according to the specifications provided, to create your own communication 
interface. 
 
Messages between the merchant site and IPG 
Server-to-server messages between the Merchant Site and IPG are divided into two categories: 
•
 Online messages: occur during the transaction (indicated with arrows filled in blue in 


the flow diagram described in section Diagram of information flow) - their implementation is mandatory to complete the transaction successfully; 
•
 Offline messages: take place after the transaction processing is finished and are used by the Merchant for specific purposes - their implementation is optional. 


Online messages 
•
 PaymentInit Request: initialization message sent by the Merchant to IPG (step 4 in above Diagram of information flow); 

•
 PaymentInit Response: message sent by IPG to the merchant containing URL of IPG payment page (HPP) and ID of payment initiation request (Payment ID) - step 5 in above Diagram of information flow; 

•
 Notification: message sent by IPG to the Merchant containing transaction results (step 13 in above Diagram of information flow); 

•
 Notification Response: message sent by the merchant to IPG containing final redirection URL (step 14 in above Diagram of information flow); 


 
Offline messages 
Payment Request - After the payment, the Merchant proceeds with the order. Subsequently, various accounting transactions may be required: for instance, the account crediting (if the transaction did not involve automatic crediting) to the repayment of the Customer in the event of returned goods, and so on.  
IPG offers the ability to manage these requirements quickly and effectively. It is possible to carry 
the operations out in 2 ways: 
•
 By connecting to the BackOffice site and using the features therein 

•
 By sending the request directly from the system to IPG, using the Payment message, in which all of the original transaction parameters must be entered and the appropriate action code is to be set. In 


 
PaymentQuery - allows the Merchant to contact IPG to know in real time, at every 
moment, the processing status and details of a particular transaction. 
 
  
Message Verifier 
 
All messages exchanged between Merchant Site and IPG are signed using Message Verifier (msgVerifier) which is dynamically composed of specific message data (see bellow message specifications). 
Steps for Message Verifier generation are: 
a) Concatenate specified message data to create Message Verifier string; 
b) Remove spaces (if exists) 
c) Hash the string created in previous step using SHA256 algorithm to get HASH bytes 
d) Base64 the HASH bytes to create final msgVerifier field value. 
Example of Message Verifier creation for PaymentInit request message - 
Message data 
 Value 
 
msgName 
 “PaymentInitRequest” 
 
version 
 “1” 
 
id 
 “89110001” 
 
password 
 “test1234” 
 
amt 
 “15.00” 
 
trackid 
 “CTV-TEST-PureBuy-1” 
 
udf1 
 “AA” 
 
SECRET KEY 
 “YXKZPOQ9RRLGPDED5D3PC5BJ” 
 
udf5 
 “EE “ 
 


 
a) Concatenate msgName, version, id, password, amt, trackid, udf1, SECRET KEY and udf5: 
“PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE “ 
 
b) Remove spaces: 
 
“PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE” 
 
c) Hash of step (b) value using SHA256 algorithm to generate hash bytes:  
 
B3A54617D2E9ACD9079D85EA15D066A5892E3CABE1B41DA4891B3A65FFAA0CCE 
 
d) Base64 of step (c) value to generate final msgVerifier value:  
 
s6VGF9LprNkHnYXqFdBmpYkuPKvhtB2kiRs6Zf+qDM4= 
 
 
  
Following is Java code example to message verifier calculation: 
  
public static void main(String[] args) { 
 try { 
 
   // https://hash.online-convert.com/sha256-generator    
   String messageVerifierBase = "PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE"; 
   System.out.println("messageVerifierBase=" + messageVerifierBase); 
    
   MessageDigest digest = MessageDigest.getInstance("SHA-256"); 
   byte[] messageVerifierBase64Hash = digest.digest(messageVerifierBase.getBytes()); 
   System.out.println("SHA256(messageVerifierBase)=" + byteArrayToHex(messageVerifierBase64Hash)); 
 
   String msgVerifier = Base64Codec.encodeBytes(messageVerifierBase64Hash); 
   System.out.println("msgVerifier=Base64(SHA256(messageVerifierBase)=" + msgVerifier); 
             
  } catch (Throwable t) { 
t.printStackTrace(); 
  } 
} 
 
public static String byteArrayToHex(byte[] bytes) { 
  StringBuilder result = new StringBuilder(bytes.length * 2); 
  for (byte singleByte : bytes) { 
    result.append(String.format("%02x", singleByte).toUpperCase()); 
  } 
  return result.toString(); 
 } 
 
Following is printed on Java console: 
 
messageVerifierBase=PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE 
SHA256(messageVerifierBase)=B3A54617D2E9ACD9079D85EA15D066A5892E3CABE1B41DA4891B3A65FFAA0CCE  
msgVerifier=Base64(SHA256(messageVerifierBase))=s6VGF9LprNkHnYXqFdBmpYkuPKvhtB2kiRs6Zf+qDM4= 
 
Note: if Base64(SHA256(messageVerifierBase)) calculation results with different string value, common issue is related to the value of messageVerifierBase.  
Message verifier base must match fields from specific fields from request or response message.  
For example: purchase amount value (15.00) takes part in the message verifier calculation, but different purchase amount value is provided in the JSON message (15). 
  
The same message verifier value could be calculated via https://hash.online-convert.com/sha256-generator: 
 
 

 
 
After clicking on START, following result is displayed: 
 
 

  
PaymentInit request 
This message is sent by the Merchant to IPG to start a transaction. It uses the following items: 
 
<Request> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentInitRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID - TranPortalID, assigned during activation of the service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<payinst> 
  
  
 O 
 20 
 "CC"/"VPAS"/"IP"/"MPASS"/"MYBANK" - to be specified if Merchant wants to show only one specific payment Instrument. 
 
<action> 
  
  
 M 
 2 
 Type of transaction: 
1=Purchase 
4=Authorization 
14 = Card Verification 
 
<currencycode> 
  
  
 M 
 3 
 Currency code 
 
<amt> 
  
  
 M 
 10.2 
 Transaction amount 
(NNNNNNNNNN.NN format 
Max. Val. 9999999999.99). 
 
<trackid> 
  
  
 M 
 255 
 Order identification code set by the Merchant. It is advisable that this code is unique to each transaction. 
 
<RecurAction> 
  
  
 M 
 10 
 Possible Values (case insensitive): 
“” – indicates a normal e-commerce order 
“activation” – indicates that the Merchant requires a new Recurring Payment to be activated with this order 
“consumer_initiated” – indicates card-on-file consumer initiated payment 
 
<RecurContractId> 
  
  
 O 
 30 
 Optional information to collect the Recurring Payment Contract Identifier. 
 
<recurid> 
  
  
 C 
 20 
 Recurring Payment identifier. Mandatory if <RecurAction>=”consumer_initiated” in the PaymentInit request and terminal is enabled to Rec. Pymnts.  
 
<pymnDscr> 
  
  
 O 
 255 
 Recurring Payment description 
 
<cardSHA2> 
  
  
 O 
 1 
 “Y” / “N” to receive the card SHA-2 hash in the notification message  
 
<paymentTimeout> 
  
  
 O 
 2 
 payment session validity (from the paymentInit time) – in number of minutes. If not present, IPG default value is used . 
 
 
  
  
  
  
  
 
<bankStmtFreeText> 
  
  
 O 
 50 
 Free Text that will be forwarded to Auth System in p127, to be printed on bank account statement. 
 
<instructedFees> 
  
  
 O 
 255 
 Text field that can host any fees that could be applied to the original amount. 
 


<responseURL> 
  
  
 M 
 255 
 URL used by IPG to send Notification Message to the Merchant. 
 
<errorURL> 
  
  
 M 
 384 
 URL towards which IPG redirects the Buyer in case that any problem occurs when sending the Notification Message. 
 
<notificationFormat> 
  
  
 O 
 10 
 Optional field to specify the format of the Notification Message sent by IPG. Possible values: 
- “xml” – msg is sent in xml format 
- “form” – msg is sent as a HTML form (nvp) 
If empty, the default value is “xml”. Values different from those specified will generate a validation error. 
 
<paymentPageMode> 
  
  
 O 
 1 
 Payment Page mode 
0 = Standard (the customer's browser is redirected to the payment page) 
1 = Light Box (the payment page is presented on the merchant page). 
If omitted, the Standard option is assumed. 
 
<langid> 
  
  
 M 
 3 
 Code to set the language in which HPP will be displayed and for notification email. The following are supported: 
"ITA" = Italian 
"USA" = English 
"FRA" = French 
"DEU" = German 
"ESP" = Spanish 
"SLO" = Slovenian 
"SRB" = Serbian 
"POR" = Portuguese 
"RUS" = Russian 
 
<udf1> 
  
  
 O 
 255 
 User free field 1. 
Field at the discretion of the Merchant used for an additional information. 
 
<udf2> 
  
  
 O 
 255 
 User free field 2 
 
<udf3> 
  
  
 O 
 255 
 User free field 3 
 
<udf4> 
  
  
 O 
 255 
 User free field 4 
 
<udf5> 
  
  
 O 
 255 
 User free field 5 
 
<buyerFirstName> 
  
  
 O 
 50 
 Buyer first name 
 
<buyerLastName> 
  
  
 O 
 50 
 Buyer last name 
 
<buyerUserId> 
  
  
 O 
 50 
 UserId with which the buyer is registered at the merchant web site 
 
<buyerPhoneNumber> 
  
  
 O 
 20 
 Buyer phone number 
 
<buyerEmailAddress> 
  
  
 O 
 255 
 Allows you to pre-set the email field that the 
Buyer can enter on the payment page to 
receive transaction e-mail receipt (option only 
possible if the Merchant has enabled the sending email function to the Buyer using the back office). 
 
<cartContent> 
  
  
 O 
  
 Shopping cart content. 
 
 
 <item> 
  
 C 
  
 [1..n] <item> tags if <cartContent> is present 
 
 
  
 <productId> 
 M 
 30 
 product identifier 
 
 
  
 <productDesc> 
 O 
 255 
 product description 
 
 
  
 <qty> 
 M 
 8 
 product quantity in the cart 
 


 
  
 <singlePrice> 
 M 
 10.2 
 product single price  
 
<shippingInfo> 
  
  
 O 
  
 Shipping Details 
 
 
 <recipientFirstName> 
  
 C 
 50 
 Recipient First Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientLastName> 
  
 C 
 50 
 Recipient Last Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientPhoneNumber> 
  
 O 
 20 
 Recipient Phone Number. 
 
 
 <ShippingAddress> 
  
 C 
  
 Shipping Address. Mandatory if <shippingInfo> is present 
 
 
  
 <country> 
 C 
 3 
 Shipping Country. Mandatory if <buyerShippingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Shipping City. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Shipping Postal Code. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Shipping Address Line 1 (Street name, number). Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Shipping Address Line 2 (apt number, suite, etc) 
 
 
  
 <addrLine3> 
 O 
 40 
 Shipping Address Line 3 (all info not containable in first 2 lines) 
 
<billingInfo> 
  
  
 O 
  
 Billing Details 
 
 
 <billingFirstName> 
  
 C 
 50 
 First name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingLastName> 
  
 C 
 50 
 Last name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingAddress> 
  
 C 
  
 Billing Address. Mandatory if <billingInfo> is present  
 
 
  
 <country> 
 C 
 3 
 Billing Country. Mandatory if <billingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Billing City. Mandatory if <billingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Billing Postal Code. Mandatory if <billingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Billing Address Line 1 (Street name, number). Mandatory if <billingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Billing Address Line 2 (Street name, number) 
 
 
  
 <addrLine3> 
 O 
 40 
 Billing Address Line 3 (all info not containable in first 2 lines) 
 
<acctType> 
  
  
 O 
 2 
 Account Type 
Accepted Values: 
01 = Not Applicable 
02 = Credit 
03 = Debit 
 
<acctInfo> 
 <chAccAgeInd> 
  
 O 
 2 
 Length of time that the cardholder has had the account with the merchant. 
Accepted Values: 
01 = No account (guest check-out) 
02 = Created during this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <chAccDate> 
  
 O 
 8 
 Date that the cardholder opened the account with the merchant. 
 


Format accepted: 
Date format = YYYYMMDD 
 
 
 <chAccChangeInd> 
  
 O 
 2 
 Length of time since the cardholder’s account information with the merchant was last changed. 
Accepted Values: 
01 = Changed during this transaction 
02 = Less than 30 days 
03 = 30−60 days 
04 = More than 60 days 
 
 
 <chAccChange> 
  
 O 
 8 
 Date that the cardholder’s account with the merchant was last changed. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <chAccPwChangeInd> 
  
 O 
 2 
 Indicates the length of time since the cardholder’s account with the merchant had a password change or account reset. 
Accepted Values: 
01 = No change 
02 = Changed during this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <chAccPwChange> 
  
 O 
 8 
 Date that cardholder’s account with the merchant had a password change or account reset. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <shipAddressUsageInd> 
  
 O 
 2 
 Indicates when the shipping address used for this transaction was first used with the merchant. 
Accepted Values: 
01 = This transaction 
02 = Less than 30 days 
03 = 30−60 days 
04 = More than 60 days 
 
 
 <shipAddressUsage> 
  
 O 
 8 
 Date when the shipping address used for this transaction was first used with the merchant. 
Format accepted: 
Date format = YYYYMMDD 
 
 
 <txnActivityDay> 
  
 O 
 3 
 Number of transactions (successful and abandoned) for this cardholder account with the merchant across all payment accounts in the previous 24 hours. 
 
 
 <txnActivityYear> 
  
 O 
 3 
 Number of transactions (successful and abandoned) for this cardholder account with the merchant across all payment accounts in the previous year. 
 
 
 <provisionAttemptsDay> 
  
 O 
 3 
 Number of Add Card attempts in the last 24 hours. 
 
 
 <nbPurchaseAccount> 
  
 O 
 4 
 Number of purchases with this cardholder account during the previous six months. 
 
 
 <suspiciousAccActivity> 
  
 O 
 2 
 Indicates whether the merchant has experienced suspicious activity on the cardholder account. 
Values accepted: 
01 = No suspicious activity has been observed 
02 = Suspicious activity has been observed 
 


 
 <shipNameIndicator> 
  
 O 
 2 
 Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction. 
Values accepted: 
• 01 = Account Name identical to shipping Name 
• 02 = Account Name different than shipping Name 
 
 
 <paymentAccInd> 
  
 O 
 2 
 Indicates the length of time that the payment account was enrolled in the cardholder’s account with the merchant. 
Values accepted: 
01 = No account (guest check-out) 
02 = During this transaction 
03 = Less than 30 days 
04 = 30−60 days 
05 = More than 60 days 
 
 
 <paymentAccAge> 
  
 O 
 8 
 Date that the payment account was enrolled in the cardholder’s account with the merchant. 
Format accepted: 
Date format = YYYYMMDD 
 
<threeDSRequestorAuthenticationInfo> 
 <threeDSReqAuthMethod> 
  
 O 
 2 
 Mechanism used by the Cardholder to authenticate to the merchant. 
Values accepted: 
01 = No merchant authentication occurred (i.e. cardholder “logged in” as guest) 
02 = Login to the cardholder account at the 3DS Requestor system using merchant’s own credentials 
03 = Login to the cardholder account at the merchant system using federated ID 
04 = Login to the cardholder account at the merchant system using issuer credentials 
05 = Login to the cardholder account at the merchant system using third-party authentication 
06 = Login to the cardholder account at the merchant system using FIDO Authenticator 
07 = Login to the cardholder account at the merchant system using FIDO Authenticator (FIDO assurance data signed) 
08 = SRC Assurance Data 
 
 
 <threeDSReqAuthTimestamp> 
  
 O 
 12 
 Date and time in UTC of the cardholder authentication. 
Format accepted: 
Date format = YYYYMMDDHHMM 
 
 
 <threeDSReqAuthData> 
  
 O 
 20000 
 Data that documents and supports a specific authentication process. 
 
<threeDSRequestorPriorAuthenticationInfo> 
 <threeDSReqPriorAuthMethod> 
  
 O 
 2 
 Mechanism used by the Cardholder to previously authenticate to the merchant. 
Values accepted: 
• 01 = Frictionless authentication occurred by ACS 
• 02 = Cardholder challenge occurred by ACS 
• 03 = AVS verified 
• 04 = Other issuer methods 
 
 
 <threeDSReqPriorRef> 
  
 O 
 36 
 This data element provides additional information to the ACS to determine the best approach for handing a request. 
Value accepted: 
 


This data element contains an ACS Transaction ID for a prior authenticated transaction (for example, the first recurring transaction that was authenticated with the cardholder). 
 
 
 <threeDSReqPriorAuthTimestamp> 
  
 O 
 12 
 Date and time in UTC of the prior cardholder authentication. 
Format accepted: 
Date format = YYYYMMDDHHMM 
 
 
 <threeDSReqPriorAuthData> 
  
 O 
 2048 
 Data that documents and supports a specific authentication process. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + amt + trackid + udf1 + SECRET KEY + udf5 
 


PaymentInit response 
The response, that IPG returns to Merchant after getting PaymentInit request and having verified 
the validity, contains the following fields: 
 
<Response> 
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “PaymentInitResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<paymentID> 
 valid 
 M 
 20 
 Order PaymentID.  
 
<browserRedirectionURL> 
 valid 
 M 
 256 
 IPG URL for browser redirection. 
 
<errorCode> 
 error 
 M 
 20 
 Error Code returned by IPG.  
 
<errorService> 
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + paymentID + SECRET KEY + browserRedirectionURL 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
Notification message 
After payment processing, IPG sends this message to inform the Merchant of the transaction result (if it has been processed) or the error reason (if it has not been processed). The messages exchanged can be formatted in xml or as a html form (nvp), based on the value of the NotificationFormat field of the PaymentInit message. The default, if not specified, is the xml format. 
 
Notification message in the case of xml format has the following structure: 
 
<Request> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
  
 
1st 
levTag 
 2rd 
lev Tag 
 Response Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentNotificationRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<paymentID> 
  
  
 M 
 20 
 Order PaymentID. 
 
<tranID> 
  
 valid 
 M 
 20 
 TransactionID. 
 
<action> 
  
 valid 
 M 
 2 
 Action code. 
 
<payinst> 
  
 valid 
 M 
 20 
 Payment Instrument used for the transaction.  
 
<result> 
  
 valid 
 M 
 20 
 Result of the operation: 
"APPROVED" = Successful preauthorization 
"NOT APPROVED" = Not Authorized preauthorization 
"CAPTURED" = Successful purchase  
"NOT CAPTURED" = Not Authorized purchase 
"DENIED BY RISK" = Not processed due to failure to pass any risk criteria imposed by banks 
"HOST TIMEOUT" = Not processed due to no reply by the authorization system 
"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<auth> 
  
 valid 
 M 
 35 
 Auth Code. 
 
<currencycode> 
  
 valid 
 M 
 3 
 Currency code. 
 
<amt> 
  
 valid 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
  
 valid 
 M 
 255 
 Merchant TrackId. 
 
<ref> 
  
 valid 
 M 
 20 
 Auth system ref number. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<responsecode> 
  
 valid 
 M 
 3 
 Host Response Code. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<cardtype> 
  
 valid 
 M 
 10 
 Brand Id. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<liability> 
  
 valid 
 M 
 1 
 “Y” / “N”. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<RecurContractID> 
  
 valid 
 O 
 30 
 Recurring Payment Contract Identifier. 
 
<recurid> 
  
 valid 
 C 
 20 
 Recurring Payment identifier. Only if Merchant specified <RecurAction>=”ACTIVATION” in the PaymentInit request and terminal is enabled to Rec. Pymnts.  
 
<expDate> 
  
 valid 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
  
 valid 
 M 
 4 
 Card last 4 digits 
 
<cardCountry> 
  
 valid 
 M 
 2 
 card country. Only if payinst = “CC”,”VPAS”,”MPASS” 
 
<ipCountry> 
  
 valid 
 M 
 2 
 IP address country 
 
<cardSHA2> 
  
 valid 
 C 
 32 
 card number hash value, using sha2 (256) algorithm. Only if Merchant specified the <cardSha2> = “Y” field in the PaymentInit request and payinst = “CC”,”VPAS”,”MPASS” 
 
<udf1> 
  
 valid 
 O 
 255 
 user free field 1 
 
<udf2> 
  
 valid 
 O 
 255 
 user free field 2 
 
<udf3> 
  
 valid 
 O 
 255 
 user free field 3 
 
<udf4> 
  
 valid 
 O 
 255 
 user free field 4 
 
<udf5> 
  
 valid 
 O 
 255 
 user free field 5 
 


<riskLevel> 
  
 valid 
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if and terminal is Smash enabled. 
 
<riskThreshold> 
  
 valid 
 C 
 4 
 Risk treshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
  
 valid 
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
  
 valid 
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<myBankBuyerBankAlias> 
  
 valid 
 C 
 256 
 Alias of the Buyer Bank choosen by the buyer. Only if payInst=”MYBANK” 
 
<mpShippingFlag> 
  
 valid 
 C 
 3 
 MasterPass shipping flag configured by the Merchant in GUI: “SUP”/”NOT”/”DYN”. Only if payInst=”MPASS”. –  Future use –  
 
 
 <mpShippingOption> 
 valid 
 C 
 20 
 MasterPass shipping option choosen by the buyer after wallet comeback. Only if payInst=”MPASS” and if <mpShippingFlag>=”DYN”. –  Future use – 
 
 
 <mpShippingRecipientName> 
 valid 
 C 
 100 
 Recipient Name. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingRecipientPhoneNumber> 
 valid 
 C 
 20 
 Recipient Phone Number. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCountry> 
 valid 
 C 
 2 
 Shipping Country. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCountrySubdivision> 
 valid 
 C 
 5 
 Shipping country subdivision. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingCity> 
 valid 
 C 
 25 
 Shipping City. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpShippingpostalCode> 
 valid 
 C 
 20 
 Shipping Postal Code. Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine1> 
 valid 
 C 
 40 
 Shipping Address Line 1 (Street name, number). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine2> 
 valid 
 O 
 40 
 Shipping Address Line 2 (apt number, suite, etc). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
 
 <mpAddrLine3> 
 valid 
 O 
 256 
 Shipping Address Line 3 (all info not containable in first 2 lines). Only if payInst=”MPASS” and if <mpShippingFlag>=”NOT”. –  Future use – 
 
<errorCode> 
  
 error 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
  
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
  
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + paymentid + tranid + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + paymentid + errorCode + SECRET KEY + errorDesc 


 


 
 
Notification response 
In Notification response, the Merchant sends the URL to which he wants the Customer to be redirected for the presentation of the result page. 
The merchant Notification response message must follow the same format chosen for the Notification request. In the xml case the structure is the following: 
 
<Response> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentNotificationResponse” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<paymentID> 
  
  
 M 
 20 
 Order PaymentID 
 
<browserRedirectionURL> 
  
  
 M 
 512 
 URL for the final browser redirection to the Merchant website 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256). 
String to hash in this exact order (only fields values, not tags): 
msgName + version + paymentID + SECRET KEY + browserRedirectionURL 
 


 
 
 
Financial Request message 
Through a simple exchange of server-to-server messages, the Merchant can make automated 
financial operations (Credit, Capture, Purchase Reversal and Void Preauthorization) remotely. 
 
The fields to be included in the request message are: 
<Request> 
 
1st 
levTag 
  
  
 Mand 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “FinancialRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<tranid> 
  
  
 M 
 20 
 Unique identification code of the original 
transaction, created by IPG and communicated to the Merchant in the Notification Message 
 
<action> 
  
  
 M 
 2 
 Type of action: 
2 = Credit 
3 = Purchase Reversal 
5 = Capture 
9 = Void Preauthorization 
 
<currencycode> 
  
  
 O 
 3 
 currency code 
 
<amt> 
  
  
 M 
 10.2 
 operation amount (nnnnnnnnnn.nn) 
 
<trackid> 
  
  
 M 
 255 
 Identification code associated with the order by the Merchant. Usually this is the identification code of the purchase order on the Merchant site. It is advisable that this code is unique to each transaction. 
 


<udf1> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf2> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf3> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf4> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<udf5> 
  
  
 O 
 255 
 Field entry at the discretion of the Merchant and returned unchanged by IPG. 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + tranid + amt + trackid + udf1 + SECRET KEY + udf5 
 


 
Financial Response message 
The response that IPG returns to Merchant, after evaluating the financial request and processing the 
transaction, contains the following fields: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response 
Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “FinancialResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<recurid> 
 “valid” 
 C 
 20 
 RecurID (if referenced original transaction is under a RecurID, the response reports the RecurID) 
 
<paymentid> 
 “valid” 
 C 
 20 
 PaymentID (if referenced original transaction has a PaymentID, the response reports the PaymentID) 
 
<payinst> 
 “valid” 
 M 
 20 
 Payment instrument used for the transaction (Credit Card, 3D Secure, MasterPass, MyBank) 
 
<tranid> 
 “valid” 
 M 
 20 
 Unique transaction identification code assigned by IPG 
 
<action> 
 “valid” 
 M 
 2 
 Type of action: 
2 = Credit 
3 = Purchase Reversal 
5 = Capture 
9 = Void Preauthorization 
 
<result> 
 “valid” 
 M 
 20 
 Transaction result: 
"CAPTURED" = Successful Captured (if Action 5) 
"CAPTURED" = Successful Credited (if Action = 2) 
"NOT CAPTURED" = Not credited/Re-credited 
“VOIDED” = Successful Written off (if Action =3), or Canceled (if Action=9) 
"DENIED BY RISK" = Denied because exceeding the limits imposed by the bank 
 


"HOST TIMEOUT" = Not processed due to no reply by the authorization system within specified period. 
"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<auth> 
 “valid” 
 M 
 35 
 Authorization code released by the credit card company, concerning the original transaction. 
 
<currencycode> 
 “valid” 
 M 
 3 
 Currency code. 
 
<amt> 
 “valid” 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
 “valid” 
 M 
 255 
 Merchant TrackId.  
 
<ref> 
 “valid” 
 M 
 20 
 Authorization system reference number. 
 
<responsecode> 
 “valid” 
 M 
 3 
 Code granted by the Issuer that identifies, in case of failure, the reason for denying  
 
<udf1> 
 “valid” 
 O 
 255 
 user free field 1. If sent by the Merchant 
 
<udf2> 
 “valid” 
 O 
 255 
 user free field 2. If sent by the Merchant 
 
<udf3> 
 “valid” 
 O 
 255 
 user free field 3. If sent by the Merchant 
 
<udf4> 
 “valid” 
 O 
 255 
 user free field 4. If sent by the Merchant 
 
<udf5> 
 “valid” 
 O 
 255 
 user free field 5. If sent by the Merchant 
 
<cardtype> 
 “valid” 
 M 
 10 
 Brand Id (Visa, MasterCard, AMEX,...) 
 
<expDate> 
 “valid” 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
 “valid” 
 M 
 4 
 Card last 4 digits 
 
<errorCode> 
 “error” 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
 “error” 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 “error” 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + tranid + result + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
 
Payment Query Request message 
Through a simple exchange of server-to-server messages, the Merchant can request information about payment order status. 
 
The fields to be included in the request message are: 
<Request> 
 
1st 
levTag 
  
  
 Mand 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “PaymentQueryRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<password> 
  
  
 M 
 16 
 Password associated with TranPortalID 
 
<action> 
  
  
 M 
 2 
 Type of action: 
8 = Payment Query 
 


<paymentid> 
  
  
 M 
 20 
 Unique identification code of the order, created by IPG and communicated to the Merchant in the PaymentInitResponse Message 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + action + SECRET KEY + paymentid 
 


 
Payment Query Response message 
The response that IPG returns to Merchant, after processing the Payment Query request, contains the following fields: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 2nd 
levTag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “PaymentQuaryResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<merchantid> 
  
 M 
 10 
 Unique merchant identificator 
 
<termid> 
  
 M 
 8 
 TranPortalID, assigned during activation of the 
service 
 
<paymentid> 
  
 M 
 20 
 Order ID 
 
<trackid> 
  
 M 
 255 
 Merchant TrackId.  
 
<tranid> 
  
 M 
 20 
 Unique transaction identification code assigned by IPG 
 
<currencycode> 
  
 M 
 3 
 Currency code. 
 
<amt> 
  
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<status> 
  
 M 
 12 
 Order status: 
"INITIALIZED" = PaymentInit message received and validated by IPG. Payment page has not been displayed to the customer 
"PRESENTED" = Payment page presented, but the customer has not completed the process.                          
“PROCESSED” = The order has been completely processed by the IPG, and confirmation message received from the host. 
“TIMEOUT” = The order has expired due to the host timing out the process. 
 
<result> 
  
 M 
 20 
 Transaction result: 
"CAPTURED" = Successful Captured (if Action 5) 
"CAPTURED" = Successful Credited (if Action = 2) 
"NOT CAPTURED" = Not credited/Re-credited 
“VOIDED” = Successful Written off (if Action =3), or Canceled (if Action=9) 
"DENIED BY RISK" = Denied because exceeding the limits imposed by the bank 
"HOST TIMEOUT" = Not processed due to no reply by the authorization system within specified period. 
 


"ISSUER UNAVAILABLE" = Not processed due to failed connection with the authorization system 
 
<payinst> 
  
 M 
 20 
 Payment instrument used for the transaction (Credit Card, 3D Secure, Instant Payment, MasterPass, MyBank) 
 
<payinittm> 
  
 M 
 11 
 Order Initialization Date/Time 
 
<payprsntm> 
  
 M 
 11 
 Order Presentment Date/Time 
 
<payprcstm> 
  
 M 
 11 
 Order Processed Date/Time 
 
<udf1> 
  
 O 
 255 
 user free field 1. If sent by the Merchant 
 
<udf2> 
  
 O 
 255 
 user free field 2. If sent by the Merchant 
 
<udf3> 
  
 O 
 255 
 user free field 3. If sent by the Merchant 
 
<udf4> 
  
 O 
 255 
 user free field 4. If sent by the Merchant 
 
<udf5> 
  
 O 
 255 
 user free field 5. If sent by the Merchant 
 
<eci> 
  
 O 
 2 
 3D-Secure Electronic commerce indicator 
 
<cavv> 
  
 O 
 40 
 3D-Secure Cardholder authentication verification value 
 
<xid> 
  
 O 
 40 
 3D-Secure XID value 
 
<liability> 
  
 M 
 1 
 Liability Shift indicator 
 
<riskLevel> 
  
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if and terminal is Smash enabled. 
 
<riskThreshold> 
  
 C 
 4 
 Risk treshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
  
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
  
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<rows> 
  
 C 
 2 
 Number of transaction data rows 
 
<row> 
  
  
  
 [1..n] <row> tags with order’s transaction data 
 
 
 <action> 
  
 2 
 Action code 
 
 
 <tranid> 
  
 20 
 Transaction ID 
 
 
 <msgDateTime> 
  
 24 
 Message creation date/time, in UTC format 
 
 
 <amt> 
  
 10.2 
 Transaction’s amount 
 
 
 <result> 
  
 20 
 Transaction result 
 
 
 <auth> 
  
 20 
 Authorization Code 
 
 
 <cardtype> 
  
 10 
 Brand Id (Visa, MasterCard, AMEX,...) 
 
 
  <responsecode> 
  
 3 
 Host Response Code. 
 
 
 <ref> 
  
 20 
 Authorization system reference number.  
 
 
 <udf1> 
  
 255 
 user free field 1. If sent by the Merchant 
 
 
 <udf2> 
  
 255 
 user free field 2. If sent by the Merchant 
 
 
 <udf3> 
  
 255 
 user free field 3. If sent by the Merchant 
 
 
 <udf4> 
  
 255 
 user free field 4. If sent by the Merchant 
 
 
 <udf5> 
  
 255 
 user free field 5. If sent by the Merchant 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + msgDateTime + paymentid + amt + trackid + udf1 + SECRET KEY +  udf5 
 


 
  MOTO transactions 
Introduction 
IPG provides a service for managing payment transactions with credit cards obtained as a result of sales made by mail or through call centers. This chapter describes necessary merchant activities to integrate with IPG in case of MOTO payment transaction processing. 
The Buyer perspective 
To make a purchase, the Buyer: 
•
 Chooses products 

•
 Creates an order, including card details and sends it to the merchant by email or through the call center. 

•
 Receives an e-mail message notification of payment, if the setting is enabled by the Merchant, to be used as a virtual receipt 


The Merchant perspective 
The Merchant receives a purchase order from the Buyer and: 
•
 Sends a payment request message (TransactionRequest) to the IPG 

•
 Receives a response message (TransactionResponse) with transaction result from IPG 

•
 Presents the result to the Buyer 

•
 Receives an e-mail message notification of payment, if the setting is enabled by the Merchant, to be used as a virtual receipt 


The IPG perspective 
IPG receives a payment request (TransactionRequest) from the Merchant and: 
•
 Processes the transaction by sending the request to the credit card company authorisation systems and gets a response 

•
 Sends to the merchant a response message (TransactionResponse) with the transaction result 

•
 Sends an e-mail message notification of payment to the Buyer and / or the Merchant (if the setting is enabled by the Merchant) to be used as virtual receipt. 


Merchant Integration 
Introduction 
IPG includes the presence of some direct communications with the Merchant server to complete 
the transactions. This exchange of messages can be implemented in two ways: 
•
 through the installation of a special plug-in 

•
 by creating their own communication interface 


 
The plug-in is easy to integrate and is compatible with all sites developed in Java, C/C++, ColdFusion, ActiveX/COM, VB, ASP, .NET. 
 
If it is not possible or desirable to use the plug-in (e.g. because it is not compatible with the 
technological platform, or the site is published via an external provider in shared hosting) it is 
always possible, according to the specifications provided, to create your own communication 
interface. 
 
 
Messages between the merchant site and IPG 
Message Verifier 
All messages exchanged between Merchant Site and IPG are signed using Message Verifier (msgVerifier) which is dynamically composed of specific message data (see bellow message specifications). 
Steps for Message Verifier generation are: 
a) Concatenate specified message data to create Message Verifier string; 
b) Remove spaces; 
c) Hash the string created in previous step using SHA256 algorithm. 
Example of Message Verifier creation for PaymentInit request message - 
Message data 
 Value 
 
msgName 
 PaymentInitRequest 
 
version 
 1 
 
id 
 89110001 
 
password 
 test1234 
 
amt 
 15.00 
 
trackid 
 CTV-TEST-PureBuy-1 
 
udf1 
 AA 
 
SECRET KEY 
 YXKZPOQ9RRLGPDED5D3PC5BJ 
 
udf5 
 EE 
 


 
a) Concatenate msgName, version, id, password, amt, trackid, udf1, SECRET KEY and udf5: 
PaymentInitRequest 1 89110001 test1234 15.00 CTV-TEST-PureBuy-1 AA YXKZPOQ9RRLGPDED5D3PC5BJ EE 
 
 
PaymentInitRequest189110001test123415.00CTV-TEST-PureBuy-1AAYXKZPOQ9RRLGPDED5D3PC5BJEE 
 
c) Hash of step (b) value using SHA256 algorithm 
 
b3a54617d2e9acd9079d85ea15d066a5892e3cabe1b41da4891b3a65ffaa0cce 
 
Payment Request 
This message (TransactionRequest) is sent by the Merchant to IPG to start a transaction. It uses the following items:> 
<Request> 
 
1st 
levTag 
 2nd 
levTag 
 3rd 
lev Tag 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
  
 M 
 30 
 “TransactionRequest” 
 
<version> 
  
  
 M 
 8 
 “1” (integer) 
 
<id> 
  
  
 M 
 8 
 tranPortalID 
 
<password> 
  
  
 M 
 16 
 tranPortal pwd 
 
<payinst> 
  
  
 O 
 20 
 fixed: "CC" 
 
<action> 
  
  
 M 
 2 
 action code: 1 or 4 
 
<currencycode> 
  
  
 M 
 3 
 currency code 
 
<amt> 
  
  
 M 
 10.2 
 nnnnnnnnnn.nn 
 
<trackid> 
  
  
 M 
 255 
 Merchant TrackId 
 
<member> 
  
  
 C 
 384 
 cardholder name - Mandatory if recurAction = “” or recurAction = “activation” 
 
<addr> 
  
  
 O 
 255 
 cardholder address 
 
<zip> 
  
  
 O 
 20 
 cardholder postal code 
 
<card> 
  
  
 C 
 19 
 card number – Mandatory if recurAction = “” or recurAction = “activation” 
 
<cvv2> 
  
  
 O 
 4 
 card security code. Could be mandatory for some merchants 
 
<expYear> 
  
  
 C 
 4 
 card expiration year - Mandatory if recurAction = “” or recurAction = “activation” 
 
<expMonth> 
  
  
 C 
 2 
 card expiration month - Mandatory if recurAction = “” or recurAction = “activation” 
 
<eci> 
  
  
 O 
 2 
 3DS ECI value. Only used by ECSEC merchants 
 
<xid> 
  
  
 O 
 40 
 3DS XID value. Only used by ECSEC merchants 
 
<cavv> 
  
  
 O 
 40 
 3DS CAVV value. Only used by ECSEC merchants 
 
<clientIPAddress> 
  
  
 O 
 25 
 buyer browser IP Address. Only used by ECSEC merchants 
 
<clientUserAgent> 
  
  
 O 
 512 
 buyer browser user agent string. Only used by ECSEC merchants 
 
<clientHTTPHeaders> 
  
  
 O 
 2048 
 buyer browser http headers values. Only used by ECSEC merchants 
 
<langid> 
  
  
 O 
 3 
 language used by the buyer on merch. Website. Only used by ECSEC merchants 
 
<buyerUserId> 
  
  
 O 
 50 
 UserId with which the buyer is registered at the merchant web site. Only used by ECSEC merchants 
 
<recurAction> 
  
  
 M 
 10 
 Possible Values (case insensitive): 
“activation” – the Merchant requires a new Recurring Payment to be activated 
“merchant_initiated” – a following transaction on an active recurring payment is requested 
“delete” – a recurring payment cancellation is requested 
“” – indicates a normal s2s transaction 
 


<recurContractID> 
  
  
 O 
 30 
 Optional information to collect the Recurring Payment Contract Identifier (only if recurAction=”activation”, otherwise ignored). 
 
<pymnDscr> 
  
  
 O 
 255 
 Recurring Payment description 
 
<recurid> 
  
  
 C 
 20 
 RecurID: Mandatory if recurAction= “merchant_initiated” or ”delete”, otherwise ignored 
 
<recurNewCardExpDate> 
  
  
 O 
 6 
 Rec.Pymn. new card expiration date (format YYYYMM) – Considered if recurAction=“merchant_initiated”, otherwise ignored 
 
<bankStmtFreeText> 
  
  
 O 
 50 
 Free Text that will be forwarded to Auth System in p127, in order to be printed on bank account statement (replaces “B24POSFTEXT” special value in UDF1) 
 
<udf1> 
  
  
 O 
 255 
 user free field 1 
 
<udf2> 
  
  
 O 
 255 
 user free field 2 
 
<udf3> 
  
  
 O 
 255 
 user free field 3 
 
<udf4> 
  
  
 O 
 255 
 user free field 4 
 
<udf5> 
  
  
 O 
 255 
 user free field 5 
 
<buyerFirstName> 
  
  
 O 
 50 
 Buyer first name 
 
<buyerLastName> 
  
  
 O 
 50 
 Buyer last name 
 
<buyerPhoneNumber> 
  
  
 O 
 20 
 Buyer phone number 
 
<buyerEmailAddress> 
  
  
 O 
 255 
 Buyer email address 
 
<cartContent> 
  
  
 O 
  
 Order content. 
 
 
 <item> 
  
 C 
  
 [1..n] <item> tags if <cartContent> is present 
 
 
  
 <productId> 
 M 
 30 
 product identifier 
 
 
  
 <productDesc> 
 O 
 255 
 product description 
 
 
  
 <qty> 
 M 
 8 
 product quantity in the cart 
 
 
  
 <singlePrice> 
 M 
 10.2 
 product single price  
 
<shippingInfo> 
  
  
 O 
  
 Shipping details 
 
 
 <recipientFirstName> 
  
 C 
 50 
 Recipient First Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientLastName> 
  
 C 
 50 
 Recipient Last Name. Mandatory if <shippingInfo> is present. 
 
 
 <recipientPhoneNumber> 
  
 O 
 20 
 Recipient Phone Number. 
 
 
 <ShippingAddress> 
  
 C 
  
 Shipping Address. Mandatory if <shippingInfo> is present 
 
 
  
 <country> 
 C 
 3 
 Shipping Country. Mandatory if <buyerShippingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Shipping City. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Shipping Postal Code. Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Shipping Address Line 1 (Street name, number). Mandatory if <buyerShippingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Shipping Address Line 2 (apt number, suite, etc) 
 
 
  
 <addrLine3> 
 O 
 40 
 Shipping Address Line 3 (all info not containable in first 2 lines) 
 
<billingInfo> 
  
  
 O 
  
 Billing details 
 


 
 <billingFirstName> 
  
 C 
 50 
 First name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingLastName> 
  
 C 
 50 
 Last name of the billed person. Mandatory if <billingInfo> is present 
 
 
 <billingAddress> 
  
 C 
  
 Billing Address. Mandatory if <billingInfo> is present  
 
 
  
 <country> 
 C 
 3 
 Billing Country. Mandatory if <billingAddress> is present. ISO 3166-1 (Alpha 3) format required. 
 
 
  
 <city> 
 C 
 40 
 Billing City. Mandatory if <billingAddress> is present 
 
 
  
 <zip> 
 C 
 20 
 Billing Postal Code. Mandatory if <billingAddress> is present 
 
 
  
 <addrLine1> 
 C 
 100 
 Billing Address Line 1 (Street name, number). Mandatory if <billingAddress> is present 
 
 
  
 <addrLine2> 
 O 
 100 
 Billing Address Line 2 (Street name, number) 
 
 
  
 <addrLine3> 
 O 
 40 
 Billing Address Line 3 (all info not containable in first 2 lines) 
 
<msgVerifier> 
  
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
msgName + version + id + password + recurid + amt + trackid + udf1 + SECRET KEY + udf5 
 


 
Payment response 
After payment processing, IPG sends this message (TransactionResponse) to inform the Merchant of the transaction result (if it has been processed) or the error reason (if it has not been processed). Payment response message has the following structure: 
<Response> 
  
  
  
 contains an attribute “type” whose value can be: “valid” or “error” 
 
1st 
levTag 
 Response 
Type 
 Mand. 
 Max 
Size 
 Description 
 
<msgName> 
  
 M 
 30 
 “TransactionResponse” 
 
<version> 
  
 M 
 8 
 “1” (integer) 
 
<msgDateTime> 
  
 M 
 24 
 Message creation date/time, in UTC format 
 
<tranID> 
 valid 
 M 
 20 
 TransactionID. 
 
<action> 
 valid 
 M 
 2 
 action code. 
 
<payinst> 
 valid 
 M 
 20 
 payment instrument used for the transaction. 
 
<result> 
 valid 
 M 
 20 
 Transaction result. 
 
<auth> 
 valid 
 M 
 35 
 Auth code. 
 
<currencycode> 
 valid 
 M 
 3 
 Currency code. 
 
<amt> 
 valid 
 M 
 10.2 
 nnnnnnnnnn.nn. 
 
<trackid> 
 valid 
 M 
 255 
 Merchant TrackId. 
 
<ref> 
 valid 
 M 
 20 
 Auth system ref number. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<responsecode> 
 valid 
 M 
 3 
 Host Response Code. Mandatory if payinst = “CC”/”VPAS” /"IP"/”MPASS” 
 
<cardtype> 
 valid 
 M 
 10 
 brand Id.  
 
<recurid> 
 valid 
 C 
 20 
 Recurring Payment identifier. Only if Merchant specified in the request: 
 


- <recurAction>=”activation” (in this case, it’s the RecurID of a newly generated recurring payment) 
- <recurAction>=”merchant_initiated”, “delete” (in this case, it’s the RecurID provided by the Merchant in the rec. payment instance request).  
 
<expDate> 
 valid 
 M 
 6 
 Card expiry date 
 
<cardLastFourDigits> 
 valid 
 M 
 4 
 Card last 4 digits 
 
<recurContractID> 
 valid 
 C 
 30 
 Recurring Payments Contract Identifier indicated by the Merchant in the request. 
 
<recurNewCardExpDate> 
 valid 
 C 
 6 
 If a new card expiration date is successfully used for a recurring payment instance, the new exp date is reported to the merchant. 
 
<cardCountry> 
 valid 
 M 
 2 
 card country.  
 
<udf1> 
 valid 
 O 
 255 
 user free field 1 - Only if Merchant sent it in the request 
 
<udf2> 
 valid 
 O 
 255 
 user free field 2 - Only if Merchant sent it in the request 
 
<udf3> 
 valid 
 O 
 255 
 user free field 3 - Only if Merchant sent it in the request 
 
<udf4> 
 valid 
 O 
 255 
 user free field 4 - Only if Merchant sent it in the request 
 
<udf5> 
 valid 
 O 
 255 
 user free field 5 - Only if Merchant sent it in the request 
 
<riskLevel> 
 valid 
 C 
 20 
 Risk Level (“GREEN”/”YELLOW”/”RED”) – Only if terminal is Smash enabled. 
 
<riskThreshold> 
 valid 
 C 
 4 
 Risk threshold (score that defines the borderline between GREEN and YELLOW zones) – Only if terminal is Smash enabled 
 
<riskScore> 
 valid 
 C 
 4 
 Risk score – Only if terminal is Smash enabled. 
 
<riskMaxScore> 
 valid 
 C 
 4 
 Max Risk Score for the risk policy that assessed the transaction (sum of “scoreConfigured” values returned by SMASH) – Only if terminal is Smash enabled. 
 
<errorCode> 
 error 
 M 
 20 
 Error Code returned by IPG. 
 
<errorService> 
 error 
 M 
 30 
 Error Service returned by IPG. 
 
<errorDesc> 
 error 
 M 
 256 
 Error Description returned by IPG. 
 
<msgVerifier> 
  
 M 
 50 
 Salted hash of some fields of this message plus a secret shared key – Hash algorithm: SHA-2 (256).  
String to hash in this exact order (only fields values, not tags): 
1)
 If type=”valid”: msgName + version + msgDateTime + tranid + amt + trackid + udf1 + SECRET KEY + udf5 

2)
 If type=”error”: msgName + version + msgDateTime + errorCode + SECRET KEY + errorDesc 


 
IMP.: Considerations reported at REQ11 of par. 4.1 apply 
 


 
 
 
 
  
  Plug-in interface specifications 
Plug-in is a application module/library which provides integration implementation directly to the merchant. In this way, the developer skips low level integration and works directly with the provided IPG API.  
There are two plug-in APIs provided:  
•
 Java API for integration with java based merchant applications 

•
 DLL API for integration with Windows based merchant application 


Java plugin 
Java Plug-in implementation is provided through the ipg-java-plugin-src-1.x.x.jar file. This file is part of every distribution of IPGDemoPlugin simulator in a following file: IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar.  

• Java Plug-in API is provided with the following interface: rs.asoft.ipg.plugin.service. IPGPaymentService. 1.
 Presents all internet payment methods provided by IPG server. In order to choose optimal integration approach, it is essential to understand all the integration options. 

2.
 Provides ipgdemo.log file with detailed logging description of each action when simulating internet payments. Merchant developers should use it to understand what parameters and data are necessary to be provided for a successful communication with the IPG server. 

3.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war file demonstrates an example of the deployment package necessary to integrate with the IPG server.   

4.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> IPGDemoPlugin-src-1.*.jar contains all Java classes necessary for the Merchant to develop in order to fully integrate with the IPG server. 

5.
 IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> ipg-java-plugin-src-1.*.*.jar contains Java plugin to be used out of box in order to speed up and simplify the integration 

6.
 If IPG Demo Plugin application is installed on the merchant host server, merchant developer will be able to compare the processing  between merchant and simulator implementation 





Java IPG Demo Plugin Simulator 
IPG Demo Plugin Simulator is the essential tool provided in order to simplify integration with the merchant site. The Java version of IPG Demo Plugin Simulator is provided via IPGDemoPluginServer.zip which is able to download via https://<ipgtesthost> /IPGDemoPlugin/demoPlugin.html?msgName=HelpRequest help page.  
IPGDemoPluginServier.zip contains simple Jetty server and IPG Demo Plugin client application. To run the IPG Demo Plugin simulator, it is enough to unzip the archive and double click IPGDemoPlugin.bat (if having issues please follow the Java installation steps on the help page).  
 
Use of IPG Demo Simulator has following benefits: 
.    
 
IPG Payment Service Factory 
Best way to create an instance of IPGPaymentService is via rs.asoft.ipg.plugin.service. IPGPaymentServiceFactory class by invoking IPGPaymentService getIPGPaymentService(int ipgClientType) method. Currently following IPG client types are supported: 
•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_GENERIC_XML = 1 – Default implementation for using custom XML protocol. 

•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_REST_XML = 2 – REST XML implementation 

•
 int IPGPaymentServiceFactory.IPG_CLIENT_TYPE_REST_JSON = 3 – REST Json implementation 


 
Example: In order to create IPG Generic XML instance following code is to be used: 
int ipgClientType = IPG_CLIENT_TYPE_GENERIC_XML; 
IPGPaymentService ipgPaymentService = IPGPaymentServiceFactory.getIPGPaymentService(ipgClientType); 
IPG Logger Interface 
The default logging implementation is rs.asoft.ipg.plugin.service.IPGLoggerLog4jImpl class as a logging wrapper around Log4j implementation.  
In order to substitute logging implementation create a new implementation by extending rs.asoft.ipg.plugin.service.IPGLogger and use logger following method of IPGPaymentServiceFactory class: 
IPGPaymentService ipgPaymentService = IPGPaymentServiceFactory.getIPGPaymentService(ipgClientType, ipgLogger); 
 
 
IPG Payment Service Interface 
The Java plugin API - IPGPaymentService functions provides main IPG business functions.  The functions are divided in the following groups: 
 
•
  Setup methods – to substitute following IPG Payment Service client modules: 

a)
 void setHttpSender(HttpSender httpSender) – communication with IPG server 

b)
 void setIPGXmlParser(IPGXmlParser ipgXmlParser) – parsing of XML request and response messages (applicable only in case of IPG_CLIENT_TYPE_GENERIC_XML) 


 
•
 3DSecure methods – provides methods to invoke when integrating with standard 3DSecure payment transactions (Cardholder data collected on the IPG server): 

a)
 PaymentInitResponse sendPaymentInitRequest(PaymentInitRequest) – to start 3DSecure payment transaction with IPG server 

b)
 byte[] procesNotificationXmlRequest(String secretKey, byte[] xmlBytes, NotificationUrlBulder notificationUrlBulder) – utility function to parse XML Notification Request submitted by IPG server and create Notification Response XML bytes. 

c)
 byte[] procesNotificationFormRequest(String secretKey, Map requestParameters, NotificationUrlBulder notificationUrlBulder) – utility function to parse HTTP  Notification Request submitted by IPG server and create Notification Response URL bytes 

d)
 byte[] procesNotificationJsonRequest(String secretKey, byte[] jsonBytes, NotificationUrlBulder notificationUrlBulder) – utility function to parse JSON  Notification Request submitted by IPG server and create Notification Response JSON bytes 


 
•
 VI3DSecure methods – provides methods to invoke when integrating with standard 3DSecure payment transactions(Cardholder data collected on the Merchant PCI Compliant server): : 

a)
 TransactionVI3DSResponse sendTransactionVI3DSVerifyEnrollment(TransactionVI3DSVEReqRequest) – to start 3DSecure payment transaction with IPG server 

b)
 TransactionVI3DSResponse sendTransactionVI3DSPARes(TransactionVI3DSPAResRequest) – to finish 3DSecure payment transaction with IPG server 


 
•
 MOTO (Mail Order / Telephone Order) method – provides method to submit MOTO transaction (Cardholder data collected on the Merchant PCI Compliant server): 

a)
 TransactionResponse sendTransactionRequest(TransactionRequest) ) – to process MOTO transaction on IPG server 


 
•
 Financial method – provides method to submit Financial transaction (CREDIT, VOID_PURCHASE, CAPTURE, VOID_CREDIT, VOID_CAPTURE, VOID_AUTHORIZATION, GAMING_PAYMENT): 

a)
 FinancialResponse sendFinancialRequest(FinancialRequest financialRequest) ) – to process Financial transaction on IPG server 


 
•
 Batch method – provides method to submit MOTO transactions via a batch file (Cardholder data collected on the Merchant PCI Compliant server): 

b)
 BatchResponse sendBatchFileRequest(BatchFileRequest) to process MOTO transactions on IPG server, provided in the Batch file 


 
DLL plugin 
Windows DLL Plug-in implementation is provided through the IPGPaymentService.dll and IPGPaymentService.tlb files. These files are part of the IPGDemoPlugin simulator – Windows IIS version.  
If you wish to receive the files, please submit the request to the IPG support contact.   
 
  Direct interface specifications 
If you don‘t have a suitable platform to use plug-in or want to create your own interface, all information on the communication protocol, the transmission and reception of the message formats, their variables and error messages are listed below. 
 
Communication protocol specifications 
•
 Target (action): 


- in a test environment 
<TestEnvironment_IP_address>/IPGWeb/servlet/IPGPaymentXMLServlet 
 
Note: Test environment IP address will be communicated to you via e-mail. 
 
- in a production environment 
<Production_IP_address>/IPGWeb/servlet/PaymentInitHTTPServlet 
•
 Method: POST 

•
 Content-Type: “application/xml” 


Data transmission format 
Examples of messages sent by Merchant to IPG: 
 
PaymentInit Message 
<request> 
  <msgName>PaymentInitRequest</msgName> 
  <version>1</version> 
  <id>89110001</id> 
  <password>test1234</password> 
  <langId>USA</langId> 
  <buyerFirstName /> 
  <buyerLastName /> 
  <buyerUserId /> 
  <buyerPhoneNumber /> 
  <buyerEmailAddress /> 
  <clientIpAddress /> 
  <clientUserAgent /> 
  <clientHttpHeaders /> 
  <action>1</action> 
  <recurAction /> 
  <recurContractId>RECURCNTRID-12345</recurContractId> 
  <amt>12.35</amt> 
  <payinst /> 
  <currencycode>978</currencycode> 
  <trackid>CTV-TEST-PureBuy-1</trackid> 
  <responseURL>http://192.168.100.104:8080/IPGDemoPlugin/paymentNotification.html</responseURL> 
  <errorURL>http://192.168.100.104:8080/IPGDemoPlugin/paymentError.html</errorURL> 
  <cardSHA2>Y</cardSHA2> 
  <paymentTimeout>30</paymentTimeout> 
  <bankStmtFreeText /> 
  <pymnDscr /> 
  <instructedFees /> 
  <notificationFormat>xml</notificationFormat> 
  <paymentPageMode>0</paymentPageMode> 
  <udf1>AA</udf1> 
  <udf2>BB</udf2> 
  <udf3>CC</udf3> 
  <udf4>DD</udf4> 
  <udf5>EE</udf5> 
<msgVerifier>i/CFOYVGoVdNrAg+AdqnMav4QDv6WhXBJlirRTiU5yY=</msgVerifier> 
</request> 
 
Payment Message 
<request> 
  <msgName>FinancialRequest</msgName> 
  <version>1</version> 
  <id>89110001</id> 
  <password>test1234</password> 
  <action>2</action> 
  <amt>1.00</amt> 
  <currencycode>978</currencycode> 
  <trackid>A1B2C3</trackid> 
  <tranid>666311898221172199</tranid> 
  <udf1>AA</udf1> 
  <udf2>BB</udf2> 
  <udf3>CC</udf3> 
  <udf4>DD</udf4> 
  <udf5>EE</udf5> 
  <msgVerifier>FJcbvZ5VE0grZgaOHsh6N+apgEl2yS+v5gksMhMMYCI=</msgVerifier> 
</request> 
Data reception format 
Examples of messages sent by IPG to Merchant: 
 
PaymentInit Response: 
<response type="valid"> 
<msgName>PaymentInitResponse</msgName> 
<version>1</version> 
<msgDateTime>2017-08-07 10:49:01.788</msgDateTime> 
<paymentid>490861957491072190</paymentid> 
<browserRedirectionURL>http://ipg-test:9080/IPGWeb/servlet/PaymentSelection.html</browserRedirectionURL> 
<msgVerifier>K5s0L0+Fpm2C6bvt4Own9ExH0cC82083I23B+mxcEMA=</msgVerifier> 
</response> 
 
Payment Response: 
<response type="valid"> 
<msgName>FinancialResponse</msgName> 
<version>1</version> 
<msgDateTime>2017-08-07 11:23:15.260</msgDateTime> 
<paymentid>375113018221172196</paymentid> 
<action>2</action> 
<currencycode>978</currencycode> 
<amt>5.00</amt> 
<payinst>CC</payinst> 
<cardtype>VISA</cardtype> 
<expdate>203603</expdate> 
<cardlastfourdigits>0004</cardlastfourdigits> 
<result>CAPTURED</result> 
<auth>720479</auth> 
<ref>721911012683</ref> 
<responsecode>00</responsecode> 
<tranid>596343336231172190</tranid> 
<trackid>A1B2C3</trackid> 
<udf1>AA</udf1> 
<udf2>BB</udf2> 
<udf3>CC</udf3> 
<udf4>DD</udf4> 
<udf5>EE</udf5> 
<msgVerifier>MZTL7EJNe3Xsk0qgNPkJJpZaU89K1XotD23AyIsZGUY=</msgVerifier> 
</response> 
 
 
  IPG Demo Plugin 
For better understanding of merchant integration, the IPG Demo Plugin is available. It simulates messages exchanging between merchant server and payment gateway server. Additional technical information are provided through online log which is presented during the plugin is running. Detailed instruction for how to use IPG Demo Plugin are provided in AsoftIPG Transactions User Guide.  
To activate IPG Demo Plugin: 
1.
 access to IPG simulator’s URL address (the address will be provided by Bank’s contact person); 

2.
 Open Help menu; 

3.
 Download IPG Demo Plugin; 

4.
 Unzip the IPGDemoPluginServer.zip file; 

5.
 Update the value of the parameter "webapp.address" in ipgDemoPluginCfg.properties file (replace <merchantsiteurl> with your public IP address); 

6.
 Run IPGDemoPlugin.bat file. 


 
The IPG Demo log provides a detailed insight into the correct processing of the client application and demonstration of an optimal integration method.  
 
For better understanding the procedure of generating Message Verifier (MsgVerifier) fields, do the following: 
1. Perform payment transaction using IPG Demo application with predefined parameters; 
2. Search for “Message Verifier Base loaded, messageVerifierBase:..” row in IPG Demo log file to see how looks like MsgVerifier string for the transaction preformed in previous step; 
3. Inspect method IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar -> rs.asoft.ipg.plugin.service.IPGPaymentServiceSupport.generateMessageVerifier  to consider the way of Message Verifier generating using SHA256 algorithm; 
4. Inspect method IPGDemoPluginServer.zip -> IPGDemoPlugin.war -> WEB-INF/lib/ipg-java-plugin-src-1.0.3.jar -> rs.asoft.ipg.plugin.model.PaymentInitRequest -> PaymentInitRequest.getMessageVerifierBase()  to consider the way of Message Verifier for PaymentInit message generating. 
  Test environment 
IPG provides a test environment where the Merchant can freely perform transactions to properly 
prepare the interface for the transition into production. 
 
The test environment is always available, even if 24-hour availability cannot be guaranteed, as a 
result of corrective and evolutionary maintenance interventions that could make it temporarily 
unusable, without notice. 
 
Variables to be set for the creation of PaymentInit message 
If you use the plug-in, use the following URL for an IPG test connection: 
•
 <TestEnvironment_IP_address>/IPGDemoPlugin/demoPlugin.html 


 
If you are using direct interfacing, the full address to create the connection is as follows: 
•
 <TestEnvironment_IP_address>/IPGWeb/servlet/IPGPaymentXMLServlet 


 
The variables to be set in a fixed manner are the following: 
•
 Response URL: <TestEnvironment_IP_address>/IPGDemoPlugin/paymentNotification.html 

•
 Error URL: <TestEnvironment_IP_address>/IPGDemoPlugin/paymentError.html 


 
Note: Test environment IP address and Secret Key will be communicated to you via e-mail. 
 
Other parameters can be defined freely. 
 
Mandatory test cases 
It is mandatory to perform the following tests, which are the most frequent real case 
studies, before sending the confirmation of the end of the test to Customer support and then 
requesting the transition into production. 
 
Test case n°1 – Successful e-commerce transaction 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, use the following card: 
Terminal ID 
 Terminal password 
 Card Number 
 Expiry 
 CVV2 
 
89110001 
 test1234 
 4012001037141112 
 Any future date 
 Any 3-digits number 
 


 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (paymentid, tranid, trackid, msgDateTime, result, currencycode, amt, auth, udf1, udf2, udf3, udf4, udf5, cardtype, payinst, liability, responsecode). 

•
 the transaction is successful (result = "APPROVED" if you used Action = 4, or 


"CAPTURED" if you used Action = 1) 
•
 The browser has been re-directed properly to the address provided in the PaymentNotificationResponse message. 


 
 
 
Test case n°2 – Transaction not authorized 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, use the following card: 
 
Terminal ID 
 Terminal password 
 Card Number 
 Expiry 
 CVV2 
 
89110001 
 test1234 
 4539990000000020 
 Any future date 
 Any 3-digits number 
 


 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (result = NOT CAPTURED; responsecode = 51) 

•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
Test case n°3 – Transaction canceled by buyer 
 
Create and submit PaymentInit message. 
 
Once the HPP is displayed, press ‘Cancel’ button. 
 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all the required fields (PaymentID, errorCode, errorService, errorDesc) 

•
 the “errorCode” field shows “PY20090” and the “errorDesc” field contains the error 


description “Customer canceled transaction” 
•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
Test case n°4 – Financial operations 
 
Repeat test case n°1 and memorize Transaction ID contained in Notification message. 
 
Create Payment Request message:  
•
 insert Transaction ID memorized in previous step 

•
 specify appropriate action type (2- Credit or 3-Purchase Reversal if original transaction was 1-Purchase, or, 5-Capture or 9-Preauthorization Void if original transaction was 4-Preauthorization). 


 
Submit Payment Request message. 
 
Check that: 
•
 the PaymentNotificationRequest message has been received correctly with all required fields (paymentid, tranid, trackid, msgDateTime, result, currencycode, amt, auth, udf1, udf2, udf3, udf4, udf5, cardtype, payinst, liability, responsecode). 

•
 the transaction is successful (ResultCode = "CAPTURED" if you used Action = 2 and 5, or 


"VOIDED" if you used Action = 3 and 9) 
•
 The browser has been re-directed properly to the address provided in  


the PaymentNotificationResponse message. 
 
 
Note: Repeat test case for various financial operation (Credit, Purchase Reversal, Capture and Preauthorization Void). 
  HPP Customization 
The Hosted Payment Page presented by IPG to the Buyer can be customized by the Merchant. 
Without customization, the HPP is proposed with the standard graphics and layout prepared by 
the bank. 
 
The Merchant can apply customization autonomously using the specific features on the Back Office site that allow you to: 
•
 Select one of the two graphic templates available, one developed vertically ("Layout1"), and the other horizontally ("Layout2"); 

•
 Vary the number of graphics settings (background colors, text, and button colour; font, borders and backgrounds of the input fields, thickness, color and curvature of the form borders, thickness and curvature of the buttons, etc.); 

•
 Upload an image (banner, logo etc.), and specify its position (template #1 only) 

•
 Set up a line of text with business reference data or another message for users (template #1 only) 

•
 Upload a background image, specifying the position of the screen and any repetition, and set the degree of transparency of the form to see the background beneath it. 


 
Any change is displayed in real time in a sample HPP ("sample page") that is active while using the 
customization features, while it has no effect on the actual production page. 
 
A "Save" button, when clicked, makes sure that the changes are made immediately to the production HPP, unless the bank has requested an approval process. In this case: 
•
 The "Save" button only implies saving changes to the Sample Page (to resume work at a later time); 

•
 On completion of work, the "Submit for Approval" button appears to submit the customization for approval by the bank. Customization is then Pending until approved by the bank. In this status, the customization is "frozen" and cannot be modified further until the decision of the bank; 

•
 At the time of the decision: 


a. The Merchant receives a notification on the Home Page by the Back Office bearing this decision. In case of refusal, the reason shall also be given. The Merchant also receives the notification by email; 
b. If the decision is successful, the customization automatically becomes operational. No action is required by the Merchant. 
c. In any case, the customization is unlocked and can be changed again 
 
The Merchant can update their customization when appropriate without limitation. This allows the 
application of temporary customizations for specific promotional campaigns or other business 
needs. 
 
It is also possible to cancel the customization (using "Revert"). In this case, the Buyers see 
the HPP with the standard graphics as set by the bank 
 
For full details on the customization features available and how they work, see the User Manual 
for the Back Office, which is supplied upon service activation. 
 
Examples of Layout1 and Layout2 
 

Customization on Smartphones and Tablets 
The HPP is carried out using responsive technology. This means that the display is optimal even 
for users making payments using their smartphone or tablet, and the customization applied is 
accurately reflected on these devices without any additional activities. 
 
For smartphones, it is important to note that IPG will always display Layout1 (the vertical model) 
regardless of the layout chosen by the Merchant (this choice has value for users using desktop or 
tablet devices). It is recommended, therefore, to always complete the customization of both 
layouts. 
 
 
 
 
 
 
 
 
Appendix A – Response Codes 
 
 
00 
 Approved or completed successfully 
 
01 
 Refer to card issuer 
 
02 
 Refer to special conditions for card issuer 
 
03 
 Invalid merchant 
 
04 
 Pick-up card 
 
05 
 Do not honor 
 
06 
 Error 
 
07 
 Pick-up card, special condition 
 
08 
 Honor with identification 
 
09 
 Request in progress 
 
11 
 Approved (VIP) 
 
12 
 Invalid transaction 
 
13 
 Invalid amount 
 
14 
 Invalid card number (no such number) 
 
15 
 No such issuer 
 
30 
 Format error 
 
31 
 Bank not supported by switch 
 
33 
 Expired card 
 
34 
 Suspected fraud 
 
35 
 Card acceptor contact acquirer 
 
36 
 Restricted card 
 
37 
 Card acceptor call acquirer security 
 
38 
 Allowable PIN tries exceeded 
 
39 
 No credit account 
 
41 
 Lost card 
 
43 
 Stolen card, pick-up 
 
51 
 Not sufficient funds 
 
54 
 Expired card 
 
55 
 Incorrect personal identification number 
 
56 
 No card record 
 


57 
 Transaction not permitted to cardholder 
 
58 
 Transaction not permitted to terminal 
 
61 
 Exceeds withdrawal amount limit 
 
62 
 Restricted card 
 
65 
 Exceeds withdrawal frequency limit 
 
68 
 Response received too late 
 
75 
 Allowable number of PIN tries exceeded 
 
from 
76 to 
89 
 Reserved for private use 
 
90 
 Cut-off is in process, a switch is ending business for a day and 
starting the next (transaction can be sent again in a few minutes) 
 
91 
 Issuer or switch is inoperative 
 
92 
 Financial institution or intermediate network facility cannot be 
found for routing 
 
94 
 Duplicate transmission 
 
96 
 System malfunction 
 
from 
N0 
to R8 
 Reserved for private use
</file>

</repository_files>
</file>

<file path="class-novabankaipg.php">
<?php
/**
 * NovaBanka IPG33 Payment Gateway Integration
 *
 * @package    NovaBankaIPG
 * @author     Milovan Tatić
 * @copyright  Milovan Tatić
 * @license    Free for private use. Commercial use is not allowed without permission.
 *
 * @wordpress-plugin
 * Plugin Name: NovaBanka IPG33 Payment Gateway
 * Description: 3D Secure payment gateway integration for WooCommerce
 * Version:     1.0.1
 * Author:      Milovan Tatić
 * Text Domain: novabankaipg
 * Domain Path: /languages
 * Requires PHP: 7.4
 * WC requires at least: 5.0
 * WC tested up to: 8.0
 */

namespace NovaBankaIPG;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

use NovaBankaIPG\Core\NovaBankaIPGGateway;
use NovaBankaIPG\Utils\APIHandler;
use NovaBankaIPG\Utils\Config;
use NovaBankaIPG\Utils\DataHandler;
use NovaBankaIPG\Utils\Logger;
use NovaBankaIPG\Utils\MessageHandler;
use NovaBankaIPG\Utils\SharedUtilities;
use NovaBankaIPG\Utils\ThreeDSHandler;
use NovaBankaIPG\Services\NotificationService;
use NovaBankaIPG\Services\PaymentService;

/**
 * Main plugin class for NovaBanka IPG33 Payment Gateway.
 *
 * Handles plugin initialization, component loading, and WooCommerce integration.
 *
 * @since 1.0.0
 */
class NovaBankaIPG {
	/**
	 * Singleton instance of the plugin.
	 *
	 * @var self|null
	 */
	private static $instance = null;

	/**
	 * Container for services.
	 *
	 * @var array
	 */
	private $container = array();

	/**
	 * Plugin version.
	 *
	 * @var string
	 */
	private const VERSION = '1.0.0';

	/**
	 * Plugin directory path.
	 *
	 * @var string
	 */
	private const PLUGIN_DIR = __DIR__;

	/**
	 * Plugin directory URL.
	 *
	 * @var string
	 */
	private const PLUGIN_URL = WP_PLUGIN_URL . '/novabanka-ipg';

	/**
	 * Get the singleton instance of the plugin.
	 *
	 * @return self The singleton instance.
	 */
	public static function instance(): self {
		if ( null === self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Constructor.
	 */
	private function __construct() {
		$this->define_constants();
		$this->init_autoloader();
		$this->init_container();
		$this->init_hooks();
	}

	/**
	 * Define plugin constants.
	 */
	private function define_constants(): void {
		if ( ! defined( 'NOVABANKAIPG_VERSION' ) ) {
			define( 'NOVABANKAIPG_VERSION', self::VERSION );
		}
		if ( ! defined( 'NOVABANKAIPG_PLUGIN_DIR' ) ) {
			define( 'NOVABANKAIPG_PLUGIN_DIR', self::PLUGIN_DIR );
		}
		if ( ! defined( 'NOVABANKAIPG_PLUGIN_URL' ) ) {
			define( 'NOVABANKAIPG_PLUGIN_URL', self::PLUGIN_URL );
		}
	}

	/**
	 * Initialize autoloader.
	 */
	private function init_autoloader(): void {
		spl_autoload_register( array( $this, 'autoload' ) );
	}

	/**
	 * Initialize service container.
	 */
	private function init_container(): void {
		// Initialize core services.
		$this->container['logger']       = new Logger();
		$this->container['data_handler'] = new DataHandler();

		// Get gateway settings.
		$settings = Config::get_all_settings();

		// Initialize API handler with dependencies.
		$this->container['api_handler'] = new APIHandler(
			$settings['api_endpoint'] ?? '',
			$settings['terminal_id'] ?? '',
			$settings['terminal_password'] ?? '',
			$settings['secret_key'] ?? '',
			$this->container['logger'],
			$this->container['data_handler'],
			$settings['test_mode'] ?? 'yes'
		);

		// Initialize message handler.
		$this->container['message_handler'] = new MessageHandler(
			$settings['terminal_id'] ?? '',
			$settings['terminal_password'] ?? '',
			$settings['secret_key'] ?? '',
			$this->container['data_handler'],
			$this->container['logger']
		);

		// Initialize 3DS handler.
		$this->container['threeds_handler'] = new ThreeDSHandler(
			$this->container['api_handler'],
			$this->container['logger']
		);

		// Initialize payment service.
		$this->container['payment_service'] = new PaymentService(
			$this->container['api_handler'],
			$this->container['logger'],
			$this->container['data_handler']
		);

		// Initialize notification service.
		$this->container['notification_service'] = new NotificationService(
			$this->container['api_handler'],
			$this->container['logger'],
			$this->container['data_handler']
		);
	}

	/**
	 * Initialize hooks.
	 */
	private function init_hooks(): void {
		// Check WooCommerce dependency.
		add_action( 'plugins_loaded', array( $this, 'check_dependencies' ) );

		// Initialize plugin after WooCommerce loads.
		add_action( 'woocommerce_init', array( $this, 'init_plugin' ) );

		// Register payment gateway.
		add_filter( 'woocommerce_payment_gateways', array( $this, 'add_gateway' ) );

		// Register scripts and styles.
		add_action( 'wp_enqueue_scripts', array( $this, 'register_scripts' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'register_admin_scripts' ) );

		// Handle API endpoints.
		add_action( 'woocommerce_api_novabankaipg', array( $this, 'handle_api_request' ) );

		// Add settings link to plugins page.
		add_filter(
			'plugin_action_links_' . plugin_basename( __FILE__ ),
			array( $this, 'add_settings_link' )
		);
	}

	/**
	 * Check plugin dependencies.
	 */
	public function check_dependencies(): void {
		if ( ! class_exists( 'WooCommerce' ) ) {
			add_action( 'admin_notices', array( $this, 'woocommerce_missing_notice' ) );
			return;
		}
	}

	/**
	 * Initialize the plugin.
	 */
	public function init_plugin(): void {
		load_plugin_textdomain(
			'novabanka-ipg-gateway',
			false,
			dirname( plugin_basename( __FILE__ ) ) . '/languages/'
		);
	}

	/**
	 * Add the gateway to WooCommerce.
	 *
	 * @param array $methods Existing payment methods.
	 * @return array Modified payment methods.
	 */
	public function add_gateway( array $methods ): array {
		$methods[] = NovaBankaIPGGateway::class;
		return $methods;
	}

	/**
	 * Register frontend scripts and styles.
	 */
	public function register_scripts(): void {
		if ( ! is_checkout() ) {
			return;
		}

		wp_enqueue_style(
			'novabankaipg-styles',
			NOVABANKAIPG_PLUGIN_URL . '/assets/css/ipg-styles.css',
			array(),
			NOVABANKAIPG_VERSION
		);

		wp_enqueue_script(
			'novabankaipg-scripts',
			NOVABANKAIPG_PLUGIN_URL . '/assets/js/ipg-scripts.js',
			array( 'jquery' ),
			NOVABANKAIPG_VERSION,
			true
		);

		// Add nonce for AJAX requests.
		wp_localize_script(
			'novabankaipg-scripts',
			'novabankaipg_params',
			array(
				'ajax_url' => admin_url( 'admin-ajax.php' ),
				'nonce'    => wp_create_nonce( 'novabankaipg-nonce' ),
			)
		);
	}

	/**
	 * Register admin scripts and styles.
	 *
	 * @param string $hook Current admin page hook.
	 */
	public function register_admin_scripts( string $hook ): void {
		if ( 'woocommerce_page_wc-settings' !== $hook ) {
			return;
		}

		wp_enqueue_style(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . '/assets/css/ipg-admin.css',
			array(),
			NOVABANKAIPG_VERSION
		);

		wp_enqueue_script(
			'novabankaipg-admin',
			NOVABANKAIPG_PLUGIN_URL . '/assets/js/ipg-admin.js',
			array( 'jquery' ),
			NOVABANKAIPG_VERSION,
			true
		);

		// Add nonce for admin AJAX requests.
		wp_localize_script(
			'novabankaipg-admin',
			'novabankaipg_admin_params',
			array(
				'ajax_url' => admin_url( 'admin-ajax.php' ),
				'nonce'    => wp_create_nonce( 'novabankaipg-admin-nonce' ),
			)
		);
	}

	/**
	 * Handle API requests.
	 */
	public function handle_api_request(): void {
		// Verify nonce for API requests.
		if ( ! check_ajax_referer( 'novabankaipg-nonce', 'nonce', false ) ) {
			wp_send_json_error( 'Invalid nonce.' );
			return;
		}

		// Sanitize and validate POST data.
		$post_data = array_map( 'sanitize_text_field', wp_unslash( $_POST ) );

		try {
			$this->container['notification_service']->handle_notification( $post_data );
			wp_send_json_success();
		} catch ( \Exception $e ) {
			$this->container['logger']->error( 'API request failed: ' . esc_html( $e->getMessage() ) );
			wp_send_json_error( esc_html( $e->getMessage() ) );
		}
	}

	/**
	 * Add settings link to plugin list.
	 *
	 * @param array $links Existing plugin links.
	 * @return array Modified plugin links.
	 */
	public function add_settings_link( array $links ): array {
		$settings_url  = admin_url( 'admin.php?page=wc-settings&tab=checkout&section=novabankaipg' );
		$settings_link = sprintf(
			'<a href="%s">%s</a>',
			esc_url( $settings_url ),
			esc_html__( 'Settings', 'novabanka-ipg-gateway' )
		);
		array_unshift( $links, $settings_link );
		return $links;
	}

	/**
	 * Display WooCommerce missing notice.
	 */
	public function woocommerce_missing_notice(): void {
		?>
		<div class="error">
			<p>
				<?php
				esc_html_e(
					'NovaBanka IPG requires WooCommerce to be installed and active.',
					'novabanka-ipg-gateway'
				);
				?>
			</p>
		</div>
		<?php
	}

	/**
	 * Autoloader for plugin classes.
	 *
	 * @param string $class_name Full class name.
	 */
	private function autoload( string $class_name ): void {
		// Only handle classes in our namespace.
		if ( 0 !== strpos( $class_name, 'NovaBankaIPG\\' ) ) {
			return;
		}

		// Convert class name to file path.
		$file_path = str_replace(
			array( 'NovaBankaIPG\\', '\\' ),
			array( '', DIRECTORY_SEPARATOR ),
			$class_name
		);

		// Convert to lowercase.
		$file_name = 'class-' . strtolower( basename( $file_path ) ) . '.php';
		$file_path = dirname( $file_path ) . DIRECTORY_SEPARATOR . $file_name;

		$file = NOVABANKAIPG_PLUGIN_DIR . '/includes/' . $file_path;

		if ( file_exists( $file ) ) {
			require_once $file;
		}
	}
}

// Initialize plugin.
add_action(
	'plugins_loaded',
	function () {
		NovaBankaIPG::instance();
	}
);
</file>

<file path="developer-log.json">
{
    "project": "NovaBanka IPG Gateway",
    "version": "1.0.1",
    "date": "2024-03-28",
    "description": "Major refactoring to remove interfaces and align with WordPress/WooCommerce standards.",
    "changes": [
        {
            "timestamp": "2024-03-28T10:00:00Z",
            "type": "refactor",
            "component": "interfaces",
            "action": "remove",
            "description": "Removed all interface files to align with WordPress coding standards.",
            "reason": "WordPress core and WooCommerce rarely use interfaces. Hooks and filters provide better extensibility.",
            "files_affected": [
                "/includes/Interfaces/*"
            ],
            "impact": "Simplified codebase without losing functionality",
            "migration_notes": "Any plugins extending this gateway should now use hooks/filters instead of implementing interfaces"
        },
        {
            "timestamp": "2024-03-28T10:15:00Z",
            "type": "update",
            "component": "class-logger.php",
            "action": "modify",
            "description": "Renamed methods to follow WordPress naming conventions.",
            "changes": [
                "formatMessage -> format_message",
                "sanitizeContext -> sanitize_context",
                "shouldRedactKey -> should_redact_key"
            ],
            "reason": "Align with WordPress coding standards using snake_case for method names.",
            "example": {
                "before": "private function formatMessage(string $message)",
                "after": "private function format_message(string $message)"
            }
        },
        {
            "timestamp": "2024-03-28T10:30:00Z",
            "type": "update",
            "component": "class-payment-service.php",
            "action": "modify",
            "description": "Added WordPress hooks for extensibility.",
            "changes": [
                "Added 'novabankaipg_before_payment_process' filter",
                "Added 'novabankaipg_before_refund_process' filter",
                "Added 'novabankaipg_after_refund_process' action",
                "Added 'novabankaipg_payment_data' filter"
            ],
            "reason": "Follow WordPress plugin development best practices for extensibility.",
            "hook_examples": {
                "modify_payment_data": {
                    "filter": "novabankaipg_payment_data",
                    "example": "add_filter('novabankaipg_payment_data', function($data, $order) { return $data; }, 10, 2);"
                },
                "after_refund": {
                    "action": "novabankaipg_after_refund_process",
                    "example": "add_action('novabankaipg_after_refund_process', function($response, $order) { /* handle refund */ }, 10, 2);"
                }
            }
        },
        {
            "timestamp": "2024-03-28T10:45:00Z",
            "type": "update",
            "component": "class-config.php",
            "action": "modify",
            "description": "Simplified configuration management.",
            "changes": [
                "Removed interface implementation",
                "Added OPTION_PREFIX constant",
                "Updated method signatures"
            ],
            "reason": "Simplify code and follow WordPress options API patterns.",
            "best_practices": [
                "Use WordPress options API for settings",
                "Follow WordPress naming conventions for option keys",
                "Implement proper sanitization"
            ]
        },
        {
            "timestamp": "2024-03-28T11:00:00Z",
            "type": "update",
            "component": "class-novabankaipggateway.php",
            "action": "modify",
            "description": "Updated gateway class to use concrete classes.",
            "changes": [
                "Removed interface type hints",
                "Updated property declarations",
                "Added proper escaping for translations"
            ],
            "reason": "Improve code readability and security while maintaining WooCommerce standards.",
            "security_improvements": [
                "Added esc_html__ for translations",
                "Improved data sanitization",
                "Added proper nonce verification"
            ]
        },
        {
            "timestamp": "2024-03-28T12:00:00Z",
            "type": "security",
            "component": "class-novabankaipg.php",
            "action": "fix",
            "description": "Added nonce verification and proper data sanitization.",
            "changes": [
                "Added nonce verification for API requests",
                "Added proper data sanitization for POST data",
                "Added security checks for direct file access"
            ],
            "reason": "Improve security following WordPress standards."
        },
        {
            "timestamp": "2024-03-28T12:15:00Z",
            "type": "integration",
            "component": "multiple",
            "action": "refactor",
            "description": "Improved class integration and dependencies.",
            "changes": [
                "Standardized constructor dependency injection",
                "Added proper type hints",
                "Improved error handling between classes",
                "Added proper hooks for extensibility"
            ],
            "reason": "Better code organization and maintainability."
        },
        {
            "timestamp": "2024-03-28T12:30:00Z",
            "type": "standards",
            "component": "all",
            "action": "update",
            "description": "Updated code to follow latest WooCommerce standards.",
            "changes": [
                "Added proper WooCommerce hooks",
                "Improved order status handling",
                "Added proper payment flow handling",
                "Improved logging and error handling"
            ],
            "reason": "Align with WooCommerce best practices and critical flows."
        },
        {
            "timestamp": "2024-03-28T13:00:00Z",
            "type": "fix",
            "component": "class-datahandler.php",
            "action": "update",
            "description": "Fixed linting errors and added proper escaping.",
            "changes": [
                "Added proper escaping for currency code errors",
                "Added proper escaping for field validation errors",
                "Fixed array formatting",
                "Added proper hooks for extensibility"
            ],
            "reason": "Improve security and follow WordPress standards."
        },
        {
            "timestamp": "2024-03-28T13:15:00Z",
            "type": "fix",
            "component": "class-messagehandler.php",
            "action": "update",
            "description": "Fixed error handling and escaping.",
            "changes": [
                "Added proper escaping for error messages",
                "Added proper error handling",
                "Added proper hooks for extensibility",
                "Fixed array formatting"
            ],
            "reason": "Improve security and error handling."
        },
        {
            "timestamp": "2024-03-28T13:30:00Z",
            "type": "fix",
            "component": "class-paymentservice.php",
            "action": "update",
            "description": "Fixed indentation and method spacing.",
            "changes": [
                "Fixed indentation to use tabs",
                "Fixed method spacing",
                "Added proper error handling",
                "Added proper hooks"
            ],
            "reason": "Follow WordPress coding standards."
        },
        {
            "timestamp": "2024-03-28T13:45:00Z",
            "type": "fix",
            "component": "multiple",
            "action": "update",
            "description": "Fixed linting errors across multiple files.",
            "changes": [
                "Fixed spacing in function calls",
                "Fixed array formatting",
                "Fixed indentation",
                "Added proper escaping"
            ],
            "reason": "Follow WordPress coding standards and improve code quality."
        },
        {
            "timestamp": "2024-03-28T14:00:00Z",
            "type": "feature",
            "component": "all",
            "action": "add",
            "description": "Added proper hooks for extensibility.",
            "changes": [
                "Added filters for data modification",
                "Added actions for process notifications",
                "Added proper hook documentation",
                "Added examples in comments"
            ],
            "reason": "Improve plugin extensibility following WordPress patterns."
        }
    ],
    "summary": {
        "total_files_changed": 7,
        "interfaces_removed": 9,
        "hooks_added": 4,
        "methods_renamed": 3,
        "primary_goals": [
            "Align with WordPress coding standards",
            "Improve code maintainability",
            "Enhance extensibility through hooks",
            "Simplify architecture"
        ]
    },
    "hooks_documentation": {
        "filters": {
            "novabankaipg_payment_data": {
                "description": "Modify payment data before processing",
                "parameters": {
                    "data": "array - The payment data",
                    "order": "WC_Order - The order object"
                },
                "return": "array - Modified payment data"
            },
            "novabankaipg_before_refund_process": {
                "description": "Modify refund data before processing",
                "parameters": {
                    "refund_data": "array - The refund data",
                    "order": "WC_Order - The order object"
                },
                "return": "array - Modified refund data"
            }
        },
        "actions": {
            "novabankaipg_after_payment_init": {
                "description": "Triggered after payment initialization",
                "parameters": {
                    "response": "array - The API response",
                    "order": "WC_Order - The order object"
                }
            },
            "novabankaipg_after_refund_process": {
                "description": "Triggered after refund processing",
                "parameters": {
                    "response": "array - The API response",
                    "order": "WC_Order - The order object"
                }
            }
        }
    },
    "next_steps": [
        "Update documentation to reflect removed interfaces",
        "Add unit tests for new methods",
        "Create example code for using the new hooks",
        "Review security implications of changes"
    ],
    "backwards_compatibility": {
        "minimum_wp_version": "5.8",
        "minimum_wc_version": "5.0",
        "breaking_changes": [
            "Removed interface implementations - plugins extending gateway need updates",
            "Changed method names to follow WordPress standards",
            "Updated hook names to be more consistent"
        ],
        "migration_guide": "See documentation for examples of using new hooks and filters"
    },
    "hooks_added": {
        "filters": {
            "novabankaipg_before_format_amount": {
                "description": "Modify amount before formatting",
                "parameters": {
                    "amount": "float - The amount to format"
                }
            },
            "novabankaipg_currency_code": {
                "description": "Modify currency code",
                "parameters": {
                    "code": "string - The currency code",
                    "currency": "string - The original currency"
                }
            }
        },
        "actions": {
            "novabankaipg_after_payment_init": {
                "description": "After payment initialization",
                "parameters": {
                    "response": "array - The API response",
                    "order": "WC_Order - The order object"
                }
            },
            "novabankaipg_after_refund_process": {
                "description": "After refund processing",
                "parameters": {
                    "response": "array - The API response",
                    "order": "WC_Order - The order object"
                }
            }
        }
    },
    "security_improvements": {
        "escaping": [
            "Added esc_html__ for translations",
            "Added esc_html for error messages",
            "Added proper data sanitization"
        ],
        "validation": [
            "Added proper nonce verification",
            "Added proper data validation",
            "Added proper error handling"
        ]
    }
}
</file>

<file path="ipg-gateway-example-php.md">
<?php
/*
 * Plugin Name: WooCommerce IPG Payment Gateway
 * Plugin URI: https://www.tasgroup.rs/
 * Description: Extends WooCommerce with the IPG Payment Gateway.
 * Author: TAS EE
 * Author URI: https://www.tasgroup.rs/
 * Version: 1.0.4
 *
 * History: 
 *  1.0.1
 *      - Basic purchase functionality
 *  1.0.2
 *  - Added purchaseInstallData
 *  - Added action_woocommerce_order_refunded
 *  1.0.3
 *  - Fixed action woocommerce_api_callback
 *  1.0.4
 *  - Increased Response Title size and fixed default value of response URL 
 *  1.0.5
 *  - Improved NOT CAPTURED error message presentation
 *
 */

add_action( 'woocommerce_thankyou', 'ipg_order_received_title', 1 );
function ipg_order_received_title( ) {
    
    $title = '';
    if (isset($_GET['result']) &&  ($_GET['result'] == 'CAPTURED' || $_GET['result'] == 'APPROVED')) {
        $title.='<div style="color:Green;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment successful.</label><br>';
        $title.='<label>Result: ' . $_GET['result'] . '</label><br>';
        $title.='<label>Reference:'.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else if (isset($_GET['result']) && $_GET['result'] == 'NOT_CAPTURED') {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Payment Declined</label><br>';
        $title.='<label>Result: NOT CAPTURED</label><br>';
        $title.='<label>Response Code: '.$_GET['responseCode'].'</label><br>';
        if (isset($_GET['responseDescription'])) {
            $title.='<label>Response Description: '.$_GET['responseDescription'].'</label><br>';
        }
        $title.='<label>Reference: '.$_GET['ref'].'</label><br>';
        $title.='</div>';
    } else  if (isset($_GET['errorCode'])) {
        $title.='<div style="color:Red;font-size: 2em;padding-bottom: 0.9em;">';
        $title.='<label>Error :'.$_GET['errorCode'];
        if (isset($_GET['errorDesc'])) {
            $title.='-'.$_GET['errorDesc'].'';
        }
        $title.='</label>';
        $title.='</div>';
    } else {
        $title.='<div style="color:Red;font-size: 1.4em;padding-bottom: 0.9em;">';
        $title.='<label>Notification Error - Check RESPONSE URL</label><br>';
        $title.='<label>Please contact support</label><br>';
        $title.='</div>';
    }
    $title .= '<B>';
    
    echo $title;
}

add_filter('woocommerce_payment_gateways', 'ipg_gateway_class');
function ipg_gateway_class($gateways)
{
    $gateways[] = 'WC_IPG_POST_Gateway';
    return $gateways;
}

// Setup the responseURL interface
add_filter('query_vars', 'ipg_add_query_vars');

/**
 * Add the 'ipg_response_interface' query variable so WordPress
 * won't remove it.
 */
function ipg_add_query_vars($vars)
{
    $vars[] = "ipg_response_interface";
    return $vars;
}

add_action('woocommerce_before_thankyou', 'ipg_before_thankyou');

function ipg_before_thankyou($order_id)
{
    $has_order_id = isset($order_id);
    error_log('has_order_id ');
    error_log($has_order_id);
    if ($has_order_id != 1)
        return $order_id;
    
    error_log('Could perform something with Order ID: ');
    error_log($order_id);
    
    $order = new WC_Order($order_id);
    $order->set_payment_method_title('TUSAM');
    
}

/*
 * The class itself, please note that it is inside plugins_loaded action hook
 */
add_action('plugins_loaded', 'ipg_init_gateway_class');

function ipg_init_gateway_class()
{
    
    /**
     * check for 'ipg_response_interface' query variable and do what you want if its there
     */
    add_action('woocommerce_api_callback', 'ipg_response_interface');

    function ipg_response_interface($template)
    {
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
        // Load basics
        require_once ('wp-load.php');
        
        $request_body = file_get_contents("php://input");
        error_log('Received JSON request:');
        error_log($request_body);
        
        if (! isset($request_body) || empty($request_body)) {
            error_log('Received Empty JSON:');
            error_log($request_body);
            return $template;
        }
        
        $request_json = json_decode($request_body);
        
        // json request, reply with json response
        header('Content-Type: application/json');
        
        // Process the order
        if (isset($request_json->type) && $request_json->type == 'valid') {
            error_log('IPG JSON Valid Message:');
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            
            $order->set_transaction_id($request_json->paymentid);
            
            $result_url = $order->get_checkout_order_received_url();
            if (isset($request_json->result) && ($request_json->result == 'CAPTURED' || $request_json->result == 'APPROVED')) {
                $result_url .=  '&result='.$request_json->result.'&ref='.$request_json->ref;
                // Mark order as 'processing'
                $order->payment_complete();
                $order->add_order_note('Received Successful payment from IPG gateway, result: ' . $request_json->result . ', ref: ' . $request_json->ref, 'woocommerce_gateway_ipg');
                // log
                error_log('Received Payment successful from IPG gateway');
                // Order successful URL
            } else {
                $result_url .=  '&result=NOT_CAPTURED&responseCode='.$request_json->responsecode.'&ref='.$request_json->ref.'&responseDescription='.$request_json->responsedescription;
                // Mark order as 'failed'
                $order->update_status('failed', __('Received Payment Declined from IPG gateway , result: ' . $request_json->result . ', responseCode: ' . $request_json->responsecode . ', ref: ' . $request_json->ref.', responseDescription='.$request_json->responsedescription, 'woocommerce_gateway_ipg'));
                // log
                error_log('Received Payment Declined from IPG gateway ');
                // Order successful URL
            }
            // Command the redirection to the ThankYou page
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            $successful_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($successful_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        } else {
            error_log('IPG JSON Error Message:');
            error_log($request_json->errorCode);
            error_log($request_json->errorDesc);
            error_log($request_json->paymentid);
            error_log($request_json->trackid);
            
            wc_add_notice('IPG Response Error', 'error');
            wc_add_notice($request_json->errorDesc, 'error');
            
            // Get vars
            $trackid = intval($request_json->trackid);
            // Create the Order object
            $order = new WC_Order($trackid);
            // Mark as 'Processing'
            $order->update_status('failed', __('Received Error from IPG gateway payment, paymentid: ' . $request_json->paymentid . ', errorCode: ' . $request_json->errorCode . ', errorDesc: ' . $request_json->errorDesc, 'woocommerce_gateway_ipg'));
            
            $result_url = $order->get_checkout_order_received_url() . '&errorCode=' . $request_json->errorCode . '&errorDesc=' . $request_json->errorDesc;
            $message_verifier_fields_array = array(
                'PaymentNotificationResponse',
                '1',
                $request_json->paymentid,
                $WC_IPG_POST_Gateway->get_option('SecretKey'),
                // 'YXKZPOQ9RRLGPDED5D3PC5BJ',
                $result_url
            );
            
            // load message verifier
            $msgVerifier = getMessageVerifier($message_verifier_fields_array);
            
            $error_json_array = array(
                'paymentID' => $request_json->paymentid,
                'msgVerifier' => $msgVerifier,
                'msgName' => 'PaymentNotificationResponse',
                'version' => '1',
                'browserRedirectionURL' => $result_url
            );
            $response_json = json_encode($error_json_array, JSON_PRETTY_PRINT);
            error_log('Sending JSON response:');
            error_log($response_json);
            echo $response_json;
        }
        exit();

        return $template;
    }

    function getMessageVerifier($messageVerifierFields)
    {
        $messageVerifierBase = '';
        foreach ($messageVerifierFields as &$messageVerifierField) {
            $messageVerifierBase .= $messageVerifierField;
        }
        error_log('Message Verifier Base loaded: ');
        error_log($messageVerifierBase);
        
        $messageVerifierBase_hash = hash('sha256', $messageVerifierBase);
        error_log('Message Verifier Hash Hex loaded: ');
        error_log($messageVerifierBase_hash);
        
        $messageVerifierBase_hash_bytes = hex2bin($messageVerifierBase_hash);
        
        // Convert binary to base64
        $msgVerifier = base64_encode($messageVerifierBase_hash_bytes);
        error_log('Message Verifier Hash Base64 loaded: ');
        error_log($msgVerifier);
        return $msgVerifier;
    }

    class WC_IPG_POST_Gateway extends WC_Payment_Gateway
    {

        /**
         * Class constructor
         */
        public function __construct()
        {
            $this->id = 'asoftipg'; // payment gateway plugin ID

            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            if (empty($this->CheckoutIconUrl)) {
                // Set a default value
                $this->icon = plugin_dir_url(__FILE__) . '../ipg-gateway/assets/img/TASEE.png';
            } else {
                $this->icon = $this->CheckoutIconUrl;
            }
            
            $this->has_fields = false; // true in case you need a custom credit card form
            $this->method_title = 'IPG Gateway';
            $this->method_description = 'Description of IPG payment gateway'; // will be displayed on the options page
                                                                              
            // gateways can support subscriptions, refunds, saved payment methods,
                                                                              // but in this plugin we begin with simple payments
            $this->supports = array(
                'products'
            );
            
            // Method with all the options fields
            $this->init_form_fields();
            
            // Load the settings.
            $this->init_settings();
            $this->title = $this->get_option('title');
            $this->description = $this->get_option('description');
            $this->enabled = $this->get_option('enabled');
            
            $this->MessageType = $this->get_option('MessageType');
            $this->MessageVersion = $this->get_option('MessageVersion');
            $this->TerminalID = $this->get_option('TerminalID');
            $this->Password = $this->get_option('Password');
            $this->IPGURL = $this->get_option('IPGURL');
            $this->IPGSelect = $this->get_option('IPGSelect');
            $this->SecretKey = $this->get_option('SecretKey');
            $this->Action = $this->get_option('Action');
            $this->ResponseURL = $this->get_option('ResponseURL');
            $this->ErrorURL = $this->get_option('ErrorURL');
            $this->NotificationFormat = $this->get_option('NotificationFormat');
            $this->PaymentPageMode = $this->get_option('PaymentPageMode');
            $this->PaymentInstrument = $this->get_option('PaymentInstrument');
            $this->CardSHA2 = $this->get_option('CardSHA2');
            $this->PaymentTimeout = $this->get_option('PaymentTimeout');
            $this->Language = $this->get_option('Language');
            $this->PurchaseInstalData = $this->get_option('PurchaseInstalData');
            $this->CheckoutIconUrl = $this->get_option('CheckoutIconUrl');
            
            
            
            // This action hook saves the settings
            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array(
                $this,
                'process_admin_options'
            ));
            
            // We need custom JavaScript to obtain a token
            // add_action( 'wp_enqueue_scripts', array( $this, 'payment_scripts' ) );
            
            // You can also register a webhook here
            // add_action( 'woocommerce_api_IPG_webhook', array( $this, 'webhook' ) );
        }

        /**
         * Plugin options
         */
        public function init_form_fields()
        {
            $this->form_fields = array(
                'title' => array(
                    'title' => 'Title',
                    'type' => 'text',
                    'description' => 'This controls the title which the user sees during checkout.',
                    'default' => 'Credit Card',
                    'desc_tip' => true
                ),
                'description' => array(
                    'title' => 'Description',
                    'type' => 'textarea',
                    'description' => 'This controls the description which the user sees during checkout.',
                    'default' => 'Pay with your credit card via our IPG payment gateway.'
                ),
                'enabled' => array(
                    'title' => 'Enable/Disable',
                    'label' => 'Enable IPG Gateway',
                    'type' => 'checkbox',
                    'description' => '',
                    'default' => 'no'
                ),
                'MessageType' => array(
                    'title' => 'Message Type',
                    'type' => 'select',
                    'default' => 'VISEC / VIREC first transaction',
                    'class' => 'MessageType wc-enhanced-select',
                    'options' => array(
                        'MessageType' => 'VISEC / VIREC first transaction'
                    )
                ),
                'MessageVersion' => array(
                    'title' => 'Message Version',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'MessageVersion wc-enhanced-select',
                    'options' => array(
                        '1' => '1'
                    )),
                'TerminalID' => array(
                    'title' => 'Terminal ID:',
                    'type' => 'text',
                    'default' => '89110001'
                ),
                'Password' => array(
                    'title' => 'Password:',
                    'type' => 'password',
                    'default' => 'test1234'
                ),
                'IPGURL' => array(
                    'title' => 'IPG:',
                    'type' => 'text',
                    'default' => 'http://ipg-test:9080/IPGWeb/servlet/PaymentInitRequest'
                ),
                'SecretKey' => array(
                    'title' => 'Secret Key:',
                    'type' => 'text',
                    'default' => 'YXKZPOQ9RRLGPDED5D3PC5BJ'
                ),
                'Action' => array(
                    'title' => 'Action:',
                    'type' => 'select',
                    'default' => '1',
                    'class' => 'Action wc-enhanced-select',
                    'options' => array(
                        '1' => 'PURCHASE',
                        '4' => 'AUTHORIZATION'
                    )
                ),
                'ResponseURL' => array(
                    'title' => 'RESPONSE URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'ErrorURL' => array(
                    'title' => 'ERROR URL:',
                    'type' => 'text',
                    'default' => get_home_url() . '/wc-api/CALLBACK/?ipg_response_interface=1'
                ),
                'NotificationFormat' => array(
                    'title' => 'Notiication Format:',
                    'type' => 'select',
                    'default' => 'json',
                    'class' => 'NotificationFormat wc-enhanced-select',
                    'options' => array(
                        'json' => 'JSON'
                    )
                ),
                'PaymentPageMode' => array(
                    'title' => 'Payment Page Mode:',
                    'type' => 'select',
                    'default' => '0',
                    'class' => 'PaymentPageMode wc-enhanced-select',
                    'options' => array(
                        '0' => 'STANDARD'
                    )
                ),
                'PaymentInstrument' => array(
                    'title' => 'Payment Instrument:',
                    'type' => 'text',
                    'default' => ''
                ),
                'CardSHA2' => array(
                    'title' => 'CARD SHA2:',
                    'type' => 'select',
                    'default' => 'Y',
                    'class' => 'CardSHA2 wc-enhanced-select',
                    'options' => array(
                        'Y' => 'Yes',
                        'N' => 'No'
                    )
                ),
                'PaymentTimeout' => array(
                    'title' => 'Payment Timeout:',
                    'type' => 'text',
                    'default' => '30'
                ),
                'Language' => array(
                    'title' => 'Language:',
                    'type' => 'text',
                    'default' => 'USA'
                ),
                'PurchaseInstalData' => array(
                    'title' => 'Installment Number: ',
                    'type' => 'text',
                    'default' => ''
                ),
                
                'CheckoutIconUrl' => array(
                    'title' => 'Checkout Icon URL: ',
                    'type' => 'text',
                    'description' => 'Insert URL of your Checkout Icon, or leave empty to use the default one.',
                    'default' => ''
                )
            );
        }

        public function process_payment($order_id)
        {
            global $woocommerce;
            
            // we need it to get any order detailes
            $order = new WC_Order($order_id);
            
            $args = array(
                "msgName" => "PaymentInitRequest",
                'version' => $this->MessageVersion,
                'id' => $this->TerminalID,
                'password' => $this->Password,
                
                'msgVerifier' => "",
                'langId' => $this->Language,
                
                'CartContent' => $this->CartContent, // JSON [complex]
                                                     
                // 'buyerFirstName' => $this->FirstName,
                                                     // 'buyerFirstName' => "",
                                                     // 'buyerLastName' => "",
                                                     // 'buyerUserId' => "",
                                                     // 'buyerPhoneNumber' => "",
                                                     // 'buyeremailaddress' => "",
                                                     // 'clientIpAddress' => "",
                                                     // 'clientUserAgent' => "",
                                                     // 'clientHttpHeaders' => "",
                                                     
                // 'shippingInfo' => "", // JSON
                                                     // 'billingInfo' => "", // JSON
                                                     
                // 'acctType' => "",
                                                     // 'accountInfo' => "", // JSON
                                                     // 'authenticationInfo' => "", // JSON
                                                     // 'priorAuthenticationInfo'=> "", // JSON
                
                'action' => $this->Action,
                'recurAction' => "",
                'recurContractId' => "",
                'responseURL' => $this->ResponseURL, // responseURL
                'errorURL' => $this->ErrorURL, // errorURL
                'currencycode' => $order->get_currency(),
                'amt' => $order->get_total(),
                'trackid' => $order_id,
                'cardSHA2' => $this->CardSHA2,
                'paymentTimeout' => $this->PaymentTimeout,
                //'pymnDscr' => $this->PaymentDescription,
                'notificationFormat' => $this->NotificationFormat,
                'paymentPageMode' => $this->PaymentPageMode,
                'payinst' => $this->PaymentInstrument,
                'purchaseInstalData' => $this->PurchaseInstalData,
            );
            
            if (! function_exists('write_log')) {

                function write_log($log)
                {
                    if (true === WP_DEBUG) {
                        if (is_array($log) || is_object($log)) {
                            error_log(print_r($log, true));
                        } else {
                            error_log($log);
                        }
                    }
                }
            }
            
            $message_verifier_fields_array = array(
                $args['msgName'],
                $args['version'],
                $args['id'],
                $args['password'],
                $args['amt'],
                $args['trackid'],
                '',
                $this->SecretKey,
                ''
            );
            
            // load message verifier
            $args['msgVerifier'] = getMessageVerifier($message_verifier_fields_array);
            
            $args['errorURL'] = $order->get_checkout_order_received_url();
            /*
             * Your API interaction could be built with wp_remote_post()
             */
            // $response = wp_remote_post( '{payment processor endpoint}', $args );
            
            $ipg_url = $this->IPGURL;
            write_log('Sending request, url: ');
            write_log($ipg_url);
            
            $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
            write_log('request_preety_json: ');
            write_log($request_preety_json);
            
            $request_json = json_encode($args);
            write_log('request_json: ');
            write_log($request_json);
            
            // $url = 'localhost:9082/IPGWeb/servlet/PaymentInitRequest';
            $response = wp_remote_post($ipg_url, array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'Content-Type' => 'application/json; charset=utf-8'
                ),
                'body' => $request_json,
                'method' => 'POST',
                'data_format' => 'body'
            ));
            
            if (is_wp_error($response) && ! empty($response->errors)) {
                wc_add_notice('HTTP Response Error', 'error');
                wc_add_notice($response->get_error_message(), 'error');
                return;
            }
            
            $response_code = wp_remote_retrieve_response_code($response);
            write_log('Loaded response code, response_code: ');
            write_log($response_code);
            if (! in_array($response_code, array(
                200,
                201
            ))) {
                wc_add_notice('HTTP Status Error', 'error');
                wc_add_notice($response_code, 'error');
                return;
            }
            
            $response_body = wp_remote_retrieve_body($response);
            write_log('Loaded response body, response_body: ');
            write_log($response_body);
            
            $response_json = json_decode($response_body);
            if (json_last_error() > JSON_ERROR_NONE) {
                wc_add_notice('Response JSON Error:', 'error');
                wc_add_notice(json_last_error_msg(), 'error');
                return;
            }
            
            write_log('Loadded JSON response, response_preety_json: ');
            $response_preety_json = json_encode($response_json, JSON_PRETTY_PRINT);
            write_log($response_preety_json);
            
            // it could be different depending on your payment processor
            if ($response_json->type == 'valid') {
                
                $response_url = $response_json->browserRedirectionURL;
                $response_url .= "?PaymentID=";
                $response_url .= $response_json->paymentid;
                
                if (! filter_var($response_url, FILTER_VALIDATE_URL)) {
                    wc_add_notice('Invalid IPG Response Url:', 'error');
                    wc_add_notice($response_url, 'error');
                    return;
                }
                
                // Mark as on-hold (we're awaiting the cheque)
                $order->update_status('on-hold', __('Awaiting IPG payment', 'ipg_plugin'));
                
                // // Reduce stock levels
                // $order->reduce_order_stock();
                
                // // Remove cart
                // $woocommerce->cart->empty_cart();
                
                // Redirect to the thank you page
                return array(
                    'result' => 'success',
                    'redirect' => $response_url
                );
            } else {
                wc_add_notice('IPG Response Error:', 'error');
                wc_add_notice($response_json->errorCode, 'error');
                wc_add_notice($response_json->errorDesc, 'error');
                return;
            }
                        
        }
        
         
    }
    
    
    // REFOUND CALL 1!
    
    // add the action
    add_action( 'woocommerce_order_refunded', 'action_woocommerce_order_refunded', 10, 2 );
    
    // Do the magic line 659
    function action_woocommerce_order_refunded( $order_id, $refund_id )
    {
        // Your code here
        error_log('REFOUND CALL >>> POST');

        error_log('Order ID: ');
        error_log($order_id);
        
        error_log('$refund_id: ');
        error_log($refund_id);        
        
        // we need it to get any order detailes
        $order = new WC_Order($order_id);
        
        $ipg_url =  'http://ipg-test:33666/IPGWeb/servlet/PaymentInitRequest';
        
        //  Sta treba da posaljem, i kako to da dohvatim i spakujem            <<<<<
        
        global $woocommerce;
        $order = new WC_Order($order_id);
        $WC_IPG_POST_Gateway = new WC_IPG_POST_Gateway();
        
       
        $a = array ($WC_IPG_POST_Gateway->get_form_fields());
        $b = $a['SecretKey'][0]->SecretKey;
        $b = 'YXKZPOQ9RRLGPDED5D3PC5BJ';
        
        error_log(' SecretKey == ');
        error_log( $b );
        
        //init_form_fields();

        $args = array(
            'msgName'           => 'FinancialRequest',               
            'version'           => '1',                              
            'id'                => '89110001',     
            'password'          => 'test1234',                       
            'action'            => '2',                             
            'amt'               => '0,01',                           
            'currencycode'      => '840',                            
            'trackid'           => 'CTV-TEST-PureBuy-1',              
            'tranid'            => '980026872121022345', 
            'udf1'               => 'AA',
            'udf2'               => 'BB',
            'udf3'               => 'CC',
            'udf4'               => 'DD',
            'udf5'               => 'EE',
        );
        
        $refund_parameters_message_verifier_fields_array = array(
            $args['msgName'],
            $args['version'],
            $args['id'],
            $args['password'],
            $args['amt'],
            $args['trackid'],
            '',
            $b,
            ''
        );
        
        // Just print to LOG
        $request_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($request_preety_json);
        
        $refund_parameters_message_verifier_preety_json = json_encode($args, JSON_PRETTY_PRINT);
        error_log('request_preety_json: ');
        error_log($refund_parameters_message_verifier_preety_json);
        
        // load message verifier
        $msgVerifier = getMessageVerifier($refund_parameters_message_verifier_fields_array);
        $args['msgVerifier'] = $msgVerifier;

        error_log(' msgVerifier== ');
        error_log( $msgVerifier );
                
        $json_to_go = json_encode($args);
        error_log($json_to_go);
        
        $response = wp_remote_post($ipg_url, array(
            'headers'     => array('Content-Type' => 'application/json; charset=utf-8'),
            'body'        => json_encode($args),
            'method'      => 'POST',
            'data_format' => 'body',
        ));
        
        error_log('DUMMY TEST NOVAK, received data: ');
        
        error_log(' transactionId== ');
        error_log($response->transactionId);
        
        error_log(' order_number== ');
        error_log($response->order_number);
        

    }
    

    
}
</file>

</repository_files>
