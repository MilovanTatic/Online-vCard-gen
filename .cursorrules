```markdown
# Development Best Practices - NovaBanka IPG Gateway

## Core Principles

### 1. Separation of Concerns
```php
// ✅ DO: Separate functionality into distinct classes
namespace NovaBankaIPG\Core;
class Gateway { /* Payment gateway logic */ }

namespace NovaBankaIPG\API;
class APIHandler { /* API communication */ }

namespace NovaBankaIPG\Utils;
class DataHandler { /* Data formatting */ }

// ❌ DON'T: Mix concerns in single class
class PaymentGateway {
    public function process_payment() {
        // API calls
        // Data formatting
        // Order management
        // Everything mixed together
    }
}
```

### 2. Dependency Injection
```php
// ✅ DO: Use dependency injection
class Gateway extends \WC_Payment_Gateway {
    private $api_handler;
    private $data_handler;
    private $logger;

    public function __construct(
        APIHandler $api_handler,
        DataHandler $data_handler,
        Logger $logger
    ) {
        $this->api_handler = $api_handler;
        $this->data_handler = $data_handler;
        $this->logger = $logger;
    }
}

// ❌ DON'T: Create dependencies inside class
class Gateway {
    public function __construct() {
        $this->api_handler = new APIHandler();  // Tightly coupled
    }
}
```

### 3. Interface-based Development
```php
// ✅ DO: Define and use interfaces
namespace NovaBankaIPG\Interfaces;

interface APIHandler {
    public function sendPaymentInit(array $data): array;
    public function verifyNotification(array $notification): bool;
}

// Implementation
class APIHandlerImpl implements APIHandler {
    public function sendPaymentInit(array $data): array {
        // Implementation
    }
}

// ❌ DON'T: Skip interface definitions
class APIHandler {
    // Direct implementation without interface
}
```

### 4. Exception Handling
```php
// ✅ DO: Use custom exceptions and proper error handling
try {
    $response = $this->api_handler->sendPaymentInit($data);
} catch (NovaBankaIPGException $e) {
    $this->logger->error($e->getMessage(), [
        'error_type' => $e->getErrorType(),
        'order_id' => $order_id
    ]);
    throw $e;
}

// ❌ DON'T: Use generic exceptions or ignore errors
if (!$response) {
    return false;  // Silent failure
}
```

### 5. WooCommerce Integration
```php
// ✅ DO: Use WooCommerce hooks and filters
add_filter('woocommerce_payment_gateways', [$this, 'add_gateway']);
add_action('woocommerce_api_novabankaipg', [$this, 'handle_callback']);

// Provide filter hooks for customization
$amount = apply_filters('novabankaipg_payment_amount', $amount, $order);

// ❌ DON'T: Bypass WooCommerce systems
global $woocommerce;  // Don't use globals
$woocommerce->cart->total;  // Don't access directly
```

### 6. Configuration Management
```php
// ✅ DO: Use WooCommerce settings API
public function init_form_fields(): void {
    $this->form_fields = [
        'enabled' => [
            'title' => __('Enable/Disable', 'novabankaipg'),
            'type' => 'checkbox',
            'label' => __('Enable Payment', 'novabankaipg'),
            'default' => 'no'
        ],
        // Other fields...
    ];
}

// ❌ DON'T: Use WordPress options directly
update_option('novabankaipg_settings', $settings);
```

### 7. Data Handling & Validation
```php
// ✅ DO: Validate and sanitize all data
public function process_payment($order_id) {
    $order = wc_get_order($order_id);
    if (!$order) {
        throw new NovaBankaIPGException('Invalid order ID');
    }

    $amount = $this->data_handler->formatAmount($order->get_total());
    if (!$this->validate_amount($amount)) {
        throw new NovaBankaIPGException('Invalid amount');
    }
}

// ❌ DON'T: Trust input data
$amount = $_POST['amount'];  // Never trust raw input
```

### 8. Message Verification
```php
// ✅ DO: Always verify messages according to IPG specs
private function generate_message_verifier(...$fields): string {
    $message = implode('', array_filter($fields));
    $message = preg_replace('/\s+/', '', $message);
    return base64_encode(hash('sha256', $message, true));
}

// Verify consistently
if (!hash_equals($expected_verifier, $received_verifier)) {
    throw new NovaBankaIPGException('Invalid signature');
}

// ❌ DON'T: Skip verification
$response = json_decode($raw_response, true);
process_payment($response);  // Dangerous!
```

### 9. Logging & Debugging
```php
// ✅ DO: Use proper logging
public function process_payment($order_id) {
    $this->logger->debug('Processing payment', [
        'order_id' => $order_id,
        'amount' => $amount
    ]);
    
    try {
        // Process payment
    } catch (Exception $e) {
        $this->logger->error('Payment failed', [
            'error' => $e->getMessage(),
            'order_id' => $order_id
        ]);
    }
}

// ❌ DON'T: Use print or error_log
error_log('Payment error: ' . $error);
```

### 10. Code Organization

```plaintext
ipg33/
├── includes/
│   ├── API/
│   │   ├── class-api-handler.php
│   │   └── interface-api-handler.php
│   ├── Core/
│   │   └── class-gateway.php
│   ├── Interfaces/
│   │   ├── interface-data-handler.php
│   │   └── interface-logger.php
│   └── Utils/
│       ├── class-data-handler.php
│       └── class-logger.php
├── assets/
│   ├── css/
│   └── js/
└── class-ipg33.php
```

### 11. Testing Considerations
```php
// ✅ DO: Make code testable
class Gateway {
    public function process_payment($order_id) {
        $order = $this->get_order($order_id);
        return $this->send_payment($order);
    }

    // Protected methods for testing
    protected function get_order($order_id) {
        return wc_get_order($order_id);
    }

    protected function send_payment($order) {
        // Payment logic
    }
}

// ❌ DON'T: Create untestable code
class Gateway {
    public function process_payment($order_id) {
        global $woocommerce;
        // Hard to test due to globals and tight coupling
    }
}
```

### 12. Security Best Practices
```php
// ✅ DO: Follow security best practices
// Use nonces
wp_verify_nonce($_POST['_wpnonce'], 'novabankaipg_action');

// Sanitize data
$input = sanitize_text_field($raw_input);

// Check capabilities
if (!current_user_can('manage_woocommerce')) {
    return;
}

// ❌ DON'T: Skip security measures
$_POST['data'];  // Never use raw POST data
```

### 13. IPG-Specific Considerations
```php
// ✅ DO: Follow IPG specifications strictly
// Message verification
$verifier = $this->generate_message_verifier(
    $data['msgName'],
    $data['version'],
    $data['id'],
    $data['password'],
    $data['amt'],
    $data['trackid']
);

// Amount formatting
$amount = number_format($amount, 2, '.', '');

// ❌ DON'T: Deviate from IPG specs
$amount = round($amount, 2);  // Incorrect formatting
```

### 14. Documentation
```php
// ✅ DO: Document your code properly
/**
 * Process payment initialization
 *
 * @param int $order_id WooCommerce order ID
 * @return array Response data
 * @throws NovaBankaIPGException When payment initialization fails
 */
public function process_payment($order_id): array {
    // Implementation
}

// ❌ DON'T: Skip documentation
public function process_payment($order_id) {
    // Undocumented implementation
}
```

### 15. Version Control
```php
// ✅ DO: Use proper versioning
define('NOVABANKAIPG_VERSION', '1.0.0');
define('NOVABANKAIPG_MIN_WC_VERSION', '5.0.0');
define('NOVABANKAIPG_MIN_PHP_VERSION', '7.4');

// Version checks
public function check_requirements(): bool {
    if (version_compare(PHP_VERSION, NOVABANKAIPG_MIN_PHP_VERSION, '<')) {
        add_action('admin_notices', [$this, 'php_version_notice']);
        return false;
    }
    return true;
}
```

## Implementation Checklist
1. [ ] Proper namespace implementation
2. [ ] Interface definitions
3. [ ] Dependency injection setup
4. [ ] WooCommerce hooks integration
5. [ ] Proper error handling
6. [ ] Logging implementation
7. [ ] Security measures
8. [ ] Documentation
9. [ ] Testing setup
10. [ ] Version control

Following these practices will ensure:
- Maintainable code
- Secure payment processing
- Reliable IPG integration
- WooCommerce compatibility
- Future extensibility
```